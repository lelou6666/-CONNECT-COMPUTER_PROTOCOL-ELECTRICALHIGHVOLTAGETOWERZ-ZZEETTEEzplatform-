 Welcome to the mail archives on mail-archives.apache.org.

Jump to a specific top-level archive section:  abdera accumulo ace activemq airavata allura ambari ant any23 apr archiva archive argus aries asf-wide asterixdb (incubating) attic aurora avalon avro axis batchee (incubating) beehive bigtop bloodhound bookkeeper brooklyn (incubating) buildr bval calcite (incubating) camel cassandra cayenne celix chemistry chukwa clerezza click climate cloudstack cocoon commons commonsrdf (incubating) community continuum cordova corinthia (incubating) couchdb creadur crunch ctakes curator cxf datafu (incubating) db deltacloud deltaspike devicemap directmemory directory drill empire esme etch excalibur falcon felix fleece (incubating) flex flink flume forrest geode (incubating) geronimo giraph gora groovy (incubating) gump hadoop hama harmony hbase hc hdt (incubating) helix hive hivemind htrace (incubating) httpd ibatis ignite (incubating) incubator isis jackrabbit jakarta james jclouds jena jmeter johnzon (incubating) jspwiki juddi kafka karaf knox kylin (incubating) labs lens (incubating) lenya libcloud logging lucene lucenenet lucy mahout manifoldcf marmotta maven mesos metamodel mina mrql (incubating) mrunit myfaces myriad (incubating) nifi (incubating) nutch ode ofbiz olingo oltu onami oodt oozie openaz (incubating) openejb openjpa openmeetings opennlp openoffice openwebbeans optiq (incubating) orc parquet pdfbox perl phoenix pig pivot poi portals provisionr (incubating) qpid quetz ranger (incubating) rave reef (incubating) ripple (incubating) river roller samoa (incubating) samza santuario sentry (incubating) servicemix shale shindig shiro singa (incubating) sirona (incubating) sis slider (incubating) sling spamassassin spark sqoop stanbol stdcxx steve storm stratos stratosphere streams (incubating) struts subversion synapse syncope tajo tamaya (incubating) tapestry taverna (incubating) tcl tez thrift tika tiles tinkerpop (incubating) tomcat tomee trafficserver turbine tuscany twill (incubating) uima usergrid (incubating) vcl velocity vxquery whirr wicket wink wookie ws xalan xerces xml xmlbeans xmlgraphics zeppelin (incubating) zest zookeeper  


•
abdera.apache.org lists:
◦commits
◦dev
◦user

•
accumulo.apache.org lists:
◦commits
◦dev
◦notifications
◦user

•
ace.apache.org lists:
◦commits
◦dev
◦users

•
activemq.apache.org lists:
◦commits
◦dev
◦issues
◦users

•
airavata.apache.org lists:
◦architecture
◦commits
◦dev
◦issues
◦users

•
allura.apache.org lists:
◦commits
◦dev
◦users

•
ambari.apache.org lists:
◦commits
◦dev
◦user

•
ant.apache.org lists:
◦dev
◦ivy-user
◦notifications
◦user

•
any23.apache.org lists:
◦commits
◦dev
◦user

•
apr.apache.org lists:
◦bugs
◦commits
◦dev

•
archiva.apache.org lists:
◦commits
◦dev
◦issues
◦notifications
◦users

•
archive.apache.org lists:
◦httpd-pop3-dev
◦license

•
argus.apache.org lists:
◦commits
◦dev
◦user

•
aries.apache.org lists:
◦commits
◦dev
◦user

•
ASF-wide lists:
◦announce
◦apache-bugdb
◦apachecon-discuss
◦builds
◦community
◦gui-dev
◦history
◦infrastructure-dev
◦infrastructure-issues
◦jcp-open
◦legal-discuss
◦marketing
◦mirrors
◦release-discuss
◦repository
◦repository-commits
◦retreats
◦site-dev
◦small-events-discuss
◦women

•
asterixdb.incubator.apache.org lists:
◦commits
◦dev

•
attic.apache.org lists:
◦general

•
aurora.apache.org lists:
◦commits
◦dev
◦issues
◦reviews

•
avalon.apache.org lists:
◦apps-dev
◦cvs
◦dev
◦phoenix-dev

•
avro.apache.org lists:
◦commits
◦dev
◦user

•
axis.apache.org lists:
◦axis1-java-user
◦c-commits
◦c-dev
◦c-user
◦general
◦java-commits
◦java-dev
◦java-user

•
batchee.incubator.apache.org lists:
◦commits
◦dev
◦user

•
beehive.apache.org lists:
◦commits
◦dev
◦user

•
bigtop.apache.org lists:
◦announce
◦ci
◦commits
◦dev
◦user

•
bloodhound.apache.org lists:
◦commits
◦dev
◦user

•
bookkeeper.apache.org lists:
◦commits
◦dev
◦user

•
brooklyn.incubator.apache.org lists:
◦commits
◦dev

•
buildr.apache.org lists:
◦ci
◦commits
◦dev
◦users

•
bval.apache.org lists:
◦commits
◦dev
◦user

•
calcite.incubator.apache.org lists:
◦commits
◦dev
◦issues

•
camel.apache.org lists:
◦commits
◦dev
◦issues
◦users

•
cassandra.apache.org lists:
◦client-dev
◦commits
◦dev
◦user

•
cayenne.apache.org lists:
◦commits
◦dev
◦user

•
celix.apache.org lists:
◦commits
◦dev

•
chemistry.apache.org lists:
◦commits
◦dev

•
chukwa.apache.org lists:
◦commits
◦dev
◦user

•
clerezza.apache.org lists:
◦commits
◦dev

•
click.apache.org lists:
◦commits
◦dev
◦user

•
climate.apache.org lists:
◦commits
◦dev

•
cloudstack.apache.org lists:
◦announce
◦commits
◦dev
◦issues
◦marketing
◦users
◦users-cn

•
cocoon.apache.org lists:
◦cvs
◦dev
◦docs
◦users
◦users-fr

•
commons.apache.org lists:
◦commits
◦dev
◦issues
◦notifications
◦user

•
commonsrdf.incubator.apache.org lists:
◦commits
◦dev

•
community.apache.org lists:
◦commits
◦dev
◦students

•
continuum.apache.org lists:
◦commits
◦dev
◦issues
◦notifications
◦users

•
cordova.apache.org lists:
◦commits
◦dev
◦issues

•
corinthia.incubator.apache.org lists:
◦commits
◦dev

•
couchdb.apache.org lists:
◦announce
◦commits
◦dev
◦erlang
◦l10n
◦marketing
◦notifications
◦replication
◦user
◦www

•
creadur.apache.org lists:
◦commits
◦dev

•
crunch.apache.org lists:
◦commits
◦dev
◦user

•
ctakes.apache.org lists:
◦commits
◦dev
◦notifications
◦user

•
curator.apache.org lists:
◦commits
◦dev
◦user

•
cxf.apache.org lists:
◦commits
◦dev
◦issues
◦notifications
◦users

•
datafu.incubator.apache.org lists:
◦commits
◦dev

•
db.apache.org lists:
◦commons-dev
◦commons-user
◦ddlutils-dev
◦ddlutils-user
◦derby-commits
◦derby-dev
◦derby-user
◦general
◦jdo-commits
◦jdo-dev
◦jdo-user
◦ojb-dev
◦ojb-user
◦torque-dev
◦torque-user

•
deltacloud.apache.org lists:
◦commits
◦dev

•
deltaspike.apache.org lists:
◦commits
◦dev
◦users

•
devicemap.apache.org lists:
◦commits
◦dev

•
directmemory.apache.org lists:
◦commits
◦dev
◦user

•
directory.apache.org lists:
◦alliance
◦api
◦commits
◦dev
◦fortress
◦kerby
◦notifications
◦users

•
drill.apache.org lists:
◦commits
◦dev
◦issues
◦user

•
empire.apache.org lists:
◦commits
◦dev
◦user

•
esme.apache.org lists:
◦commits
◦dev

•
etch.apache.org lists:
◦commits
◦dev
◦user

•
excalibur.apache.org lists:
◦dev
◦scm
◦user

•
falcon.apache.org lists:
◦commits
◦dev
◦user

•
felix.apache.org lists:
◦commits
◦dev
◦users

•
fleece.incubator.apache.org lists:
◦commits
◦dev

•
flex.apache.org lists:
◦commits
◦dev
◦issues
◦users

•
flink.apache.org lists:
◦commits
◦dev
◦issues
◦news
◦user

•
flume.apache.org lists:
◦commits
◦dev
◦user

•
forrest.apache.org lists:
◦dev
◦site-svn
◦svn
◦user

•
geode.incubator.apache.org lists:
◦commits
◦dev
◦issues

•
geronimo.apache.org lists:
◦dev
◦scm
◦user
◦xbean-dev
◦xbean-scm
◦xbean-user

•
giraph.apache.org lists:
◦commits
◦dev
◦user

•
gora.apache.org lists:
◦commits
◦dev
◦user

•
groovy.incubator.apache.org lists:
◦dev
◦notifications
◦users

•
gump.apache.org lists:
◦commits
◦general

•
hadoop.apache.org lists:
◦common-commits
◦common-dev
◦common-issues
◦common-user
◦general
◦hdfs-commits
◦hdfs-dev
◦hdfs-issues
◦hdfs-user
◦mapreduce-commits
◦mapreduce-dev
◦mapreduce-issues
◦mapreduce-user
◦user
◦yarn-commits
◦yarn-dev
◦yarn-issues

•
hama.apache.org lists:
◦commits
◦dev
◦user

•
harmony.apache.org lists:
◦alerts
◦commits
◦dev

•
hbase.apache.org lists:
◦builds
◦commits
◦dev
◦issues
◦user

•
hc.apache.org lists:
◦commits
◦dev
◦httpclient-users

•
hdt.incubator.apache.org lists:
◦commits
◦dev

•
helix.apache.org lists:
◦commits
◦dev
◦user

•
hive.apache.org lists:
◦commits
◦dev
◦issues
◦user

•
hivemind.apache.org lists:
◦commits
◦dev
◦user

•
htrace.incubator.apache.org lists:
◦commits
◦dev
◦issues

•
httpd.apache.org lists:
◦announce
◦apreq-cvs
◦apreq-dev
◦bugs
◦cli-dev
◦cli-users
◦current-testers
◦cvs
◦dev
◦docs
◦docs-bugs
◦infra-a
◦infra-b
◦infra-c
◦mbox-dev
◦modssl-users
◦modules-dev
◦packagers
◦stable-testers
◦test-cvs
◦test-dev
◦testers
◦users
◦users-de
◦wiki-changes
◦win32-msi-cvs

•
ibatis.apache.org lists:
◦commits
◦dev
◦user-cs
◦user-java

•
ignite.incubator.apache.org lists:
◦commits
◦dev
◦issues

•
incubator.apache.org lists:
◦adffaces-commits
◦adffaces-dev
◦adffaces-issues
◦adffaces-user
◦agila-commits
◦agila-dev
◦agila-user
◦airavata-commits
◦airavata-dev
◦allura-commits
◦allura-dev
◦allura-users
◦alois-commits
◦alois-dev
◦ambari-commits
◦ambari-dev
◦ambari-user
◦amber-commits
◦amber-dev
◦amber-user
◦android-interest
◦announce
◦any23-commits
◦any23-dev
◦any23-user
◦awf-commits
◦awf-dev
◦awf-users
◦bigtop-commits
◦bigtop-dev
◦bigtop-user
◦bloodhound-commits
◦bloodhound-dev
◦bloodhound-user
◦bluesky-commits
◦bluesky-dev
◦bluesky-user
◦blur-commits
◦blur-dev
◦blur-user
◦callback-commits
◦callback-dev
◦celix-commits
◦celix-dev
◦chukwa-commits
◦chukwa-dev
◦chukwa-user
◦clerezza-commits
◦clerezza-dev
◦cloudstack-commits
◦cloudstack-dev
◦cloudstack-issues
◦cloudstack-marketing
◦cloudstack-users
◦cloudstack-users-cn
◦composer-commits
◦connectors-commits
◦connectors-dev
◦connectors-user
◦crunch-commits
◦crunch-dev
◦crunch-user
◦ctakes-commits
◦ctakes-dev
◦ctakes-notifications
◦ctakes-user
◦cvs
◦deltaspike-commits
◦deltaspike-dev
◦deltaspike-users
◦depot-cvs
◦depot-dev
◦devicemap-commits
◦devicemap-dev
◦directmemory-commits
◦directmemory-dev
◦directmemory-user
◦drill-commits
◦drill-dev
◦drill-user
◦droids-commits
◦droids-dev
◦easyant-commits
◦easyant-dev
◦etch-commits
◦etch-dev
◦etch-user
◦flex-commits
◦flex-dev
◦flex-users
◦flume-commits
◦flume-dev
◦flume-user
◦ftpserver-commits
◦ftpserver-dev
◦general
◦giraph-commits
◦giraph-dev
◦giraph-user
◦graffito-commits
◦graffito-dev
◦hama-commits
◦hama-dev
◦hama-user
◦hcatalog-commits
◦hcatalog-dev
◦hcatalog-user
◦heraldry-commits
◦heraldry-dev
◦heraldry-user
◦hise-commits
◦hise-dev
◦hise-user
◦imperius-commits
◦imperius-dev
◦imperius-user
◦infra-a
◦infra-b
◦infra-c
◦infra-d
◦infra-e
◦infra-f
◦infra-g
◦infra-h
◦infra-i
◦infra-j
◦infra-k
◦infra-l
◦infra-m
◦infra-n
◦infra-o
◦infra-p
◦infra-q
◦infra-r
◦infra-s
◦infra-t
◦infra-u
◦infra-v
◦infra-w
◦infra-x
◦infra-y
◦infra-z
◦isis-commits
◦isis-dev
◦isis-users
◦ivy-commits
◦ivy-dev
◦jena-commits
◦jena-dev
◦jena-users
◦jspwiki-commits
◦jspwiki-dev
◦jspwiki-user
◦kabuki-commits
◦kabuki-dev
◦kabuki-user
◦kafka-commits
◦kafka-dev
◦kafka-users
◦kalumet-commits
◦kalumet-dev
◦kalumet-user
◦kato-commits
◦kato-dev
◦kato-spec
◦kitty-dev
◦lokahi-commits
◦lokahi-dev
◦mesos-commits
◦mesos-dev
◦mesos-user
◦mod_ftp-commits
◦mod_ftp-dev
◦mrunit-commits
◦mrunit-dev
◦mrunit-user
◦nmaven-commits
◦nmaven-dev
◦nmaven-issues
◦npanday-commits
◦npanday-dev
◦npanday-users
◦nuvem-commits
◦nuvem-dev
◦nuvem-user
◦odf-commits
◦odf-dev
◦odf-users
◦olio-commits
◦olio-dev
◦olio-user
◦ooo-announce
◦ooo-api
◦ooo-commits
◦ooo-dev
◦ooo-general-es
◦ooo-general-ja
◦ooo-geral-ptbr
◦ooo-issues
◦ooo-l10n
◦ooo-marketing
◦ooo-progetto-it
◦ooo-qa
◦ooo-users
◦ooo-users-de
◦ooo-users-fr
◦ooo-utenti-it
◦oozie-commits
◦oozie-dev
◦oozie-users
◦openmeetings-commits
◦openmeetings-dev
◦openmeetings-user
◦openmeetings-user-espanol
◦photark-commits
◦photark-dev
◦photark-user
◦projects
◦rat-commits
◦rat-dev
◦rcf-commits
◦rcf-dev
◦s4-commits
◦s4-dev
◦s4-user
◦sanselan-commits
◦sanselan-dev
◦sis-commits
◦sis-dev
◦sis-user
◦socialsite-dev
◦stanbol-commits
◦stanbol-dev
◦stonehenge-commits
◦stonehenge-dev
◦syncope-commits
◦syncope-dev
◦syncope-user
◦tashi-commits
◦tashi-dev
◦tashi-user
◦triplesoup-commits
◦triplesoup-dev
◦vcl-commits
◦vcl-dev
◦vcl-user
◦vxquery-commits
◦vxquery-dev
◦wadi-commits
◦wadi-dev
◦wadi-user
◦wave-commits
◦wave-dev
◦wink-commits
◦wink-dev
◦wink-user
◦wookie-commits
◦wookie-dev
◦wookie-user
◦xap-commits
◦xap-dev
◦xap-user
◦yoko-commits
◦yoko-dev
◦yoko-user
◦zeta-commits
◦zeta-dev
◦zeta-issues
◦zeta-users

 •
isis.apache.org lists:
◦commits
◦dev
◦users

•
jackrabbit.apache.org lists:
◦announce
◦commits
◦dev
◦oak-commits
◦oak-dev
◦oak-issues
◦users

•
jakarta.apache.org lists:
◦alexandria-dev
◦alexandria-user
◦announcements
◦bcel-dev
◦bcel-user
◦bsf-dev
◦bsf-user
◦cactus-dev
◦cactus-user
◦dev
◦ecs-dev
◦ecs-user
◦general
◦jcs-dev
◦jcs-users
◦jmeter-dev
◦notifications
◦oro-dev
◦oro-user
◦regexp-dev
◦regexp-user
◦servletapi-dev
◦site-cvs
◦slide-dev
◦taglibs-dev
◦watchdog-dev

•
james.apache.org lists:
◦general
◦mailet-api
◦mime4j-dev
◦server-dev
◦server-user
◦site-dev

•
jclouds.apache.org lists:
◦commits
◦dev
◦issues
◦notifications
◦user

•
jena.apache.org lists:
◦commits
◦dev
◦users

•
jmeter.apache.org lists:
◦commits
◦dev
◦issues
◦user

•
johnzon.incubator.apache.org lists:
◦commits
◦dev

•
jspwiki.apache.org lists:
◦commits
◦dev
◦user

•
juddi.apache.org lists:
◦commits
◦dev
◦user

•
kafka.apache.org lists:
◦commits
◦dev
◦users

•
karaf.apache.org lists:
◦commits
◦dev
◦issues
◦user

•
knox.apache.org lists:
◦commits
◦dev
◦user

•
kylin.incubator.apache.org lists:
◦commits
◦dev

•
labs.apache.org lists:
◦commits
◦labs

•
lens.incubator.apache.org lists:
◦commits
◦dev
◦user

•
lenya.apache.org lists:
◦commits
◦dev
◦user

•
libcloud.apache.org lists:
◦announce
◦commits
◦dev
◦notifications
◦users

•
logging.apache.org lists:
◦commits
◦general
◦log4cxx-dev
◦log4cxx-user
◦log4j-dev
◦log4j-user
◦log4net-dev
◦log4net-user
◦log4php-dev
◦log4php-user

•
lucene.apache.org lists:
◦c-commits
◦c-dev
◦commits
◦dev
◦general
◦java-commits
◦java-user
◦lucene-net-commits
◦lucene-net-dev
◦lucene-net-user
◦nutch-general
◦openrelevance-dev
◦openrelevance-user
◦pylucene-commits
◦pylucene-dev
◦ruby-dev
◦solr-commits
◦solr-dev
◦solr-user

•
lucenenet.apache.org lists:
◦commits
◦dev
◦user

•
lucy.apache.org lists:
◦commits
◦dev
◦issues
◦user

•
mahout.apache.org lists:
◦commits
◦dev
◦general
◦user

•
manifoldcf.apache.org lists:
◦commits
◦dev
◦general
◦user

•
marmotta.apache.org lists:
◦commits
◦dev
◦users

•
maven.apache.org lists:
◦announce
◦commits
◦dev
◦doxia-commits
◦doxia-dev
◦doxia-users
◦issues
◦m2-dev
◦notifications
◦repo-maintainers
◦scm-commits
◦scm-dev
◦scm-users
◦site-commits
◦surefire-commits
◦surefire-dev
◦surefire-users
◦users
◦wagon-commits
◦wagon-dev
◦wagon-users

•
mesos.apache.org lists:
◦builds
◦commits
◦dev
◦issues
◦reviews
◦user

•
metamodel.apache.org lists:
◦commits
◦dev

•
mina.apache.org lists:
◦commits
◦dev
◦ftpserver-users
◦users

•
mrql.incubator.apache.org lists:
◦commits
◦dev
◦user

•
mrunit.apache.org lists:
◦commits
◦dev
◦user

•
myfaces.apache.org lists:
◦announce
◦commits
◦dev
◦notifications
◦users

•
myriad.incubator.apache.org lists:
◦commits
◦dev

•
nifi.incubator.apache.org lists:
◦commits
◦dev
◦users

•
nutch.apache.org lists:
◦agent
◦commits
◦dev
◦user

•
ode.apache.org lists:
◦commits
◦dev
◦user

•
ofbiz.apache.org lists:
◦commits
◦dev
◦user

•
olingo.apache.org lists:
◦commits
◦dev
◦user

•
oltu.apache.org lists:
◦commits
◦dev
◦user

•
onami.apache.org lists:
◦commits
◦dev
◦user

•
oodt.apache.org lists:
◦commits
◦dev
◦user

•
oozie.apache.org lists:
◦commits
◦dev
◦user

•
openaz.incubator.apache.org lists:
◦commits
◦dev

•
openejb.apache.org lists:
◦commits
◦dev
◦notifications
◦users

•
openjpa.apache.org lists:
◦commits
◦dev
◦users

•
openmeetings.apache.org lists:
◦commits
◦dev
◦user
◦user-espanol
◦user-russian

•
opennlp.apache.org lists:
◦commits
◦dev
◦issues
◦users

•
openoffice.apache.org lists:
◦announce
◦api
◦commits
◦dev
◦dev-de
◦doc
◦general-es
◦general-ja
◦geral-ptbr
◦issues
◦l10n
◦marketing
◦progetto-it
◦qa
◦users
◦users-de
◦users-fr
◦utenti-it

•
openwebbeans.apache.org lists:
◦commits
◦dev
◦user

•
optiq.incubator.apache.org lists:
◦commits
◦dev
◦issues

•
orc.apache.org lists:
◦commits

•
parquet.apache.org lists:
◦commits
◦dev

•
pdfbox.apache.org lists:
◦commits
◦dev
◦users

•
perl.apache.org lists:
◦advocacy
◦announce
◦asp
◦dev
◦docs-cvs
◦docs-dev
◦embperl
◦embperl-cvs
◦modperl
◦modperl-cvs
◦test-commits
◦test-dev

•
phoenix.apache.org lists:
◦commits
◦dev
◦user

•
pig.apache.org lists:
◦commits
◦dev
◦user

•
pivot.apache.org lists:
◦commits
◦dev
◦user

•
poi.apache.org lists:
◦commits
◦dev
◦general
◦user

•
portals.apache.org lists:
◦bridges-commits
◦bridges-dev
◦bridges-user
◦commits
◦general
◦jetspeed-dev
◦jetspeed-user
◦pluto-dev
◦pluto-scm
◦pluto-user
◦portalapps-dev
◦portalapps-user
◦wsrp4j-dev
◦wsrp4j-user

•
provisionr.incubator.apache.org lists:
◦commits
◦dev

•
qpid.apache.org lists:
◦commits
◦dev
◦notifications
◦proton
◦users

•
quetz.apache.org lists:
◦mod_python-commits
◦mod_python-dev

•
ranger.incubator.apache.org lists:
◦commits
◦dev
◦user

•
rave.apache.org lists:
◦commits
◦dev
◦users

•
reef.incubator.apache.org lists:
◦commits
◦dev

•
ripple.incubator.apache.org lists:
◦commits
◦dev

•
river.apache.org lists:
◦commits
◦dev
◦user

•
roller.apache.org lists:
◦commits
◦dev
◦user

•
samoa.incubator.apache.org lists:
◦commits
◦dev
◦users

•
samza.apache.org lists:
◦commits
◦dev

•
santuario.apache.org lists:
◦commits
◦dev
◦general

•
sentry.incubator.apache.org lists:
◦commits
◦dev

•
servicemix.apache.org lists:
◦commits
◦dev
◦issues
◦users

•
shale.apache.org lists:
◦commits
◦dev
◦issues
◦notifications
◦user

•
shindig.apache.org lists:
◦commits
◦dev
◦issues
◦users

•
shiro.apache.org lists:
◦commits
◦dev
◦user

•
singa.incubator.apache.org lists:
◦commits
◦dev

•
sirona.incubator.apache.org lists:
◦commits
◦dev
◦user

•
sis.apache.org lists:
◦commits
◦dev
◦user

•
slider.incubator.apache.org lists:
◦commits
◦dev

•
sling.apache.org lists:
◦commits
◦dev
◦users

•
spamassassin.apache.org lists:
◦announce
◦blogspam
◦commits
◦dev
◦dev-br
◦dev-de
◦ruleqa
◦users

•
spark.apache.org lists:
◦commits
◦dev
◦issues
◦reviews
◦user

•
sqoop.apache.org lists:
◦commits
◦dev
◦user

•
stanbol.apache.org lists:
◦commits
◦dev

•
stdcxx.apache.org lists:
◦commits
◦dev
◦issues
◦user

•
steve.apache.org lists:
◦commits
◦dev
◦issues
◦user

•
storm.apache.org lists:
◦commits
◦dev
◦user

•
stratos.apache.org lists:
◦commits
◦dev

•
stratosphere.apache.org lists:
◦dev

•
streams.incubator.apache.org lists:
◦commits
◦dev

•
struts.apache.org lists:
◦announcements
◦commits
◦dev
◦issues
◦user

•
subversion.apache.org lists:
◦announce
◦commits
◦dev
◦notifications
◦users

•
synapse.apache.org lists:
◦commits
◦dev
◦user

•
syncope.apache.org lists:
◦commits
◦dev
◦user

•
tajo.apache.org lists:
◦commits
◦dev
◦issues
◦user

•
tamaya.incubator.apache.org lists:
◦commits
◦dev

 •
tapestry.apache.org lists:
◦commits
◦dev
◦users

•
taverna.incubator.apache.org lists:
◦commits
◦dev
◦users

•
tcl.apache.org lists:
◦general
◦mod_dtcl
◦mod_dtcl-cvs
◦mod_tcl-dev
◦rivet-dev
◦rivet-user
◦site-cvs
◦websh-cvs
◦websh-dev
◦websh-user

•
tez.apache.org lists:
◦commits
◦dev
◦issues
◦user

•
thrift.apache.org lists:
◦commits
◦dev
◦user

•
tika.apache.org lists:
◦commits
◦dev
◦user

•
tiles.apache.org lists:
◦commits
◦dev
◦issues
◦users

•
tinkerpop.incubator.apache.org lists:
◦commits
◦dev

•
tomcat.apache.org lists:
◦announce
◦dev
◦taglibs-user
◦users

•
tomee.apache.org lists:
◦commits
◦dev
◦notifications
◦users

•
trafficserver.apache.org lists:
◦announce
◦commits
◦dev
◦issues
◦users

•
turbine.apache.org lists:
◦commits
◦dev
◦general
◦tdk-dev
◦user

•
tuscany.apache.org lists:
◦commits
◦dev
◦notification
◦user

•
twill.incubator.apache.org lists:
◦commits
◦dev

•
uima.apache.org lists:
◦commits
◦dev
◦user

•
usergrid.incubator.apache.org lists:
◦commits
◦dev
◦user

•
vcl.apache.org lists:
◦commits
◦dev
◦user

•
velocity.apache.org lists:
◦commits
◦dev
◦general
◦user

•
vxquery.apache.org lists:
◦commits
◦dev

•
whirr.apache.org lists:
◦commits
◦dev
◦user

•
wicket.apache.org lists:
◦announce
◦commits
◦dev
◦users

•
wink.apache.org lists:
◦commits
◦dev
◦user

•
wookie.apache.org lists:
◦commits
◦dev
◦user

•
ws.apache.org lists:
◦addressing-dev
◦announce
◦axis-cvs
◦axis-user-ja
◦commits
◦commons-dev
◦dev
◦ews-dev
◦fx-dev
◦fx-user
◦jaxme-dev
◦kandula-dev
◦mirae-dev
◦mirae-user
◦muse-commits
◦muse-dev
◦muse-user
◦pubscribe-commits
◦pubscribe-dev
◦pubscribe-user
◦rampart-c-dev
◦rampart-dev
◦sandesha-dev
◦savan-dev
◦scout-dev
◦soap-dev
◦soap-user
◦tsik-dev
◦users
◦woden-dev
◦wsif-dev
◦wsif-user
◦wsrf-commits
◦wsrf-dev
◦wsrf-user
◦wss4j-dev
◦xmlrpc-auto
◦xmlrpc-dev

•
xalan.apache.org lists:
◦c-users
◦commits
◦dev
◦j-users

•
xerces.apache.org lists:
◦c-dev
◦c-users
◦commits
◦general
◦j-dev
◦j-users
◦p-dev
◦xml-commons-dev

•
xml.apache.org lists:
◦announcements
◦bugs
◦commons-cvs
◦contrib-cvs
◦crimson-cvs
◦general
◦general-cvs
◦juice-dev
◦juice-svn
◦rpc-dev
◦rpc-user
◦security-users
◦soap-dev
◦soap-user
◦xalan-c-users
◦xalan-cvs
◦xalan-dev
◦xalan-j-users
◦xang-cvs
◦xang-dev
◦xindice-dev
◦xindice-users
◦xmlbeans-cvs
◦xmlbeans-dev
◦xmlbeans-user
◦xsp-dev

•
xmlbeans.apache.org lists:
◦commits
◦cxx-dev
◦dev
◦user

•
xmlgraphics.apache.org lists:
◦batik-commits
◦batik-dev
◦batik-users
◦commits
◦fop-commits
◦fop-dev
◦fop-users
◦general.RAGE.'HEZZ_KAMZTERZ_TRECE_LOS_ANGELES
[•]
<<.>>|<leaders.zeppelin.incubator.apache.org=stop_switzerlandTV>|
</B>CALIMICHOACANO.TXT@GMAIL.COM+ADRIAN.OROZCO.JIMENEZ.ACOSTA.GAMEZ.ALLRIGHTSREZERVED.
<COPYRIGHTZ>(C)
lists:
◦commits
◦dev
◦users
|•|
zest.apache.org lists:
◦commits
|_◦dev+|
L•_l
zookeeper.apache.org lists:
◦bookkeeper-dev
◦bookkeeper-user
◦commits
◦dev
{}[◦]user=CALIMICHOACANO_adrianorozcojimenezacostagamez:;{/\}
Your subscribed feeds are not being updated automatically because this setting is turned off.
Turn on automatic feed updates
You've successfully subscribed to this feed!

Updated content can be viewed in Internet Explorer and other programs that use the Common Feed List.

View my feeds

You've successfully subscribed to this feed!

dev@commons.apache.org Archives
You are viewing a feed that contains frequently updated content. When you subscribe to a feed, it is added to the Common Feed List. Updated information from the feed is automatically downloaded to your computer and can be viewed in Internet Explorer and other programs. Learn more about feeds.

Plus ButtonSubscribe to this feed

dev@commons.apache.org Archives
‎Today, ‎May ‎06, ‎2015, ‏‎27 minutes ago

Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎4:56:09 PM | Peter Ansell <ansell.peter@gmail.com>Go to full article
On 6 May 2015 at 01:51, Jörg Schaible <joerg.schaible@swisspost.com> wrote:
> Hi Benedikt,
>
> Benedikt Ritter wrote:
>
>> 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
>>
>>> Hello Jörg,
>>>
>>> 2015-05-05 8:30 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
>>>
>>>> Hi Benedikt,
>>>>
>>>> britter@apache.org wrote:
>>>>
>>>> > Repository: commons-lang
>>>> > Updated Branches:
>>>> >   refs/heads/master 8548b12d8 -> 60b32953a
>>>> >
>>>> >
>>>> > Allocate array of the correct size
>>>> >
>>>> >
>>>> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
>>>> > Commit:
>>>> > http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
>>>> Tree:
>>>> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953
>>>> > Diff:
>>>> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
>>>> >
>>>> > Branch: refs/heads/master
>>>> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
>>>> > Parents: 8548b12
>>>> > Author: Benedikt Ritter <britter@apache.org>
>>>> > Authored: Mon May 4 21:26:07 2015 +0200
>>>> > Committer: Benedikt Ritter
>>>> > <britter@apache.org> Committed: Mon May 4
>>>> > 21:26:07 2015 +0200
>>>> >
>>>> > ----------------------------------------------------------------------
>>>> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java   
|
>>>> >  2
>>>> +-
>>>> >  1 file changed, 1 insertion(+), 1 deletion(-)
>>>> > ----------------------------------------------------------------------
>>>> >
>>>> >
>>>> >
>>>> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>> > ----------------------------------------------------------------------
>>>> > diff --git
>>>> >
>>>>
>>>>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>> >
>>>>
>>>>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>> > index 5904469..7a78170 100644 ---
>>>> >
>>>>
>>>>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>> > +++
>>>> >
>>>>
>>>>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
>>>> > ToStringBuilder {
>>>> >                  list.add(e.toString());
>>>> >              }
>>>> >          }
>>>> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
>>>> > +        return list.toArray(new String[list.size()]);
>>>> >      }
>>>>
>>>> What's the benefit of this? Where's the difference by letting
>>>> List.toArray()
>>>> allocate the appropriate array compared to do it on your own?
>>>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no
>>>> additional allocation.
>>>>
>>>
>>> I changed this because my IDE complained about that line of code:
>>>
>>> "Call to 'toArray' with zero-length array argument
>>> 'ArrayUtils.EMPTY_STRING_ARRAY'
>>>
>>> Reports any call to 'toArray' on an object or type or subtype of
>>> java.util.Collection with a zero-length argument. When passing an array
>>> of too small size, the toArray() method has to construct a new array of
>>> the correct size using reflection. This has significantly worse
>>> performance than passing in an array of at least the size of the
>>> collection itself."
>>>
>>> To be honest, I did not do any performance benchmarks to make sure this
>>> is really true.
>>>
>>
>> In any case, the commit message should have been more explanatory. Sorry
>> about that.
>
> Well, that warning is somewhat stupid, if you're using a constant for the
> zero length array. The "worse performance" only occurs if you provide a new
> array instance that is too small.

The worse performance would be in reflection overhead as reflection
may always be used to derive the class for a new array if you are
passing in an empty array. There is no need for any microbenchmarks on
different JVMs if reflection is used at all in the zero length array
method on any JVM. The reflection method will necessarily have more
CPU instructions than a native array allocation of the correct size
which is done in compiled code and JIT'ed without any reflection
calls.

Cheers,

Peter

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎4:09:56 PM | Jörg Schaible <joerg.schaible@gmx.de>Go to full article
Benedikt Ritter wrote:

> 2015-05-05 19:13 GMT+02:00 Jörg Schaible <joerg.schaible@gmx.de>:
> 
>> Benedikt Ritter wrote:
>>
>> > 2015-05-05 17:51 GMT+02:00 Jörg Schaible
>> > <joerg.schaible@swisspost.com>:
>> >
>> >> Hi Benedikt,
>> >>
>> >> Benedikt Ritter wrote:
>> >>
>> >> > 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
>> >> >
>> >> >> Hello Jörg,
>> >> >>
>> >> >> 2015-05-05 8:30 GMT+02:00 Jörg Schaible
>> >> >> <joerg.schaible@swisspost.com>:
>> >> >>
>> >> >>> Hi Benedikt,
>> >> >>>

[snip]

>> >> >>> What's the benefit of this? Where's the difference by letting
>> >> >>> List.toArray()
>> >> >>> allocate the appropriate array compared to do it on your own?
>> >> >>> ArrayUtils.EMPTY_STRING is a constant after all, so there's
no
>> >> >>> additional allocation.
>> >> >>>
>> >> >>
>> >> >> I changed this because my IDE complained about that line of code:
>> >> >>
>> >> >> "Call to 'toArray' with zero-length array argument
>> >> >> 'ArrayUtils.EMPTY_STRING_ARRAY'
>> >> >>
>> >> >> Reports any call to 'toArray' on an object or type or subtype of
>> >> >> java.util.Collection with a zero-length argument. When passing
an
>> >> >> array of too small size, the toArray() method has to construct
a
>> >> >> new array of the correct size using reflection. This has
>> >> >> significantly worse performance than passing in an array of at
>> >> >> least the size of
>> the
>> >> >> collection itself."
>> >> >>
>> >> >> To be honest, I did not do any performance benchmarks to make sure
>> >> >> this is really true.
>> >> >>
>> >> >
>> >> > In any case, the commit message should have been more explanatory.
>> >> > Sorry about that.
>> >>
>> >> Well, that warning is somewhat stupid, if you're using a constant for
>> the
>> >> zero length array. The "worse performance" only occurs if you provide
>> >> a new array instance that is too small.
>> >>
>> >
>> > ... which will always be the case unless the list is empty, or am I
>> > missing something here?
>>
>> Where's the difference in creating a new array of proper size yourself or
>> let the method do it? It's even worse now, because now you create a new
>> instance *even* if the list is empty.
>>
> 
> The difference is, that toArray(T[]) will have to create a new instance
> using reflection every time the
> ReflectionToStringBuilder.toNoNullStringArray(Object[]) method is invoked
> with an non empty array (see ArrayList.toArray(T[]), line 389). The IDE
> report complains that this will be significantly slower then creating a
> new array of the correct type and size using an array constructor. As I
> said, I haven't done any benchmarks. But it seemed logical to me.

OK, agreed. Only a micro benchmark on the different Java runtimes will tell. 
And it might be different for Collection implementations than ArrayList.
Nevertheless, I was just curious about the reasoning.

Cheers,
Jörg


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎12:32:02 PM | Oliver Heger <oliver.heger@oliver-heger.de>Go to full article


Am 05.05.2015 um 19:44 schrieb Benedikt Ritter:
> 2015-05-05 19:13 GMT+02:00 Jörg Schaible <joerg.schaible@gmx.de>:
> 
>> Benedikt Ritter wrote:
>>
>>> 2015-05-05 17:51 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
>>>
>>>> Hi Benedikt,
>>>>
>>>> Benedikt Ritter wrote:
>>>>
>>>>> 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
>>>>>
>>>>>> Hello Jörg,
>>>>>>
>>>>>> 2015-05-05 8:30 GMT+02:00 Jörg Schaible
>>>>>> <joerg.schaible@swisspost.com>:
>>>>>>
>>>>>>> Hi Benedikt,
>>>>>>>
>>>>>>> britter@apache.org wrote:
>>>>>>>
>>>>>>>> Repository: commons-lang
>>>>>>>> Updated Branches:
>>>>>>>>   refs/heads/master 8548b12d8 -> 60b32953a
>>>>>>>>
>>>>>>>>
>>>>>>>> Allocate array of the correct size
>>>>>>>>
>>>>>>>>
>>>>>>>> Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
>>>>>>>> Commit:
>>>>>>>>
>> http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
>>>>>>> Tree:
>>>>>>>> http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953
>>>>>>>> Diff:
>>>>>>>> http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
>>>>>>>>
>>>>>>>> Branch: refs/heads/master
>>>>>>>> Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
>>>>>>>> Parents: 8548b12
>>>>>>>> Author: Benedikt Ritter <britter@apache.org>
>>>>>>>> Authored: Mon May 4 21:26:07 2015 +0200
>>>>>>>> Committer: Benedikt Ritter
>>>>>>>> <britter@apache.org> Committed: Mon May 4
>>>>>>>> 21:26:07 2015 +0200
>>>>>>>>
>>>>>>>>
>>>> ----------------------------------------------------------------------
>>>>>>>>  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>>>>>>  | 2
>>>>>>> +-
>>>>>>>>  1 file changed, 1 insertion(+), 1 deletion(-)
>>>>>>>>
>>>> ----------------------------------------------------------------------
>>>>>>>>
>>>>>>>>
>>>>>>>>
>>>>>>>
>>>>
>> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>>>>>>
>>>> ----------------------------------------------------------------------
>>>>>>>> diff --git
>>>>>>>>
>>>>>>>
>>>>>>>
>>>>
>>>>
>>
>> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>>>>>>
>>>>>>>
>>>>>>>
>>>>
>>>>
>>
>> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>>>>>> index 5904469..7a78170 100644 ---
>>>>>>>>
>>>>>>>
>>>>>>>
>>>>
>>>>
>>
>> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>>>>>> +++
>>>>>>>>
>>>>>>>
>>>>>>>
>>>>
>>>>
>>
>> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>>>>>> @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder
extends
>>>>>>>> ToStringBuilder {
>>>>>>>>                  list.add(e.toString());
>>>>>>>>              }
>>>>>>>>          }
>>>>>>>> -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
>>>>>>>> +        return list.toArray(new String[list.size()]);
>>>>>>>>      }
>>>>>>>
>>>>>>> What's the benefit of this? Where's the difference by letting
>>>>>>> List.toArray()
>>>>>>> allocate the appropriate array compared to do it on your own?
>>>>>>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no
>>>>>>> additional allocation.
>>>>>>>
>>>>>>
>>>>>> I changed this because my IDE complained about that line of code:
>>>>>>
>>>>>> "Call to 'toArray' with zero-length array argument
>>>>>> 'ArrayUtils.EMPTY_STRING_ARRAY'
>>>>>>
>>>>>> Reports any call to 'toArray' on an object or type or subtype of
>>>>>> java.util.Collection with a zero-length argument. When passing an
>>>>>> array of too small size, the toArray() method has to construct a
new
>>>>>> array of the correct size using reflection. This has significantly
>>>>>> worse performance than passing in an array of at least the size of
>> the
>>>>>> collection itself."
>>>>>>
>>>>>> To be honest, I did not do any performance benchmarks to make sure
>>>>>> this is really true.
>>>>>>
>>>>>
>>>>> In any case, the commit message should have been more explanatory.
>>>>> Sorry about that.
>>>>
>>>> Well, that warning is somewhat stupid, if you're using a constant for
>> the
>>>> zero length array. The "worse performance" only occurs if you provide a
>>>> new array instance that is too small.
>>>>
>>>
>>> ... which will always be the case unless the list is empty, or am I
>>> missing something here?
>>
>> Where's the difference in creating a new array of proper size yourself or
>> let the method do it? It's even worse now, because now you create a new
>> instance *even* if the list is empty.
>>
> 
> The difference is, that toArray(T[]) will have to create a new instance
> using reflection every time the
> ReflectionToStringBuilder.toNoNullStringArray(Object[]) method is invoked
> with an non empty array (see ArrayList.toArray(T[]), line 389). The IDE
> report complains that this will be significantly slower then creating a new
> array of the correct type and size using an array constructor. As I said, I
> haven't done any benchmarks. But it seemed logical to me.
> 
> br,
> Benedikt
> 

ISTR that also Bloch in "Effective Java" recommended the approach of
passing in a zero-length array (which can be a constant as it is
immutable) and let the method create a properly sized array itself.

Oliver

> 
>>
>> Cheers,
>> Jörg
>>
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
>>
> 
> 

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





[SCXML] Mirror or move to git?
‎Yesterday, ‎May ‎05, ‎2015, ‏‎12:27:51 PM | Benedikt Ritter <britter@apache.org>Go to full article
Hello,

there is a request to mirror SCXML to github [1]. Now I'm wondering whether
the majority of the SCXML developers would rather like to the a SVN -> git
migration then just a mirroring.

br,
Benedikt

[1] https://issues.apache.org/jira/browse/SCXML-231

-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎10:44:29 AM | Benedikt Ritter <britter@apache.org>Go to full article
2015-05-05 19:13 GMT+02:00 Jörg Schaible <joerg.schaible@gmx.de>:

> Benedikt Ritter wrote:
>
> > 2015-05-05 17:51 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
> >
> >> Hi Benedikt,
> >>
> >> Benedikt Ritter wrote:
> >>
> >> > 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
> >> >
> >> >> Hello Jörg,
> >> >>
> >> >> 2015-05-05 8:30 GMT+02:00 Jörg Schaible
> >> >> <joerg.schaible@swisspost.com>:
> >> >>
> >> >>> Hi Benedikt,
> >> >>>
> >> >>> britter@apache.org wrote:
> >> >>>
> >> >>> > Repository: commons-lang
> >> >>> > Updated Branches:
> >> >>> >   refs/heads/master 8548b12d8 -> 60b32953a
> >> >>> >
> >> >>> >
> >> >>> > Allocate array of the correct size
> >> >>> >
> >> >>> >
> >> >>> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
> >> >>> > Commit:
> >> >>> >
> http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
> >> >>> Tree:
> >> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953
> >> >>> > Diff:
> >> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
> >> >>> >
> >> >>> > Branch: refs/heads/master
> >> >>> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
> >> >>> > Parents: 8548b12
> >> >>> > Author: Benedikt Ritter <britter@apache.org>
> >> >>> > Authored: Mon May 4 21:26:07 2015 +0200
> >> >>> > Committer: Benedikt Ritter
> >> >>> > <britter@apache.org> Committed: Mon May 4
> >> >>> > 21:26:07 2015 +0200
> >> >>> >
> >> >>> >
> >> ----------------------------------------------------------------------
> >> >>> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >> >>> >  | 2
> >> >>> +-
> >> >>> >  1 file changed, 1 insertion(+), 1 deletion(-)
> >> >>> >
> >> ----------------------------------------------------------------------
> >> >>> >
> >> >>> >
> >> >>> >
> >> >>>
> >>
> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >> >>> >
> >> ----------------------------------------------------------------------
> >> >>> > diff --git
> >> >>> >
> >> >>>
> >> >>>
> >>
> >>
>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >> >>> >
> >> >>>
> >> >>>
> >>
> >>
>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >> >>> > index 5904469..7a78170 100644 ---
> >> >>> >
> >> >>>
> >> >>>
> >>
> >>
>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >> >>> > +++
> >> >>> >
> >> >>>
> >> >>>
> >>
> >>
>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >> >>> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder
extends
> >> >>> > ToStringBuilder {
> >> >>> >                  list.add(e.toString());
> >> >>> >              }
> >> >>> >          }
> >> >>> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
> >> >>> > +        return list.toArray(new String[list.size()]);
> >> >>> >      }
> >> >>>
> >> >>> What's the benefit of this? Where's the difference by letting
> >> >>> List.toArray()
> >> >>> allocate the appropriate array compared to do it on your own?
> >> >>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no
> >> >>> additional allocation.
> >> >>>
> >> >>
> >> >> I changed this because my IDE complained about that line of code:
> >> >>
> >> >> "Call to 'toArray' with zero-length array argument
> >> >> 'ArrayUtils.EMPTY_STRING_ARRAY'
> >> >>
> >> >> Reports any call to 'toArray' on an object or type or subtype of
> >> >> java.util.Collection with a zero-length argument. When passing an
> >> >> array of too small size, the toArray() method has to construct a new
> >> >> array of the correct size using reflection. This has significantly
> >> >> worse performance than passing in an array of at least the size of
> the
> >> >> collection itself."
> >> >>
> >> >> To be honest, I did not do any performance benchmarks to make sure
> >> >> this is really true.
> >> >>
> >> >
> >> > In any case, the commit message should have been more explanatory.
> >> > Sorry about that.
> >>
> >> Well, that warning is somewhat stupid, if you're using a constant for
> the
> >> zero length array. The "worse performance" only occurs if you provide a
> >> new array instance that is too small.
> >>
> >
> > ... which will always be the case unless the list is empty, or am I
> > missing something here?
>
> Where's the difference in creating a new array of proper size yourself or
> let the method do it? It's even worse now, because now you create a new
> instance *even* if the list is empty.
>

The difference is, that toArray(T[]) will have to create a new instance
using reflection every time the
ReflectionToStringBuilder.toNoNullStringArray(Object[]) method is invoked
with an non empty array (see ArrayList.toArray(T[]), line 389). The IDE
report complains that this will be significantly slower then creating a new
array of the correct type and size using an array constructor. As I said, I
haven't done any benchmarks. But it seemed logical to me.

br,
Benedikt


>
> Cheers,
> Jörg
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎10:13:37 AM | Jörg Schaible <joerg.schaible@gmx.de>Go to full article
Benedikt Ritter wrote:

> 2015-05-05 17:51 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
> 
>> Hi Benedikt,
>>
>> Benedikt Ritter wrote:
>>
>> > 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
>> >
>> >> Hello Jörg,
>> >>
>> >> 2015-05-05 8:30 GMT+02:00 Jörg Schaible
>> >> <joerg.schaible@swisspost.com>:
>> >>
>> >>> Hi Benedikt,
>> >>>
>> >>> britter@apache.org wrote:
>> >>>
>> >>> > Repository: commons-lang
>> >>> > Updated Branches:
>> >>> >   refs/heads/master 8548b12d8 -> 60b32953a
>> >>> >
>> >>> >
>> >>> > Allocate array of the correct size
>> >>> >
>> >>> >
>> >>> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
>> >>> > Commit:
>> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
>> >>> Tree:
>> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953
>> >>> > Diff:
>> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
>> >>> >
>> >>> > Branch: refs/heads/master
>> >>> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
>> >>> > Parents: 8548b12
>> >>> > Author: Benedikt Ritter <britter@apache.org>
>> >>> > Authored: Mon May 4 21:26:07 2015 +0200
>> >>> > Committer: Benedikt Ritter
>> >>> > <britter@apache.org> Committed: Mon May 4
>> >>> > 21:26:07 2015 +0200
>> >>> >
>> >>> >
>> ----------------------------------------------------------------------
>> >>> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java
  
>> >>> >  | 2
>> >>> +-
>> >>> >  1 file changed, 1 insertion(+), 1 deletion(-)
>> >>> >
>> ----------------------------------------------------------------------
>> >>> >
>> >>> >
>> >>> >
>> >>>
>> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> >>> >
>> ----------------------------------------------------------------------
>> >>> > diff --git
>> >>> >
>> >>>
>> >>>
>>
>> 
a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> >>> >
>> >>>
>> >>>
>>
>> 
b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> >>> > index 5904469..7a78170 100644 ---
>> >>> >
>> >>>
>> >>>
>>
>> 
a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> >>> > +++
>> >>> >
>> >>>
>> >>>
>>
>> 
b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> >>> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
>> >>> > ToStringBuilder {
>> >>> >                  list.add(e.toString());
>> >>> >              }
>> >>> >          }
>> >>> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
>> >>> > +        return list.toArray(new String[list.size()]);
>> >>> >      }
>> >>>
>> >>> What's the benefit of this? Where's the difference by letting
>> >>> List.toArray()
>> >>> allocate the appropriate array compared to do it on your own?
>> >>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no
>> >>> additional allocation.
>> >>>
>> >>
>> >> I changed this because my IDE complained about that line of code:
>> >>
>> >> "Call to 'toArray' with zero-length array argument
>> >> 'ArrayUtils.EMPTY_STRING_ARRAY'
>> >>
>> >> Reports any call to 'toArray' on an object or type or subtype of
>> >> java.util.Collection with a zero-length argument. When passing an
>> >> array of too small size, the toArray() method has to construct a new
>> >> array of the correct size using reflection. This has significantly
>> >> worse performance than passing in an array of at least the size of the
>> >> collection itself."
>> >>
>> >> To be honest, I did not do any performance benchmarks to make sure
>> >> this is really true.
>> >>
>> >
>> > In any case, the commit message should have been more explanatory.
>> > Sorry about that.
>>
>> Well, that warning is somewhat stupid, if you're using a constant for the
>> zero length array. The "worse performance" only occurs if you provide a
>> new array instance that is too small.
>>
> 
> ... which will always be the case unless the list is empty, or am I
> missing something here?

Where's the difference in creating a new array of proper size yourself or 
let the method do it? It's even worse now, because now you create a new 
instance *even* if the list is empty.

Cheers,
Jörg


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎10:07:20 AM | Benedikt Ritter <britter@apache.org>Go to full article
2015-05-05 17:51 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:

> Hi Benedikt,
>
> Benedikt Ritter wrote:
>
> > 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
> >
> >> Hello Jörg,
> >>
> >> 2015-05-05 8:30 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
> >>
> >>> Hi Benedikt,
> >>>
> >>> britter@apache.org wrote:
> >>>
> >>> > Repository: commons-lang
> >>> > Updated Branches:
> >>> >   refs/heads/master 8548b12d8 -> 60b32953a
> >>> >
> >>> >
> >>> > Allocate array of the correct size
> >>> >
> >>> >
> >>> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
> >>> > Commit:
> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
> >>> Tree:
> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953
> >>> > Diff:
> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
> >>> >
> >>> > Branch: refs/heads/master
> >>> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
> >>> > Parents: 8548b12
> >>> > Author: Benedikt Ritter <britter@apache.org>
> >>> > Authored: Mon May 4 21:26:07 2015 +0200
> >>> > Committer: Benedikt Ritter
> >>> > <britter@apache.org> Committed: Mon May 4
> >>> > 21:26:07 2015 +0200
> >>> >
> >>> >
> ----------------------------------------------------------------------
> >>> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java  
 |
> >>> >  2
> >>> +-
> >>> >  1 file changed, 1 insertion(+), 1 deletion(-)
> >>> >
> ----------------------------------------------------------------------
> >>> >
> >>> >
> >>> >
> >>>
> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >>> >
> ----------------------------------------------------------------------
> >>> > diff --git
> >>> >
> >>>
> >>>
>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >>> >
> >>>
> >>>
>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >>> > index 5904469..7a78170 100644 ---
> >>> >
> >>>
> >>>
>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >>> > +++
> >>> >
> >>>
> >>>
>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >>> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
> >>> > ToStringBuilder {
> >>> >                  list.add(e.toString());
> >>> >              }
> >>> >          }
> >>> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
> >>> > +        return list.toArray(new String[list.size()]);
> >>> >      }
> >>>
> >>> What's the benefit of this? Where's the difference by letting
> >>> List.toArray()
> >>> allocate the appropriate array compared to do it on your own?
> >>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no
> >>> additional allocation.
> >>>
> >>
> >> I changed this because my IDE complained about that line of code:
> >>
> >> "Call to 'toArray' with zero-length array argument
> >> 'ArrayUtils.EMPTY_STRING_ARRAY'
> >>
> >> Reports any call to 'toArray' on an object or type or subtype of
> >> java.util.Collection with a zero-length argument. When passing an array
> >> of too small size, the toArray() method has to construct a new array of
> >> the correct size using reflection. This has significantly worse
> >> performance than passing in an array of at least the size of the
> >> collection itself."
> >>
> >> To be honest, I did not do any performance benchmarks to make sure this
> >> is really true.
> >>
> >
> > In any case, the commit message should have been more explanatory. Sorry
> > about that.
>
> Well, that warning is somewhat stupid, if you're using a constant for the
> zero length array. The "worse performance" only occurs if you provide a new
> array instance that is too small.
>

... which will always be the case unless the list is empty, or am I missing
something here?

Benedikt


>
> Cheers,
> Jörg
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎8:51:56 AM | Jörg Schaible <joerg.schaible@swisspost.com>Go to full article
Hi Benedikt,

Benedikt Ritter wrote:

> 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
> 
>> Hello Jörg,
>>
>> 2015-05-05 8:30 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
>>
>>> Hi Benedikt,
>>>
>>> britter@apache.org wrote:
>>>
>>> > Repository: commons-lang
>>> > Updated Branches:
>>> >   refs/heads/master 8548b12d8 -> 60b32953a
>>> >
>>> >
>>> > Allocate array of the correct size
>>> >
>>> >
>>> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
>>> > Commit:
>>> > http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
>>> Tree:
>>> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953
>>> > Diff:
>>> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
>>> >
>>> > Branch: refs/heads/master
>>> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
>>> > Parents: 8548b12
>>> > Author: Benedikt Ritter <britter@apache.org>
>>> > Authored: Mon May 4 21:26:07 2015 +0200
>>> > Committer: Benedikt Ritter
>>> > <britter@apache.org> Committed: Mon May 4
>>> > 21:26:07 2015 +0200
>>> >
>>> > ----------------------------------------------------------------------
>>> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java    |
>>> >  2
>>> +-
>>> >  1 file changed, 1 insertion(+), 1 deletion(-)
>>> > ----------------------------------------------------------------------
>>> >
>>> >
>>> >
>>> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>> > ----------------------------------------------------------------------
>>> > diff --git
>>> >
>>>
>>> 
a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>> >
>>>
>>> 
b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>> > index 5904469..7a78170 100644 ---
>>> >
>>>
>>> 
a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>> > +++
>>> >
>>>
>>> 
b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
>>> > ToStringBuilder {
>>> >                  list.add(e.toString());
>>> >              }
>>> >          }
>>> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
>>> > +        return list.toArray(new String[list.size()]);
>>> >      }
>>>
>>> What's the benefit of this? Where's the difference by letting
>>> List.toArray()
>>> allocate the appropriate array compared to do it on your own?
>>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no
>>> additional allocation.
>>>
>>
>> I changed this because my IDE complained about that line of code:
>>
>> "Call to 'toArray' with zero-length array argument
>> 'ArrayUtils.EMPTY_STRING_ARRAY'
>>
>> Reports any call to 'toArray' on an object or type or subtype of
>> java.util.Collection with a zero-length argument. When passing an array
>> of too small size, the toArray() method has to construct a new array of
>> the correct size using reflection. This has significantly worse
>> performance than passing in an array of at least the size of the
>> collection itself."
>>
>> To be honest, I did not do any performance benchmarks to make sure this
>> is really true.
>>
> 
> In any case, the commit message should have been more explanatory. Sorry
> about that.

Well, that warning is somewhat stupid, if you're using a constant for the 
zero length array. The "worse performance" only occurs if you provide a new 
array instance that is too small.

Cheers,
Jörg


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Yesterday, ‎May ‎05, ‎2015, ‏‎7:39:42 AM | Luc Maisonobe <luc@spaceroots.org>Go to full article
Le 05/05/2015 10:51, Luc Maisonobe a écrit :
> Le 04/05/2015 23:30, Thomas Neidhart a écrit :
>> On 05/04/2015 09:31 PM, Luc Maisonobe wrote:
>>> Le 04/05/2015 19:13, sebb a écrit :
>>>> On 4 May 2015 at 16:43, luc <luc@spaceroots.org> wrote:
>>>>> Le 2015-05-04 14:48, Thomas Neidhart a écrit :
>>>>>>
>>>>>> Problem still remains, see here:
>>>>>> https://builds.apache.org/job/Commons%20Math%20H10/49/console
>>>>>>
>>>>>> The test failures only occur on the following slaves it seems:
>>>>>>
>>>>>>  * H10
>>>>>>  * ubuntu-2
>>>>>
>>>>>
>>>>> This looks like what happened a few months ago then.
>>>>>
>>>>> I will try to look at it. As we are only able to reproduce this on this
>>>>> build system, I guess this implies committing lots of small changes (with
>>>>> System.out.println and the like) and triggering a custom buid from the
>>>>> Jenkins configuration above. I can do that, but wonder if there is another
>>>>> way without committing the tests in the master branch. Can we set up
an
>>>>> h10-builds branch that would be used by the job above and would be ignored
>>>>> by the regular job ?
>>>>
>>>> Yes, just configure the Jenkins job to use the appropriate branch.
>>>> It is currently using
>>>>
>>>> */master
>>>
>>> I explored the project and did not find any way to change the build.
>>> Looking at the REST API explanation page, I found a reference to
>>> JOBNAME/config.xml. However, if I try this URL I get an access denied
>>> failure with message "luc is missing the Job/ExtendedRead permission"
>>> and if I try the createItem URL I get an access denied failure with
>>> message "luc is missing the Job/Create permission".
>>>
>>> Could someone give me karma for changing these elements on the Commons
>>> Math H10 job?
>>
>> I changed the job configuration to use the h10-builds branch and started
>> a new build already.
> 
> OK, thanks.
> It seemed to work up to commit 96903ec I made this morning, but not
> for the two next ones (67da172 and 14f24f2). They were not picked up
> even after wating a long time and so each time I trigger a new build it
> is still done from 96903ec.

I don't know why, but it started working again in the afternoon and I
could do a few tests.
Then it seemded to get stuck on a commit. I tried to force it reload
its work space by cleaning it. I was allowed to do it but now the build
does not work anymore. I probably not only cleaned old stuff but also
completely wiped the directory ... I still cannot change anything else
on the job.

Gary, could you add me to the hudson-jobadmin group (looking at
<http://wiki.apache.org/general/Jenkins> it seems the way to get access).

I am sorry.
Luc

> 
> Luc
> 
>>
>> I am not sure that I have the credentials to give you the permissions.
>>
>> Thomas
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
>>
> 
> 
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
> 
> 
> 


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Yesterday, ‎May ‎05, ‎2015, ‏‎7:22:49 AM | Sergio Fernández <sergio.fernandez@redlink.co>Go to full article
Hi Brian,

On Tue, May 5, 2015 at 3:54 PM, Brian Fox <brianf@sonatype.com> wrote:

> As there is no ldap group for the podling, can you please file an infra
> jira with the user ids to be added?


The missing LDAP group is weird... anyway, all details at jira:
https://issues.apache.org/jira/browse/INFRA-9600
Thanks!





> On Tue, May 5, 2015 at 9:53 AM, Sergio Fernández <wikier@apache.org>
> wrote:
>
> > Hi,
> >
> > the CommonsRDF podling is preparing the fist incubating release, and the
> > PPMC members need to be granted with access to deploy maven artifacts
> > to org.apache.commons groupId in our nexus.
> >
> > The Commons PMC is aware of such request, but if you have any question
> > please feel free to ask.
> >
> > Thanks in advance.
> >
> > Cheers,
> >
> >
> > On Tue, May 5, 2015 at 2:48 AM, Phil Steitz <phil.steitz@gmail.com>
> wrote:
> >
> >> Try mailing repository@
> >>
> >>
> >>
> >> > On May 4, 2015, at 12:32 PM, Benedikt Ritter <britter@apache.org>
> >> wrote:
> >> >
> >> > 2015-05-04 18:46 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:
> >> >
> >> >> On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com>
> >> >> wrote:
> >> >>
> >> >>>> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
> >> >>>> On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <
> wikier@apache.org>
> >> >>> wrote:
> >> >>>>> we're discussing our first incubating release, and we came
to the
> >> >> issue
> >> >>>>> that we are not grant with permissions to deploy maven
artifacts
> to
> >> >> the
> >> >>>>> org.apache.commons groupId [1].
> >> >>>> Why org.apache.commons, and not, say, org.apache.commons.rdf?
The
> >> >>>> former seems overly broad to me.
> >> >>>
> >> >>> Could be we should have gone that way years ago when we moved to
> >> >>> org.apache.commons:commons-foo; but that ship has sailed, so I
think
> >> >>> its best to stay consistent with the rest of the components and
> >> >>> proceed as proposed.
> >> >>
> >> >> Some rambling thoughts (tm):
> >> >>
> >> >> I like to 'fix' things too but I was on the fence about this one
> until
> >> now.
> >> >> Yes, there is a redundancy because the substring 'commons' is in the
> >> >> AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID,
so
> >> of
> >> >> course we have o.a.commons, that's a must. The AID is the component,
> >> which
> >> >> I always call Commons Foo, and sometimes Apache Commons Foo when I
> >> want to
> >> >> make it clear to folks (at work for example) that I am talking about
> >> >> software hosted at Apache. If I were to talk within Apache about Foo,
> >> I bet
> >> >> some folks would not know what Foo is or where it lives. If I say
> >> 'Commons
> >> >> Foo' then it's obvious (I hope). That is how I justify to myself the
> >> >> commons in the AID.
> >> >>
> >> >> FWIW: Over at Log4j, we have "log4j-" as the prefix for all module
> >> names,
> >> >> and no one seems to mind.
> >> >
> >> > I'm all for consistency. VFS does it this way, Weaver does it this
> way,
> >> > Chain does it this way. And GID matching TLP ID makes sense as well.
> >> >
> >> > Who can grant the necessary permissions?
> >> >
> >> >
> >> >>
> >> >> Gary
> >> >>
> >> >>
> >> >>>
> >> >>> Phil
> >> >>>>
> >> >>>> Jochen
> >> >>>>
> >> >>>>
> ---------------------------------------------------------------------
> >> >>>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >> >>>> For additional commands, e-mail: dev-help@commons.apache.org
> >> >>>
> >> >>>
> >> >>>
> ---------------------------------------------------------------------
> >> >>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >> >>> For additional commands, e-mail: dev-help@commons.apache.org
> >> >>
> >> >>
> >> >> --
> >> >> E-Mail: garydgregory@gmail.com | ggregory@apache.org
> >> >> Java Persistence with Hibernate, Second Edition
> >> >> <http://www.manning.com/bauer3/>
> >> >> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> >> >> Spring Batch in Action <http://www.manning.com/templier/>
> >> >> Blog: http://garygregory.wordpress.com
> >> >> Home: http://garygregory.com/
> >> >> Tweet! http://twitter.com/GaryGregory
> >> >
> >> >
> >> >
> >> > --
> >> > http://people.apache.org/~britter/
> >> > http://www.systemoutprintln.de/
> >> > http://twitter.com/BenediktRitter
> >> > http://github.com/britter
> >>
> >> ---------------------------------------------------------------------
> >> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >> For additional commands, e-mail: dev-help@commons.apache.org
> >>
> >>
> >
> >
> > --
> > Sergio Fernández
> > Partner Technology Manager
> > Redlink GmbH
> > m: +43 6602747925
> > e: sergio.fernandez@redlink.co
> > w: http://redlink.co
> >
>



-- 
Sergio Fernández
Partner Technology Manager
Redlink GmbH
m: +43 6602747925
e: sergio.fernandez@redlink.co
w: http://redlink.co




Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Yesterday, ‎May ‎05, ‎2015, ‏‎6:54:26 AM | Brian Fox <brianf@sonatype.com>Go to full article
As there is no ldap group for the podling, can you please file an infra
jira with the user ids to be added?

On Tue, May 5, 2015 at 9:53 AM, Sergio Fernández <wikier@apache.org> wrote:

> Hi,
>
> the CommonsRDF podling is preparing the fist incubating release, and the
> PPMC members need to be granted with access to deploy maven artifacts
> to org.apache.commons groupId in our nexus.
>
> The Commons PMC is aware of such request, but if you have any question
> please feel free to ask.
>
> Thanks in advance.
>
> Cheers,
>
>
> On Tue, May 5, 2015 at 2:48 AM, Phil Steitz <phil.steitz@gmail.com> wrote:
>
>> Try mailing repository@
>>
>>
>>
>> > On May 4, 2015, at 12:32 PM, Benedikt Ritter <britter@apache.org>
>> wrote:
>> >
>> > 2015-05-04 18:46 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:
>> >
>> >> On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com>
>> >> wrote:
>> >>
>> >>>> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
>> >>>> On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
>> >>> wrote:
>> >>>>> we're discussing our first incubating release, and we came to
the
>> >> issue
>> >>>>> that we are not grant with permissions to deploy maven artifacts
to
>> >> the
>> >>>>> org.apache.commons groupId [1].
>> >>>> Why org.apache.commons, and not, say, org.apache.commons.rdf? The
>> >>>> former seems overly broad to me.
>> >>>
>> >>> Could be we should have gone that way years ago when we moved to
>> >>> org.apache.commons:commons-foo; but that ship has sailed, so I think
>> >>> its best to stay consistent with the rest of the components and
>> >>> proceed as proposed.
>> >>
>> >> Some rambling thoughts (tm):
>> >>
>> >> I like to 'fix' things too but I was on the fence about this one until
>> now.
>> >> Yes, there is a redundancy because the substring 'commons' is in the
>> >> AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID, so
>> of
>> >> course we have o.a.commons, that's a must. The AID is the component,
>> which
>> >> I always call Commons Foo, and sometimes Apache Commons Foo when I
>> want to
>> >> make it clear to folks (at work for example) that I am talking about
>> >> software hosted at Apache. If I were to talk within Apache about Foo,
>> I bet
>> >> some folks would not know what Foo is or where it lives. If I say
>> 'Commons
>> >> Foo' then it's obvious (I hope). That is how I justify to myself the
>> >> commons in the AID.
>> >>
>> >> FWIW: Over at Log4j, we have "log4j-" as the prefix for all module
>> names,
>> >> and no one seems to mind.
>> >
>> > I'm all for consistency. VFS does it this way, Weaver does it this way,
>> > Chain does it this way. And GID matching TLP ID makes sense as well.
>> >
>> > Who can grant the necessary permissions?
>> >
>> >
>> >>
>> >> Gary
>> >>
>> >>
>> >>>
>> >>> Phil
>> >>>>
>> >>>> Jochen
>> >>>>
>> >>>> ---------------------------------------------------------------------
>> >>>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> >>>> For additional commands, e-mail: dev-help@commons.apache.org
>> >>>
>> >>>
>> >>> ---------------------------------------------------------------------
>> >>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> >>> For additional commands, e-mail: dev-help@commons.apache.org
>> >>
>> >>
>> >> --
>> >> E-Mail: garydgregory@gmail.com | ggregory@apache.org
>> >> Java Persistence with Hibernate, Second Edition
>> >> <http://www.manning.com/bauer3/>
>> >> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
>> >> Spring Batch in Action <http://www.manning.com/templier/>
>> >> Blog: http://garygregory.wordpress.com
>> >> Home: http://garygregory.com/
>> >> Tweet! http://twitter.com/GaryGregory
>> >
>> >
>> >
>> > --
>> > http://people.apache.org/~britter/
>> > http://www.systemoutprintln.de/
>> > http://twitter.com/BenediktRitter
>> > http://github.com/britter
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
>>
>
>
> --
> Sergio Fernández
> Partner Technology Manager
> Redlink GmbH
> m: +43 6602747925
> e: sergio.fernandez@redlink.co
> w: http://redlink.co
>




Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Yesterday, ‎May ‎05, ‎2015, ‏‎6:53:01 AM | Sergio Fernández <wikier@apache.org>Go to full article
Hi,

the CommonsRDF podling is preparing the fist incubating release, and the
PPMC members need to be granted with access to deploy maven artifacts
to org.apache.commons groupId in our nexus.

The Commons PMC is aware of such request, but if you have any question
please feel free to ask.

Thanks in advance.

Cheers,


On Tue, May 5, 2015 at 2:48 AM, Phil Steitz <phil.steitz@gmail.com> wrote:

> Try mailing repository@
>
>
>
> > On May 4, 2015, at 12:32 PM, Benedikt Ritter <britter@apache.org> wrote:
> >
> > 2015-05-04 18:46 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:
> >
> >> On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com>
> >> wrote:
> >>
> >>>> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
> >>>> On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
> >>> wrote:
> >>>>> we're discussing our first incubating release, and we came to the
> >> issue
> >>>>> that we are not grant with permissions to deploy maven artifacts
to
> >> the
> >>>>> org.apache.commons groupId [1].
> >>>> Why org.apache.commons, and not, say, org.apache.commons.rdf? The
> >>>> former seems overly broad to me.
> >>>
> >>> Could be we should have gone that way years ago when we moved to
> >>> org.apache.commons:commons-foo; but that ship has sailed, so I think
> >>> its best to stay consistent with the rest of the components and
> >>> proceed as proposed.
> >>
> >> Some rambling thoughts (tm):
> >>
> >> I like to 'fix' things too but I was on the fence about this one until
> now.
> >> Yes, there is a redundancy because the substring 'commons' is in the
> >> AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID, so of
> >> course we have o.a.commons, that's a must. The AID is the component,
> which
> >> I always call Commons Foo, and sometimes Apache Commons Foo when I want
> to
> >> make it clear to folks (at work for example) that I am talking about
> >> software hosted at Apache. If I were to talk within Apache about Foo, I
> bet
> >> some folks would not know what Foo is or where it lives. If I say
> 'Commons
> >> Foo' then it's obvious (I hope). That is how I justify to myself the
> >> commons in the AID.
> >>
> >> FWIW: Over at Log4j, we have "log4j-" as the prefix for all module
> names,
> >> and no one seems to mind.
> >
> > I'm all for consistency. VFS does it this way, Weaver does it this way,
> > Chain does it this way. And GID matching TLP ID makes sense as well.
> >
> > Who can grant the necessary permissions?
> >
> >
> >>
> >> Gary
> >>
> >>
> >>>
> >>> Phil
> >>>>
> >>>> Jochen
> >>>>
> >>>> ---------------------------------------------------------------------
> >>>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >>>> For additional commands, e-mail: dev-help@commons.apache.org
> >>>
> >>>
> >>> ---------------------------------------------------------------------
> >>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >>> For additional commands, e-mail: dev-help@commons.apache.org
> >>
> >>
> >> --
> >> E-Mail: garydgregory@gmail.com | ggregory@apache.org
> >> Java Persistence with Hibernate, Second Edition
> >> <http://www.manning.com/bauer3/>
> >> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> >> Spring Batch in Action <http://www.manning.com/templier/>
> >> Blog: http://garygregory.wordpress.com
> >> Home: http://garygregory.com/
> >> Tweet! http://twitter.com/GaryGregory
> >
> >
> >
> > --
> > http://people.apache.org/~britter/
> > http://www.systemoutprintln.de/
> > http://twitter.com/BenediktRitter
> > http://github.com/britter
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
Sergio Fernández
Partner Technology Manager
Redlink GmbH
m: +43 6602747925
e: sergio.fernandez@redlink.co
w: http://redlink.co




Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎5:54:23 AM | Benedikt Ritter <britter@apache.org>Go to full article
2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:

> Hello Jörg,
>
> 2015-05-05 8:30 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
>
>> Hi Benedikt,
>>
>> britter@apache.org wrote:
>>
>> > Repository: commons-lang
>> > Updated Branches:
>> >   refs/heads/master 8548b12d8 -> 60b32953a
>> >
>> >
>> > Allocate array of the correct size
>> >
>> >
>> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
>> > Commit:
>> > http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
>> Tree:
>> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953 Diff:
>> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
>> >
>> > Branch: refs/heads/master
>> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
>> > Parents: 8548b12
>> > Author: Benedikt Ritter <britter@apache.org>
>> > Authored: Mon May 4 21:26:07 2015 +0200
>> > Committer: Benedikt Ritter
>> > <britter@apache.org> Committed: Mon May 4
>> > 21:26:07 2015 +0200
>> >
>> > ----------------------------------------------------------------------
>> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java    | 2
>> +-
>> >  1 file changed, 1 insertion(+), 1 deletion(-)
>> > ----------------------------------------------------------------------
>> >
>> >
>> >
>> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> > ----------------------------------------------------------------------
>> > diff --git
>> >
>>
>> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> >
>>
>> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> > index 5904469..7a78170 100644 ---
>> >
>>
>> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> > +++
>> >
>>
>> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
>> > ToStringBuilder {
>> >                  list.add(e.toString());
>> >              }
>> >          }
>> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
>> > +        return list.toArray(new String[list.size()]);
>> >      }
>>
>> What's the benefit of this? Where's the difference by letting
>> List.toArray()
>> allocate the appropriate array compared to do it on your own?
>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no additional
>> allocation.
>>
>
> I changed this because my IDE complained about that line of code:
>
> "Call to 'toArray' with zero-length array argument
> 'ArrayUtils.EMPTY_STRING_ARRAY'
>
> Reports any call to 'toArray' on an object or type or subtype of
> java.util.Collection with a zero-length argument. When passing an array of
> too small size, the toArray() method has to construct a new array of the
> correct size using reflection. This has significantly worse performance
> than passing in an array of at least the size of the collection itself."
>
> To be honest, I did not do any performance benchmarks to make sure this is
> really true.
>

In any case, the commit message should have been more explanatory. Sorry
about that.


>
> Benedikt
>
>
>>
>> - Jörg
>>
>>
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
>>
>
>
> --
> http://people.apache.org/~britter/
> http://www.systemoutprintln.de/
> http://twitter.com/BenediktRitter
> http://github.com/britter
>



-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎5:52:49 AM | Benedikt Ritter <britter@apache.org>Go to full article
Hello Jörg,

2015-05-05 8:30 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:

> Hi Benedikt,
>
> britter@apache.org wrote:
>
> > Repository: commons-lang
> > Updated Branches:
> >   refs/heads/master 8548b12d8 -> 60b32953a
> >
> >
> > Allocate array of the correct size
> >
> >
> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
> > Commit:
> > http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
> Tree:
> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953 Diff:
> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
> >
> > Branch: refs/heads/master
> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
> > Parents: 8548b12
> > Author: Benedikt Ritter <britter@apache.org>
> > Authored: Mon May 4 21:26:07 2015 +0200
> > Committer: Benedikt Ritter
> > <britter@apache.org> Committed: Mon May 4
> > 21:26:07 2015 +0200
> >
> > ----------------------------------------------------------------------
> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java    | 2
> +-
> >  1 file changed, 1 insertion(+), 1 deletion(-)
> > ----------------------------------------------------------------------
> >
> >
> >
> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> > ----------------------------------------------------------------------
> > diff --git
> >
>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >
>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> > index 5904469..7a78170 100644 ---
> >
>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> > +++
> >
>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
> > ToStringBuilder {
> >                  list.add(e.toString());
> >              }
> >          }
> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
> > +        return list.toArray(new String[list.size()]);
> >      }
>
> What's the benefit of this? Where's the difference by letting
> List.toArray()
> allocate the appropriate array compared to do it on your own?
> ArrayUtils.EMPTY_STRING is a constant after all, so there's no additional
> allocation.
>

I changed this because my IDE complained about that line of code:

"Call to 'toArray' with zero-length array argument
'ArrayUtils.EMPTY_STRING_ARRAY'

Reports any call to 'toArray' on an object or type or subtype of
java.util.Collection with a zero-length argument. When passing an array of
too small size, the toArray() method has to construct a new array of the
correct size using reflection. This has significantly worse performance
than passing in an array of at least the size of the collection itself."

To be honest, I did not do any performance benchmarks to make sure this is
really true.

Benedikt


>
> - Jörg
>
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Yesterday, ‎May ‎05, ‎2015, ‏‎1:51:54 AM | Luc Maisonobe <luc@spaceroots.org>Go to full article
Le 04/05/2015 23:30, Thomas Neidhart a écrit :
> On 05/04/2015 09:31 PM, Luc Maisonobe wrote:
>> Le 04/05/2015 19:13, sebb a écrit :
>>> On 4 May 2015 at 16:43, luc <luc@spaceroots.org> wrote:
>>>> Le 2015-05-04 14:48, Thomas Neidhart a écrit :
>>>>>
>>>>> Problem still remains, see here:
>>>>> https://builds.apache.org/job/Commons%20Math%20H10/49/console
>>>>>
>>>>> The test failures only occur on the following slaves it seems:
>>>>>
>>>>>  * H10
>>>>>  * ubuntu-2
>>>>
>>>>
>>>> This looks like what happened a few months ago then.
>>>>
>>>> I will try to look at it. As we are only able to reproduce this on this
>>>> build system, I guess this implies committing lots of small changes (with
>>>> System.out.println and the like) and triggering a custom buid from the
>>>> Jenkins configuration above. I can do that, but wonder if there is another
>>>> way without committing the tests in the master branch. Can we set up an
>>>> h10-builds branch that would be used by the job above and would be ignored
>>>> by the regular job ?
>>>
>>> Yes, just configure the Jenkins job to use the appropriate branch.
>>> It is currently using
>>>
>>> */master
>>
>> I explored the project and did not find any way to change the build.
>> Looking at the REST API explanation page, I found a reference to
>> JOBNAME/config.xml. However, if I try this URL I get an access denied
>> failure with message "luc is missing the Job/ExtendedRead permission"
>> and if I try the createItem URL I get an access denied failure with
>> message "luc is missing the Job/Create permission".
>>
>> Could someone give me karma for changing these elements on the Commons
>> Math H10 job?
> 
> I changed the job configuration to use the h10-builds branch and started
> a new build already.

OK, thanks.
It seemed to work up to commit 96903ec I made this morning, but not
for the two next ones (67da172 and 14f24f2). They were not picked up
even after wating a long time and so each time I trigger a new build it
is still done from 96903ec.

Luc

> 
> I am not sure that I have the credentials to give you the permissions.
> 
> Thomas
> 
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
> 
> 


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Yesterday, ‎May ‎05, ‎2015, ‏‎12:57:01 AM | Thomas Neidhart <thomas.neidhart@gmail.com>Go to full article
In fact we do not need real physical / remote access to the machine. It
would be sufficient if somebody can install the hotspot disassembler plugin
for the Java runtime:

Could not load hsdis-i386.so; library not loadable; PrintAssembly is
disabled

Then the assembly for the method in question will be present in the console
output.

Thomas

On Mon, May 4, 2015 at 10:16 PM, Thomas Neidhart <thomas.neidhart@gmail.com>
wrote:

> On 05/04/2015 05:43 PM, luc wrote:
> > Le 2015-05-04 14:48, Thomas Neidhart a écrit :
> >> Problem still remains, see here:
> >> https://builds.apache.org/job/Commons%20Math%20H10/49/console
> >>
> >> The test failures only occur on the following slaves it seems:
> >>
> >>  * H10
> >>  * ubuntu-2
> >
> > This looks like what happened a few months ago then.
> >
> > I will try to look at it. As we are only able to reproduce this on this
> > build system, I guess this implies committing lots of small changes (with
> > System.out.println and the like) and triggering a custom buid from the
> > Jenkins configuration above. I can do that, but wonder if there is
> another
> > way without committing the tests in the master branch. Can we set up an
> > h10-builds branch that would be used by the job above and would be
> ignored
> > by the regular job ?
> >
> > If I remember well, when the previous problem arose even putting simple
> > print
> > statements in the code made the bug appear and disappear without control.
>
> yes indeed. I tried different ways to figure out what exact statement
> went wrong due to JIT compilation (e.g. with System.out statement), but
> this already alters the compilation itself thus making it
> difficult/impossible to track down the problem like that.
>
> The advantage we had previously was that we had a good idea which
> statement went wrong (it was a cast). This time, I do not yet have an
> idea, so I think the only way to track this down would be to get
> physical access to the machine and analyze the resulting JIT assembly.
>
> You can see in the console output above that I enabled JIT debugging and
> that the method in question was optimized 2 times.
>
> Thomas
>




Re: [lang] Allocate array of the correct size
‎Monday, ‎May ‎04, ‎2015, ‏‎11:30:42 PM | Jörg Schaible <joerg.schaible@swisspost.com>Go to full article
Hi Benedikt,

britter@apache.org wrote:

> Repository: commons-lang
> Updated Branches:
>   refs/heads/master 8548b12d8 -> 60b32953a
> 
> 
> Allocate array of the correct size
> 
> 
> Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
> Commit:
> http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953 Tree:
> http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953 Diff:
> http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
> 
> Branch: refs/heads/master
> Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
> Parents: 8548b12
> Author: Benedikt Ritter <britter@apache.org>
> Authored: Mon May 4 21:26:07 2015 +0200
> Committer: Benedikt Ritter
> <britter@apache.org> Committed: Mon May 4
> 21:26:07 2015 +0200
> 
> ----------------------------------------------------------------------
>  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java    | 2 +-
>  1 file changed, 1 insertion(+), 1 deletion(-)
> ----------------------------------------------------------------------
> 
> 
> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> ----------------------------------------------------------------------
> diff --git
> 
a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> 
b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> index 5904469..7a78170 100644 ---
> 
a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> +++
> 
b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
> ToStringBuilder {
>                  list.add(e.toString());
>              }
>          }
> -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
> +        return list.toArray(new String[list.size()]);
>      }

What's the benefit of this? Where's the difference by letting List.toArray() 
allocate the appropriate array compared to do it on your own? 
ArrayUtils.EMPTY_STRING is a constant after all, so there's no additional 
allocation.

- Jörg



---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Monday, ‎May ‎04, ‎2015, ‏‎6:05:07 PM | James Carman <james@carmanconsulting.com>Go to full article
It is such a common pattern to have the artifactId begin with the last part
of the groupId that the OSGi bundle plugin handles that case out of the box.

Top-posting because I'm on my phone. Sorry.
On Mon, May 4, 2015 at 8:49 PM Phil Steitz <phil.steitz@gmail.com> wrote:

> Try mailing repository@
>
>
>
> > On May 4, 2015, at 12:32 PM, Benedikt Ritter <britter@apache.org> wrote:
> >
> > 2015-05-04 18:46 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:
> >
> >> On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com>
> >> wrote:
> >>
> >>>> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
> >>>> On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
> >>> wrote:
> >>>>> we're discussing our first incubating release, and we came to the
> >> issue
> >>>>> that we are not grant with permissions to deploy maven artifacts
to
> >> the
> >>>>> org.apache.commons groupId [1].
> >>>> Why org.apache.commons, and not, say, org.apache.commons.rdf? The
> >>>> former seems overly broad to me.
> >>>
> >>> Could be we should have gone that way years ago when we moved to
> >>> org.apache.commons:commons-foo; but that ship has sailed, so I think
> >>> its best to stay consistent with the rest of the components and
> >>> proceed as proposed.
> >>
> >> Some rambling thoughts (tm):
> >>
> >> I like to 'fix' things too but I was on the fence about this one until
> now.
> >> Yes, there is a redundancy because the substring 'commons' is in the
> >> AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID, so of
> >> course we have o.a.commons, that's a must. The AID is the component,
> which
> >> I always call Commons Foo, and sometimes Apache Commons Foo when I want
> to
> >> make it clear to folks (at work for example) that I am talking about
> >> software hosted at Apache. If I were to talk within Apache about Foo, I
> bet
> >> some folks would not know what Foo is or where it lives. If I say
> 'Commons
> >> Foo' then it's obvious (I hope). That is how I justify to myself the
> >> commons in the AID.
> >>
> >> FWIW: Over at Log4j, we have "log4j-" as the prefix for all module
> names,
> >> and no one seems to mind.
> >
> > I'm all for consistency. VFS does it this way, Weaver does it this way,
> > Chain does it this way. And GID matching TLP ID makes sense as well.
> >
> > Who can grant the necessary permissions?
> >
> >
> >>
> >> Gary
> >>
> >>
> >>>
> >>> Phil
> >>>>
> >>>> Jochen
> >>>>
> >>>> ---------------------------------------------------------------------
> >>>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >>>> For additional commands, e-mail: dev-help@commons.apache.org
> >>>
> >>>
> >>> ---------------------------------------------------------------------
> >>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >>> For additional commands, e-mail: dev-help@commons.apache.org
> >>
> >>
> >> --
> >> E-Mail: garydgregory@gmail.com | ggregory@apache.org
> >> Java Persistence with Hibernate, Second Edition
> >> <http://www.manning.com/bauer3/>
> >> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> >> Spring Batch in Action <http://www.manning.com/templier/>
> >> Blog: http://garygregory.wordpress.com
> >> Home: http://garygregory.com/
> >> Tweet! http://twitter.com/GaryGregory
> >
> >
> >
> > --
> > http://people.apache.org/~britter/
> > http://www.systemoutprintln.de/
> > http://twitter.com/BenediktRitter
> > http://github.com/britter
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>




Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Monday, ‎May ‎04, ‎2015, ‏‎5:48:45 PM | Phil Steitz <phil.steitz@gmail.com>Go to full article
Try mailing repository@



> On May 4, 2015, at 12:32 PM, Benedikt Ritter <britter@apache.org> wrote:
> 
> 2015-05-04 18:46 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:
> 
>> On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com>
>> wrote:
>> 
>>>> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
>>>> On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
>>> wrote:
>>>>> we're discussing our first incubating release, and we came to the
>> issue
>>>>> that we are not grant with permissions to deploy maven artifacts to
>> the
>>>>> org.apache.commons groupId [1].
>>>> Why org.apache.commons, and not, say, org.apache.commons.rdf? The
>>>> former seems overly broad to me.
>>> 
>>> Could be we should have gone that way years ago when we moved to
>>> org.apache.commons:commons-foo; but that ship has sailed, so I think
>>> its best to stay consistent with the rest of the components and
>>> proceed as proposed.
>> 
>> Some rambling thoughts (tm):
>> 
>> I like to 'fix' things too but I was on the fence about this one until now.
>> Yes, there is a redundancy because the substring 'commons' is in the
>> AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID, so of
>> course we have o.a.commons, that's a must. The AID is the component, which
>> I always call Commons Foo, and sometimes Apache Commons Foo when I want to
>> make it clear to folks (at work for example) that I am talking about
>> software hosted at Apache. If I were to talk within Apache about Foo, I bet
>> some folks would not know what Foo is or where it lives. If I say 'Commons
>> Foo' then it's obvious (I hope). That is how I justify to myself the
>> commons in the AID.
>> 
>> FWIW: Over at Log4j, we have "log4j-" as the prefix for all module names,
>> and no one seems to mind.
> 
> I'm all for consistency. VFS does it this way, Weaver does it this way,
> Chain does it this way. And GID matching TLP ID makes sense as well.
> 
> Who can grant the necessary permissions?
> 
> 
>> 
>> Gary
>> 
>> 
>>> 
>>> Phil
>>>> 
>>>> Jochen
>>>> 
>>>> ---------------------------------------------------------------------
>>>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>>>> For additional commands, e-mail: dev-help@commons.apache.org
>>> 
>>> 
>>> ---------------------------------------------------------------------
>>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>>> For additional commands, e-mail: dev-help@commons.apache.org
>> 
>> 
>> --
>> E-Mail: garydgregory@gmail.com | ggregory@apache.org
>> Java Persistence with Hibernate, Second Edition
>> <http://www.manning.com/bauer3/>
>> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
>> Spring Batch in Action <http://www.manning.com/templier/>
>> Blog: http://garygregory.wordpress.com
>> Home: http://garygregory.com/
>> Tweet! http://twitter.com/GaryGregory
> 
> 
> 
> -- 
> http://people.apache.org/~britter/
> http://www.systemoutprintln.de/
> http://twitter.com/BenediktRitter
> http://github.com/britter

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎2:30:01 PM | Thomas Neidhart <thomas.neidhart@gmail.com>Go to full article
On 05/04/2015 09:31 PM, Luc Maisonobe wrote:
> Le 04/05/2015 19:13, sebb a écrit :
>> On 4 May 2015 at 16:43, luc <luc@spaceroots.org> wrote:
>>> Le 2015-05-04 14:48, Thomas Neidhart a écrit :
>>>>
>>>> Problem still remains, see here:
>>>> https://builds.apache.org/job/Commons%20Math%20H10/49/console
>>>>
>>>> The test failures only occur on the following slaves it seems:
>>>>
>>>>  * H10
>>>>  * ubuntu-2
>>>
>>>
>>> This looks like what happened a few months ago then.
>>>
>>> I will try to look at it. As we are only able to reproduce this on this
>>> build system, I guess this implies committing lots of small changes (with
>>> System.out.println and the like) and triggering a custom buid from the
>>> Jenkins configuration above. I can do that, but wonder if there is another
>>> way without committing the tests in the master branch. Can we set up an
>>> h10-builds branch that would be used by the job above and would be ignored
>>> by the regular job ?
>>
>> Yes, just configure the Jenkins job to use the appropriate branch.
>> It is currently using
>>
>> */master
> 
> I explored the project and did not find any way to change the build.
> Looking at the REST API explanation page, I found a reference to
> JOBNAME/config.xml. However, if I try this URL I get an access denied
> failure with message "luc is missing the Job/ExtendedRead permission"
> and if I try the createItem URL I get an access denied failure with
> message "luc is missing the Job/Create permission".
> 
> Could someone give me karma for changing these elements on the Commons
> Math H10 job?

I changed the job configuration to use the h10-builds branch and started
a new build already.

I am not sure that I have the credentials to give you the permissions.

Thomas

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎1:16:28 PM | Thomas Neidhart <thomas.neidhart@gmail.com>Go to full article
On 05/04/2015 05:43 PM, luc wrote:
> Le 2015-05-04 14:48, Thomas Neidhart a écrit :
>> Problem still remains, see here:
>> https://builds.apache.org/job/Commons%20Math%20H10/49/console
>>
>> The test failures only occur on the following slaves it seems:
>>
>>  * H10
>>  * ubuntu-2
> 
> This looks like what happened a few months ago then.
> 
> I will try to look at it. As we are only able to reproduce this on this
> build system, I guess this implies committing lots of small changes (with
> System.out.println and the like) and triggering a custom buid from the
> Jenkins configuration above. I can do that, but wonder if there is another
> way without committing the tests in the master branch. Can we set up an
> h10-builds branch that would be used by the job above and would be ignored
> by the regular job ?
> 
> If I remember well, when the previous problem arose even putting simple
> print
> statements in the code made the bug appear and disappear without control.

yes indeed. I tried different ways to figure out what exact statement
went wrong due to JIT compilation (e.g. with System.out statement), but
this already alters the compilation itself thus making it
difficult/impossible to track down the problem like that.

The advantage we had previously was that we had a good idea which
statement went wrong (it was a cast). This time, I do not yet have an
idea, so I think the only way to track this down would be to get
physical access to the machine and analyze the resulting JIT assembly.

You can see in the console output above that I enabled JIT debugging and
that the method in question was optimized 2 times.

Thomas

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎12:52:04 PM | Luc Maisonobe <luc@spaceroots.org>Go to full article
Le 04/05/2015 21:34, Benedikt Ritter a écrit :
> 2015-05-04 16:20 GMT+02:00 luc <luc@spaceroots.org>:
> 
>> Le 2015-05-04 14:32, Benedikt Ritter a écrit :
>>
>>> Hello Luc,
>>>
>>> 2015-05-04 13:43 GMT+02:00 <luc@apache.org>:
>>>
>>>  Repository: commons-math
>>>> Updated Branches:
>>>>   refs/heads/master c8cb75243 -> c771c0080
>>>>
>>>>
>>>> Attempt to circumvent some errors which seem to be platform-dependent.
>>>>
>>>> The Jenkins build often fails on code that seems to be perfectly
>>>> correct. Failures also do no always happen so they may depend on
>>>> platform. There were similar problems a few months ago that were
>>>> probably related to JIT bugs.
>>>>
>>>> This fix simply tries to do the same thing as before, but with an
>>>> earlier detection of NaN in one case, and by comparing directly the bits
>>>> representation in another case, to avoid wrong optimizations.
>>>>
>>>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>>>> Commit:
>>>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>>>> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>>>> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>>>>
>>>> Branch: refs/heads/master
>>>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>>>> Parents: c8cb752
>>>> Author: Luc Maisonobe <luc@apache.org>
>>>> Authored: Mon May 4 13:43:27 2015 +0200
>>>> Committer: Luc Maisonobe <luc@apache.org>
>>>> Committed: Mon May 4 13:43:27 2015 +0200
>>>>
>>>> ----------------------------------------------------------------------
>>>>  .../org/apache/commons/math4/util/FastMath.java | 28
>>>> +++++++++-----------
>>>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>>>  2 files changed, 15 insertions(+), 17 deletions(-)
>>>> ----------------------------------------------------------------------
>>>>
>>>>
>>>>
>>>>
>>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> ----------------------------------------------------------------------
>>>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> index 24bb857..fcd03ea 100644
>>>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> @@ -315,6 +315,9 @@ public class FastMath {
>>>>      /** Mask used to clear the non-sign part of a long. */
>>>>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>>>>
>>>> +    /** Bits representation of +1.0. */
>>>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>>>> +
>>>>      /** 2^52 - double numbers this large must be integral (no fraction)
>>>> or NaN or Infinite */
>>>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>>>      /** 2^53 - double numbers this large must be even. */
>>>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>>>              return x;
>>>>          }
>>>>
>>>> +        if (y != y) { // Y is NaN
>>>>
>>>>
>>> It really took me some time to understand this change. How about using
>>> Double.isNaN(double) instead? It does the same as the current code, but
>>> reads better, IMHO.
>>>
>>
>> I agree but in this huge class this is how all NaNs are detected and there
>> are a bunch of such tests. I don't know the reason these existing tests
>> were done this way and not using Double.isNaN, it may well be performance
>> related.
>> So for this class (and this class only), I prefer to do it the same way it
>> is already done a few lines above or below.
>>
> 
> Yes at first I also thought it has something to do with performance. But
> then I looked at the implementation of Double.isNaN(double):
> 
> static public boolean isNaN(double v) {
>     return (v != v);
> }
> 
> So it's probably because of consistency with the rest of the class. Would
> you be willing to merge a PR that changes the whole class to use
> Double.isNaN(double) if I provide one?

You are a committer, you can merge it if you want ;-)
I agree it would be cleaner.

best regards,
Luc

> 
> Benedikt
> 
>>
>>
>> best regards,
>> Luc
>>
>>
>>
>>
>>> Best regards,
>>> Benedikt
>>>
>>>
>>>  +            return y;
>>>> +        }
>>>> +
>>>>          if (x == 0) {
>>>>              long bits = Double.doubleToRawLongBits(x);
>>>>              if ((bits & 0x8000000000000000L) != 0) {
>>>> @@ -1485,18 +1492,13 @@ public class FastMath {
>>>>
>>>>              if (y < 0) {
>>>>                  return Double.POSITIVE_INFINITY;
>>>> -            }
>>>> -            if (y > 0) {
>>>> +            } else {
>>>>                  return 0.0;
>>>>              }
>>>>
>>>> -            return Double.NaN;
>>>>          }
>>>>
>>>>          if (x == Double.POSITIVE_INFINITY) {
>>>> -            if (y != y) { // y is NaN
>>>> -                return y;
>>>> -            }
>>>>              if (y < 0.0) {
>>>>                  return 0.0;
>>>>              } else {
>>>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>>>          }
>>>>
>>>>          if (y == Double.POSITIVE_INFINITY) {
>>>> -            if (x * x == 1.0) {
>>>> -                return Double.NaN;
>>>> -            }
>>>> -
>>>> -            if (x * x > 1.0) {
>>>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>>>> Double.doubleToRawLongBits(x);
>>>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>>>                  return Double.POSITIVE_INFINITY;
>>>> -            } else {
>>>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>>>                  return 0.0;
>>>> +            } else {
>>>> +                return Double.NaN;
>>>>              }
>>>>          }
>>>>
>>>>          if (x == Double.NEGATIVE_INFINITY) {
>>>> -            if (y != y) { // y is NaN
>>>> -                return y;
>>>> -            }
>>>>
>>>>              if (y < 0) {
>>>>                  long yi = (long) y;
>>>>
>>>>
>>>>
>>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> ----------------------------------------------------------------------
>>>> diff --git
>>>> a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> index 5d36fea..06a1d07 100644
>>>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> @@ -29,8 +29,6 @@ import
>>>> org.apache.commons.math4.exception.MathArithmeticException;
>>>>  import org.apache.commons.math4.random.MersenneTwister;
>>>>  import org.apache.commons.math4.random.RandomGenerator;
>>>>  import org.apache.commons.math4.random.Well1024a;
>>>> -import org.apache.commons.math4.util.FastMath;
>>>> -import org.apache.commons.math4.util.Precision;
>>>>  import org.junit.Assert;
>>>>  import org.junit.Before;
>>>>  import org.junit.Ignore;
>>>> @@ -393,6 +391,8 @@ public class FastMathTest {
>>>>
>>>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>>>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>>>>
>>>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>>>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>>>> +
>>>>          // Added tests for a 100% coverage
>>>>
>>>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>>>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>>>>
>>>>
>>>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
>>
> 
> 


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎12:34:54 PM | Benedikt Ritter <britter@apache.org>Go to full article
2015-05-04 16:20 GMT+02:00 luc <luc@spaceroots.org>:

> Le 2015-05-04 14:32, Benedikt Ritter a écrit :
>
>> Hello Luc,
>>
>> 2015-05-04 13:43 GMT+02:00 <luc@apache.org>:
>>
>>  Repository: commons-math
>>> Updated Branches:
>>>   refs/heads/master c8cb75243 -> c771c0080
>>>
>>>
>>> Attempt to circumvent some errors which seem to be platform-dependent.
>>>
>>> The Jenkins build often fails on code that seems to be perfectly
>>> correct. Failures also do no always happen so they may depend on
>>> platform. There were similar problems a few months ago that were
>>> probably related to JIT bugs.
>>>
>>> This fix simply tries to do the same thing as before, but with an
>>> earlier detection of NaN in one case, and by comparing directly the bits
>>> representation in another case, to avoid wrong optimizations.
>>>
>>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>>> Commit:
>>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>>> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>>> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>>>
>>> Branch: refs/heads/master
>>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>>> Parents: c8cb752
>>> Author: Luc Maisonobe <luc@apache.org>
>>> Authored: Mon May 4 13:43:27 2015 +0200
>>> Committer: Luc Maisonobe <luc@apache.org>
>>> Committed: Mon May 4 13:43:27 2015 +0200
>>>
>>> ----------------------------------------------------------------------
>>>  .../org/apache/commons/math4/util/FastMath.java | 28
>>> +++++++++-----------
>>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>>  2 files changed, 15 insertions(+), 17 deletions(-)
>>> ----------------------------------------------------------------------
>>>
>>>
>>>
>>>
>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> ----------------------------------------------------------------------
>>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> index 24bb857..fcd03ea 100644
>>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> @@ -315,6 +315,9 @@ public class FastMath {
>>>      /** Mask used to clear the non-sign part of a long. */
>>>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>>>
>>> +    /** Bits representation of +1.0. */
>>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>>> +
>>>      /** 2^52 - double numbers this large must be integral (no fraction)
>>> or NaN or Infinite */
>>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>>      /** 2^53 - double numbers this large must be even. */
>>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>>              return x;
>>>          }
>>>
>>> +        if (y != y) { // Y is NaN
>>>
>>>
>> It really took me some time to understand this change. How about using
>> Double.isNaN(double) instead? It does the same as the current code, but
>> reads better, IMHO.
>>
>
> I agree but in this huge class this is how all NaNs are detected and there
> are a bunch of such tests. I don't know the reason these existing tests
> were done this way and not using Double.isNaN, it may well be performance
> related.
> So for this class (and this class only), I prefer to do it the same way it
> is already done a few lines above or below.
>

Yes at first I also thought it has something to do with performance. But
then I looked at the implementation of Double.isNaN(double):

static public boolean isNaN(double v) {
    return (v != v);
}

So it's probably because of consistency with the rest of the class. Would
you be willing to merge a PR that changes the whole class to use
Double.isNaN(double) if I provide one?

Benedikt

>
>
> best regards,
> Luc
>
>
>
>
>> Best regards,
>> Benedikt
>>
>>
>>  +            return y;
>>> +        }
>>> +
>>>          if (x == 0) {
>>>              long bits = Double.doubleToRawLongBits(x);
>>>              if ((bits & 0x8000000000000000L) != 0) {
>>> @@ -1485,18 +1492,13 @@ public class FastMath {
>>>
>>>              if (y < 0) {
>>>                  return Double.POSITIVE_INFINITY;
>>> -            }
>>> -            if (y > 0) {
>>> +            } else {
>>>                  return 0.0;
>>>              }
>>>
>>> -            return Double.NaN;
>>>          }
>>>
>>>          if (x == Double.POSITIVE_INFINITY) {
>>> -            if (y != y) { // y is NaN
>>> -                return y;
>>> -            }
>>>              if (y < 0.0) {
>>>                  return 0.0;
>>>              } else {
>>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>>          }
>>>
>>>          if (y == Double.POSITIVE_INFINITY) {
>>> -            if (x * x == 1.0) {
>>> -                return Double.NaN;
>>> -            }
>>> -
>>> -            if (x * x > 1.0) {
>>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>>> Double.doubleToRawLongBits(x);
>>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>>                  return Double.POSITIVE_INFINITY;
>>> -            } else {
>>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>>                  return 0.0;
>>> +            } else {
>>> +                return Double.NaN;
>>>              }
>>>          }
>>>
>>>          if (x == Double.NEGATIVE_INFINITY) {
>>> -            if (y != y) { // y is NaN
>>> -                return y;
>>> -            }
>>>
>>>              if (y < 0) {
>>>                  long yi = (long) y;
>>>
>>>
>>>
>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> ----------------------------------------------------------------------
>>> diff --git
>>> a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> index 5d36fea..06a1d07 100644
>>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> @@ -29,8 +29,6 @@ import
>>> org.apache.commons.math4.exception.MathArithmeticException;
>>>  import org.apache.commons.math4.random.MersenneTwister;
>>>  import org.apache.commons.math4.random.RandomGenerator;
>>>  import org.apache.commons.math4.random.Well1024a;
>>> -import org.apache.commons.math4.util.FastMath;
>>> -import org.apache.commons.math4.util.Precision;
>>>  import org.junit.Assert;
>>>  import org.junit.Before;
>>>  import org.junit.Ignore;
>>> @@ -393,6 +391,8 @@ public class FastMathTest {
>>>
>>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>>>
>>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>>> +
>>>          // Added tests for a 100% coverage
>>>
>>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>>>
>>>
>>>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Monday, ‎May ‎04, ‎2015, ‏‎12:32:26 PM | Benedikt Ritter <britter@apache.org>Go to full article
2015-05-04 18:46 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:

> On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com>
> wrote:
>
> > On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
> > > On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
> > wrote:
> > >> we're discussing our first incubating release, and we came to the
> issue
> > >> that we are not grant with permissions to deploy maven artifacts to
> the
> > >> org.apache.commons groupId [1].
> > > Why org.apache.commons, and not, say, org.apache.commons.rdf? The
> > > former seems overly broad to me.
> >
> > Could be we should have gone that way years ago when we moved to
> > org.apache.commons:commons-foo; but that ship has sailed, so I think
> > its best to stay consistent with the rest of the components and
> > proceed as proposed.
> >
>
> Some rambling thoughts (tm):
>
> I like to 'fix' things too but I was on the fence about this one until now.
> Yes, there is a redundancy because the substring 'commons' is in the
> AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID, so of
> course we have o.a.commons, that's a must. The AID is the component, which
> I always call Commons Foo, and sometimes Apache Commons Foo when I want to
> make it clear to folks (at work for example) that I am talking about
> software hosted at Apache. If I were to talk within Apache about Foo, I bet
> some folks would not know what Foo is or where it lives. If I say 'Commons
> Foo' then it's obvious (I hope). That is how I justify to myself the
> commons in the AID.
>
> FWIW: Over at Log4j, we have "log4j-" as the prefix for all module names,
> and no one seems to mind.
>

I'm all for consistency. VFS does it this way, Weaver does it this way,
Chain does it this way. And GID matching TLP ID makes sense as well.

Who can grant the necessary permissions?


>
> Gary
>
>
> >
> > Phil
> > >
> > > Jochen
> > >
> > > ---------------------------------------------------------------------
> > > To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> > > For additional commands, e-mail: dev-help@commons.apache.org
> > >
> > >
> >
> >
> > ---------------------------------------------------------------------
> > To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> > For additional commands, e-mail: dev-help@commons.apache.org
> >
> >
>
>
> --
> E-Mail: garydgregory@gmail.com | ggregory@apache.org
> Java Persistence with Hibernate, Second Edition
> <http://www.manning.com/bauer3/>
> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> Spring Batch in Action <http://www.manning.com/templier/>
> Blog: http://garygregory.wordpress.com
> Home: http://garygregory.com/
> Tweet! http://twitter.com/GaryGregory
>



-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎12:31:27 PM | Luc Maisonobe <luc@spaceroots.org>Go to full article
Le 04/05/2015 19:13, sebb a écrit :
> On 4 May 2015 at 16:43, luc <luc@spaceroots.org> wrote:
>> Le 2015-05-04 14:48, Thomas Neidhart a écrit :
>>>
>>> Problem still remains, see here:
>>> https://builds.apache.org/job/Commons%20Math%20H10/49/console
>>>
>>> The test failures only occur on the following slaves it seems:
>>>
>>>  * H10
>>>  * ubuntu-2
>>
>>
>> This looks like what happened a few months ago then.
>>
>> I will try to look at it. As we are only able to reproduce this on this
>> build system, I guess this implies committing lots of small changes (with
>> System.out.println and the like) and triggering a custom buid from the
>> Jenkins configuration above. I can do that, but wonder if there is another
>> way without committing the tests in the master branch. Can we set up an
>> h10-builds branch that would be used by the job above and would be ignored
>> by the regular job ?
> 
> Yes, just configure the Jenkins job to use the appropriate branch.
> It is currently using
> 
> */master

I explored the project and did not find any way to change the build.
Looking at the REST API explanation page, I found a reference to
JOBNAME/config.xml. However, if I try this URL I get an access denied
failure with message "luc is missing the Job/ExtendedRead permission"
and if I try the createItem URL I get an access denied failure with
message "luc is missing the Job/Create permission".

Could someone give me karma for changing these elements on the Commons
Math H10 job?

best regards,
Luc

> 
> 
>> If I remember well, when the previous problem arose even putting simple
>> print
>> statements in the code made the bug appear and disappear without control.
> 
> I don't remember that; I do remember that it was host-dependent.
> 
>> best regards,
>> Luc
>>
>>
>>>
>>> Thomas
>>>
>>>
>>> On Mon, May 4, 2015 at 1:43 PM, <luc@apache.org> wrote:
>>>
>>>> Repository: commons-math
>>>> Updated Branches:
>>>>   refs/heads/master c8cb75243 -> c771c0080
>>>>
>>>>
>>>> Attempt to circumvent some errors which seem to be platform-dependent.
>>>>
>>>> The Jenkins build often fails on code that seems to be perfectly
>>>> correct. Failures also do no always happen so they may depend on
>>>> platform. There were similar problems a few months ago that were
>>>> probably related to JIT bugs.
>>>>
>>>> This fix simply tries to do the same thing as before, but with an
>>>> earlier detection of NaN in one case, and by comparing directly the bits
>>>> representation in another case, to avoid wrong optimizations.
>>>>
>>>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>>>> Commit:
>>>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>>>> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>>>> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>>>>
>>>> Branch: refs/heads/master
>>>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>>>> Parents: c8cb752
>>>> Author: Luc Maisonobe <luc@apache.org>
>>>> Authored: Mon May 4 13:43:27 2015 +0200
>>>> Committer: Luc Maisonobe <luc@apache.org>
>>>> Committed: Mon May 4 13:43:27 2015 +0200
>>>>
>>>> ----------------------------------------------------------------------
>>>>  .../org/apache/commons/math4/util/FastMath.java | 28
>>>> +++++++++-----------
>>>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>>>  2 files changed, 15 insertions(+), 17 deletions(-)
>>>> ----------------------------------------------------------------------
>>>>
>>>>
>>>>
>>>>
>>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> ----------------------------------------------------------------------
>>>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> index 24bb857..fcd03ea 100644
>>>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> @@ -315,6 +315,9 @@ public class FastMath {
>>>>      /** Mask used to clear the non-sign part of a long. */
>>>>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>>>>
>>>> +    /** Bits representation of +1.0. */
>>>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>>>> +
>>>>      /** 2^52 - double numbers this large must be integral (no fraction)
>>>> or NaN or Infinite */
>>>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>>>      /** 2^53 - double numbers this large must be even. */
>>>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>>>              return x;
>>>>          }
>>>>
>>>> +        if (y != y) { // Y is NaN
>>>> +            return y;
>>>> +        }
>>>> +
>>>>          if (x == 0) {
>>>>              long bits = Double.doubleToRawLongBits(x);
>>>>              if ((bits & 0x8000000000000000L) != 0) {
>>>> @@ -1485,18 +1492,13 @@ public class FastMath {
>>>>
>>>>              if (y < 0) {
>>>>                  return Double.POSITIVE_INFINITY;
>>>> -            }
>>>> -            if (y > 0) {
>>>> +            } else {
>>>>                  return 0.0;
>>>>              }
>>>>
>>>> -            return Double.NaN;
>>>>          }
>>>>
>>>>          if (x == Double.POSITIVE_INFINITY) {
>>>> -            if (y != y) { // y is NaN
>>>> -                return y;
>>>> -            }
>>>>              if (y < 0.0) {
>>>>                  return 0.0;
>>>>              } else {
>>>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>>>          }
>>>>
>>>>          if (y == Double.POSITIVE_INFINITY) {
>>>> -            if (x * x == 1.0) {
>>>> -                return Double.NaN;
>>>> -            }
>>>> -
>>>> -            if (x * x > 1.0) {
>>>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>>>> Double.doubleToRawLongBits(x);
>>>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>>>                  return Double.POSITIVE_INFINITY;
>>>> -            } else {
>>>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>>>                  return 0.0;
>>>> +            } else {
>>>> +                return Double.NaN;
>>>>              }
>>>>          }
>>>>
>>>>          if (x == Double.NEGATIVE_INFINITY) {
>>>> -            if (y != y) { // y is NaN
>>>> -                return y;
>>>> -            }
>>>>
>>>>              if (y < 0) {
>>>>                  long yi = (long) y;
>>>>
>>>>
>>>>
>>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> ----------------------------------------------------------------------
>>>> diff --git
>>>> a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> index 5d36fea..06a1d07 100644
>>>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> @@ -29,8 +29,6 @@ import
>>>> org.apache.commons.math4.exception.MathArithmeticException;
>>>>  import org.apache.commons.math4.random.MersenneTwister;
>>>>  import org.apache.commons.math4.random.RandomGenerator;
>>>>  import org.apache.commons.math4.random.Well1024a;
>>>> -import org.apache.commons.math4.util.FastMath;
>>>> -import org.apache.commons.math4.util.Precision;
>>>>  import org.junit.Assert;
>>>>  import org.junit.Before;
>>>>  import org.junit.Ignore;
>>>> @@ -393,6 +391,8 @@ public class FastMathTest {
>>>>
>>>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>>>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>>>>
>>>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>>>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>>>> +
>>>>          // Added tests for a 100% coverage
>>>>
>>>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>>>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>>>>
>>>>
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
> 
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
> 
> 
> 


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [LANG] Add ThreadUtils
‎Monday, ‎May ‎04, ‎2015, ‏‎12:29:35 PM | Benedikt Ritter <britter@apache.org>Go to full article
Hello Hendrik,

2015-05-04 0:28 GMT+02:00 Hendrik Dev <hendrikdev22@gmail.com>:

> Hi Benedikt,
>
> i have opened a new pull request
> https://github.com/apache/commons-lang/pull/78 which is based against
> the master branch, contains only a single commit and fixes the issues
> you named.
> Hope thats ok ...
>

Thank you. The PR looks very promising.

Benedikt


>
> Thanks
> Hendrik
>
> On Sun, Apr 26, 2015 at 11:40 AM, Benedikt Ritter <britter@apache.org>
> wrote:
> > Hello Hendrik,
> >
> > 2015-04-22 21:14 GMT+02:00 Hendrik Dev <hendrikdev22@gmail.com>:
> >
> >> based on what i understand from this discussion i did some changes,
> >> pls see
> >>
> https://github.com/salyh/commons-lang/commit/12edd41ec7563368b03fa540af5c9a127bbfd89d
> >> for the diff and
> >>
> >>
> https://github.com/salyh/commons-lang/blob/12edd41ec7563368b03fa540af5c9a127bbfd89d/src/main/java/org/apache/commons/lang3/ThreadUtils.java
> >> for the class in its current version.
> >>
> >
> > I think we're almost there. Two minor nits remain:
> > - what's the difference between "finding" and "selecting"? I think we
> > should name all methods findXXX
> > - AlwayTruePredicate can be private
> >
> > I think if we have that we can apply the patch. Since you're an ASF
> > committer, you can add it to our svn repository yourself, if you like
> [1].
> >
> > Best regards,
> > Benedikt
> >
> > [1] http://markmail.org/message/ylmw7qzx23br4ver
> >
> >
> >>
> >> Thanks
> >> Hendrik
> >>
> >> On Wed, Apr 15, 2015 at 2:48 AM, Peter Ansell <ansell.peter@gmail.com>
> >> wrote:
> >> > On 13 April 2015 at 19:21, Benedikt Ritter <britter@apache.org>
> wrote:
> >> >> 2015-04-13 2:27 GMT+02:00 Matt Benson <gudnabrsam@gmail.com>:
> >> >>
> >> >>> +1 to what Peter said: it's a functional interface so it is
> >> >>> lambda-compatible anyway.
> >> >>>
> >> >>
> >> >> Well, yes it would be a functional interface, but it would lack all
> the
> >> >> default methods defined in java.util.function.Predicate if we don't
> >> extend
> >> >> it later.
> >> >
> >> > Agreed, I was trying to get that point across with my last comment:
> >> >
> >> >>> > > public interface ThreadPredicate extends
> >> >>> > java.util.function.Predicate<Thread>
> >> >>> >
> >> >>> > This change is useful once JDK-8 is the baseline, as it would
only
> >> add
> >> >>> > features (all of the default methods) from Predicate, not
remove
> any
> >> >>> > features or backwards compatibility.
> >> >
> >> > Cheers,
> >> >
> >> > Peter
> >> >
> >> > ---------------------------------------------------------------------
> >> > To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >> > For additional commands, e-mail: dev-help@commons.apache.org
> >> >
> >>
> >>
> >>
> >> --
> >> Hendrik Saly (salyh, hendrikdev22)
> >> @hendrikdev22
> >> PGP: 0x22D7F6EC
> >>
> >> ---------------------------------------------------------------------
> >> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >> For additional commands, e-mail: dev-help@commons.apache.org
> >>
> >>
> >
> >
> > --
> > http://people.apache.org/~britter/
> > http://www.systemoutprintln.de/
> > http://twitter.com/BenediktRitter
> > http://github.com/britter
>
>
>
> --
> Hendrik Saly (salyh, hendrikdev22)
> @hendrikdev22
> PGP: 0x22D7F6EC
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [VOTE] Release Apache Commons CLI 1.3 based on RC1
‎Monday, ‎May ‎04, ‎2015, ‏‎10:33:18 AM | Jörg Schaible <joerg.schaible@gmx.de>Go to full article
Hi Benedikt,

Benedikt Ritter wrote:

> Hi,
> 
> We have fixed quite a few bugs and added some significant enhancements
> since CLI 1.2 was released and the Groovy Project is asking for a new
> release, so I would like to release CLI 1.3. The most notable change is
> the introduction of a new API for creating Option instances.
> 
> CLI 1.3 RC1 is available for review here:
>   https://dist.apache.org/repos/dist/dev/commons/cli/ (svn revision 8797)
> 
> Maven artifacts are here:
>   
https://repository.apache.org/content/repositories/orgapachecommons-1090/
> 
> Details of changes since 1.2 are in the release notes:
>   https://dist.apache.org/repos/dist/dev/commons/cli/RELEASE-NOTES.txt
>   http://people.apache.org/~britter/cli-1.3-RC1/changes-report.html
> 
> I have tested this with JDK 6, 7 and 8 using maven 3.
> 
> The tag is here:
>   http://svn.apache.org/repos/asf/commons/proper/cli/tags/cli-1.3-RC1/
>   (svn
> revision 1677410)
> 
> Site:
>   http://people.apache.org/~britter/cli-1.3-RC1/
>   (note some *relative* links are broken and the 1.2 directories are not
> yet created - these will be OK once the site is deployed)
> 
> Clirr Report (compared to 1.2):
>   http://people.apache.org/~britter/cli-1.3-RC1/clirr-report.html
> 
> RAT Report:
>   http://people.apache.org/~britter/cli-1.3-RC1/rat-report.html
> 
> KEYS:
>   https://www.apache.org/dist/commons/KEYS
> 
> Please review the release candidate and vote. This vote will close no
> sooner that 72 hours from now, i.e. after 06-May 2015, 17:30 CEST.
> 
> [ ] +1 Release these artifacts
> [ ] +0 OK, but...
> [ ] -0 OK, but really should fix...
> [ ] -1 I oppose this release because...

Test fails for IBM JDK 1.5 and 1.6:
Failed tests: 
==================== %< ====================
  BugCLI162Test.testPrintHelpLongLines:310 expected:<...th are displayed.
 -[o,--paramModes <arg>       Parameters modes (1=IN, 2=INOUT, 4=OUT,
                             0=Unknown). -o and -O are mutually exclusive.
                             Example for 2 parameters, OUT and IN: -o "4
                             1"
 -O,--paramModeNames <arg>   Parameters mode names (IN, INOUT, OUT,
                             Unknown). -o and -O are mutually exclusive.
                             Example for 2 parameters, OUT and IN: -O "OUT
                             IN]"
 -p,--password <ar...> but was:<...th are displayed.
 -[O,--paramModeNames <arg>   Parameters mode names (IN, INOUT, OUT,
                             Unknown). -o and -O are mutually exclusive.
                             Example for 2 parameters, OUT and IN: -O "OUT
                             IN"
 -o,--paramModes <arg>       Parameters modes (1=IN, 2=INOUT, 4=OUT,
                             0=Unknown). -o and -O are mutually exclusive.
                             Example for 2 parameters, OUT and IN: -o "4
                             1]"
 -p,--password <ar...>
==================== %< ====================

... but not for Sun JDK 1.5/1.6 nor for IBM JDK 1.7. For whatever reason the 
options are printed in different order. Succeeds for my OpenJD versions, 
Oracle Java 8 and 9.

+1

Cheers,
Jörg



> 
> Thanks!
> Benedikt
> 
> 


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎10:13:48 AM | sebb <sebbaz@gmail.com>Go to full article
On 4 May 2015 at 16:43, luc <luc@spaceroots.org> wrote:
> Le 2015-05-04 14:48, Thomas Neidhart a écrit :
>>
>> Problem still remains, see here:
>> https://builds.apache.org/job/Commons%20Math%20H10/49/console
>>
>> The test failures only occur on the following slaves it seems:
>>
>>  * H10
>>  * ubuntu-2
>
>
> This looks like what happened a few months ago then.
>
> I will try to look at it. As we are only able to reproduce this on this
> build system, I guess this implies committing lots of small changes (with
> System.out.println and the like) and triggering a custom buid from the
> Jenkins configuration above. I can do that, but wonder if there is another
> way without committing the tests in the master branch. Can we set up an
> h10-builds branch that would be used by the job above and would be ignored
> by the regular job ?

Yes, just configure the Jenkins job to use the appropriate branch.
It is currently using

*/master


> If I remember well, when the previous problem arose even putting simple
> print
> statements in the code made the bug appear and disappear without control.

I don't remember that; I do remember that it was host-dependent.

> best regards,
> Luc
>
>
>>
>> Thomas
>>
>>
>> On Mon, May 4, 2015 at 1:43 PM, <luc@apache.org> wrote:
>>
>>> Repository: commons-math
>>> Updated Branches:
>>>   refs/heads/master c8cb75243 -> c771c0080
>>>
>>>
>>> Attempt to circumvent some errors which seem to be platform-dependent.
>>>
>>> The Jenkins build often fails on code that seems to be perfectly
>>> correct. Failures also do no always happen so they may depend on
>>> platform. There were similar problems a few months ago that were
>>> probably related to JIT bugs.
>>>
>>> This fix simply tries to do the same thing as before, but with an
>>> earlier detection of NaN in one case, and by comparing directly the bits
>>> representation in another case, to avoid wrong optimizations.
>>>
>>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>>> Commit:
>>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>>> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>>> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>>>
>>> Branch: refs/heads/master
>>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>>> Parents: c8cb752
>>> Author: Luc Maisonobe <luc@apache.org>
>>> Authored: Mon May 4 13:43:27 2015 +0200
>>> Committer: Luc Maisonobe <luc@apache.org>
>>> Committed: Mon May 4 13:43:27 2015 +0200
>>>
>>> ----------------------------------------------------------------------
>>>  .../org/apache/commons/math4/util/FastMath.java | 28
>>> +++++++++-----------
>>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>>  2 files changed, 15 insertions(+), 17 deletions(-)
>>> ----------------------------------------------------------------------
>>>
>>>
>>>
>>>
>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> ----------------------------------------------------------------------
>>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> index 24bb857..fcd03ea 100644
>>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> @@ -315,6 +315,9 @@ public class FastMath {
>>>      /** Mask used to clear the non-sign part of a long. */
>>>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>>>
>>> +    /** Bits representation of +1.0. */
>>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>>> +
>>>      /** 2^52 - double numbers this large must be integral (no fraction)
>>> or NaN or Infinite */
>>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>>      /** 2^53 - double numbers this large must be even. */
>>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>>              return x;
>>>          }
>>>
>>> +        if (y != y) { // Y is NaN
>>> +            return y;
>>> +        }
>>> +
>>>          if (x == 0) {
>>>              long bits = Double.doubleToRawLongBits(x);
>>>              if ((bits & 0x8000000000000000L) != 0) {
>>> @@ -1485,18 +1492,13 @@ public class FastMath {
>>>
>>>              if (y < 0) {
>>>                  return Double.POSITIVE_INFINITY;
>>> -            }
>>> -            if (y > 0) {
>>> +            } else {
>>>                  return 0.0;
>>>              }
>>>
>>> -            return Double.NaN;
>>>          }
>>>
>>>          if (x == Double.POSITIVE_INFINITY) {
>>> -            if (y != y) { // y is NaN
>>> -                return y;
>>> -            }
>>>              if (y < 0.0) {
>>>                  return 0.0;
>>>              } else {
>>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>>          }
>>>
>>>          if (y == Double.POSITIVE_INFINITY) {
>>> -            if (x * x == 1.0) {
>>> -                return Double.NaN;
>>> -            }
>>> -
>>> -            if (x * x > 1.0) {
>>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>>> Double.doubleToRawLongBits(x);
>>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>>                  return Double.POSITIVE_INFINITY;
>>> -            } else {
>>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>>                  return 0.0;
>>> +            } else {
>>> +                return Double.NaN;
>>>              }
>>>          }
>>>
>>>          if (x == Double.NEGATIVE_INFINITY) {
>>> -            if (y != y) { // y is NaN
>>> -                return y;
>>> -            }
>>>
>>>              if (y < 0) {
>>>                  long yi = (long) y;
>>>
>>>
>>>
>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> ----------------------------------------------------------------------
>>> diff --git
>>> a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> index 5d36fea..06a1d07 100644
>>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> @@ -29,8 +29,6 @@ import
>>> org.apache.commons.math4.exception.MathArithmeticException;
>>>  import org.apache.commons.math4.random.MersenneTwister;
>>>  import org.apache.commons.math4.random.RandomGenerator;
>>>  import org.apache.commons.math4.random.Well1024a;
>>> -import org.apache.commons.math4.util.FastMath;
>>> -import org.apache.commons.math4.util.Precision;
>>>  import org.junit.Assert;
>>>  import org.junit.Before;
>>>  import org.junit.Ignore;
>>> @@ -393,6 +391,8 @@ public class FastMathTest {
>>>
>>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>>>
>>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>>> +
>>>          // Added tests for a 100% coverage
>>>
>>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>>>
>>>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Monday, ‎May ‎04, ‎2015, ‏‎9:46:08 AM | Gary Gregory <garydgregory@gmail.com>Go to full article
On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com> wrote:

> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
> > On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
> wrote:
> >> we're discussing our first incubating release, and we came to the issue
> >> that we are not grant with permissions to deploy maven artifacts to the
> >> org.apache.commons groupId [1].
> > Why org.apache.commons, and not, say, org.apache.commons.rdf? The
> > former seems overly broad to me.
>
> Could be we should have gone that way years ago when we moved to
> org.apache.commons:commons-foo; but that ship has sailed, so I think
> its best to stay consistent with the rest of the components and
> proceed as proposed.
>

Some rambling thoughts (tm):

I like to 'fix' things too but I was on the fence about this one until now.
Yes, there is a redundancy because the substring 'commons' is in the
AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID, so of
course we have o.a.commons, that's a must. The AID is the component, which
I always call Commons Foo, and sometimes Apache Commons Foo when I want to
make it clear to folks (at work for example) that I am talking about
software hosted at Apache. If I were to talk within Apache about Foo, I bet
some folks would not know what Foo is or where it lives. If I say 'Commons
Foo' then it's obvious (I hope). That is how I justify to myself the
commons in the AID.

FWIW: Over at Log4j, we have "log4j-" as the prefix for all module names,
and no one seems to mind.

Gary


>
> Phil
> >
> > Jochen
> >
> > ---------------------------------------------------------------------
> > To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> > For additional commands, e-mail: dev-help@commons.apache.org
> >
> >
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
E-Mail: garydgregory@gmail.com | ggregory@apache.org
Java Persistence with Hibernate, Second Edition
<http://www.manning.com/bauer3/>
JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
Spring Batch in Action <http://www.manning.com/templier/>
Blog: http://garygregory.wordpress.com
Home: http://garygregory.com/
Tweet! http://twitter.com/GaryGregory




Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Monday, ‎May ‎04, ‎2015, ‏‎9:31:29 AM | Sergio Fernández <wikier@apache.org>Go to full article
Hi,

any consensus about this?

Please, take into account this issue is blocking the publication of our
first (incubating) release.

Thanks.

Cheers,


On Sun, May 3, 2015 at 10:53 PM, Sergio Fernández <wikier@apache.org> wrote:

> Well, we just followed Gary and Benedikt recommendation to adopt the
> current components' style. For us as podling is fine whatever you decide,
> we just need a decision (an permission to deploy over it).
>
> On Sun, May 3, 2015 at 9:33 PM, Phil Steitz <phil.steitz@gmail.com> wrote:
>
>> On 5/3/15 12:26 PM, Jochen Wiedmann wrote:
>> > On Sun, May 3, 2015 at 9:03 PM, Phil Steitz <phil.steitz@gmail.com>
>> wrote:
>> >> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
>> >>> On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
>> wrote:
>> >>>> we're discussing our first incubating release, and we came to the
>> issue
>> >>>> that we are not grant with permissions to deploy maven artifacts
to
>> the
>> >>>> org.apache.commons groupId [1].
>> >>> Why org.apache.commons, and not, say, org.apache.commons.rdf? The
>> >>> former seems overly broad to me.
>> >> Could be we should have gone that way years ago when we moved to
>> >> org.apache.commons:commons-foo; but that ship has sailed, so I think
>> >> its best to stay consistent with the rest of the components and
>> >> proceed as proposed.
>> >
>> > First release, and the ship has sailed? Sorry, but I don't think so.
>>
>> What I meant was the decision to standardize on
>>
>> GroupId: org.apache.commons
>> ArtifactId: commons-foo[v]
>>
>> I am -1 for making new components different.
>>
>> Phil
>> >
>> > Jochen
>> >
>> >
>>
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
>>
>
>
> --
> Sergio Fernández
> Partner Technology Manager
> Redlink GmbH
> m: +43 6602747925
> e: sergio.fernandez@redlink.co
> w: http://redlink.co
>



-- 
Sergio Fernández
Partner Technology Manager
Redlink GmbH
m: +43 6602747925
e: sergio.fernandez@redlink.co
w: http://redlink.co




Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎8:43:15 AM | luc <luc@spaceroots.org>Go to full article
Le 2015-05-04 14:48, Thomas Neidhart a écrit :
> Problem still remains, see here:
> https://builds.apache.org/job/Commons%20Math%20H10/49/console
> 
> The test failures only occur on the following slaves it seems:
> 
>  * H10
>  * ubuntu-2

This looks like what happened a few months ago then.

I will try to look at it. As we are only able to reproduce this on this
build system, I guess this implies committing lots of small changes 
(with
System.out.println and the like) and triggering a custom buid from the
Jenkins configuration above. I can do that, but wonder if there is 
another
way without committing the tests in the master branch. Can we set up an
h10-builds branch that would be used by the job above and would be 
ignored
by the regular job ?

If I remember well, when the previous problem arose even putting simple 
print
statements in the code made the bug appear and disappear without 
control.

best regards,
Luc

> 
> Thomas
> 
> 
> On Mon, May 4, 2015 at 1:43 PM, <luc@apache.org> wrote:
> 
>> Repository: commons-math
>> Updated Branches:
>>   refs/heads/master c8cb75243 -> c771c0080
>> 
>> 
>> Attempt to circumvent some errors which seem to be platform-dependent.
>> 
>> The Jenkins build often fails on code that seems to be perfectly
>> correct. Failures also do no always happen so they may depend on
>> platform. There were similar problems a few months ago that were
>> probably related to JIT bugs.
>> 
>> This fix simply tries to do the same thing as before, but with an
>> earlier detection of NaN in one case, and by comparing directly the 
>> bits
>> representation in another case, to avoid wrong optimizations.
>> 
>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>> Commit:
>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>> Tree: 
>> http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>> Diff: 
>> http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>> 
>> Branch: refs/heads/master
>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>> Parents: c8cb752
>> Author: Luc Maisonobe <luc@apache.org>
>> Authored: Mon May 4 13:43:27 2015 +0200
>> Committer: Luc Maisonobe <luc@apache.org>
>> Committed: Mon May 4 13:43:27 2015 +0200
>> 
>> ----------------------------------------------------------------------
>>  .../org/apache/commons/math4/util/FastMath.java | 28 
>> +++++++++-----------
>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>  2 files changed, 15 insertions(+), 17 deletions(-)
>> ----------------------------------------------------------------------
>> 
>> 
>> 
>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>> ----------------------------------------------------------------------
>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>> index 24bb857..fcd03ea 100644
>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>> @@ -315,6 +315,9 @@ public class FastMath {
>>      /** Mask used to clear the non-sign part of a long. */
>>      private static final long MASK_NON_SIGN_LONG = 
>> 0x7fffffffffffffffl;
>> 
>> +    /** Bits representation of +1.0. */
>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>> +
>>      /** 2^52 - double numbers this large must be integral (no 
>> fraction)
>> or NaN or Infinite */
>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>      /** 2^53 - double numbers this large must be even. */
>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>              return x;
>>          }
>> 
>> +        if (y != y) { // Y is NaN
>> +            return y;
>> +        }
>> +
>>          if (x == 0) {
>>              long bits = Double.doubleToRawLongBits(x);
>>              if ((bits & 0x8000000000000000L) != 0) {
>> @@ -1485,18 +1492,13 @@ public class FastMath {
>> 
>>              if (y < 0) {
>>                  return Double.POSITIVE_INFINITY;
>> -            }
>> -            if (y > 0) {
>> +            } else {
>>                  return 0.0;
>>              }
>> 
>> -            return Double.NaN;
>>          }
>> 
>>          if (x == Double.POSITIVE_INFINITY) {
>> -            if (y != y) { // y is NaN
>> -                return y;
>> -            }
>>              if (y < 0.0) {
>>                  return 0.0;
>>              } else {
>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>          }
>> 
>>          if (y == Double.POSITIVE_INFINITY) {
>> -            if (x * x == 1.0) {
>> -                return Double.NaN;
>> -            }
>> -
>> -            if (x * x > 1.0) {
>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>> Double.doubleToRawLongBits(x);
>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>                  return Double.POSITIVE_INFINITY;
>> -            } else {
>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>                  return 0.0;
>> +            } else {
>> +                return Double.NaN;
>>              }
>>          }
>> 
>>          if (x == Double.NEGATIVE_INFINITY) {
>> -            if (y != y) { // y is NaN
>> -                return y;
>> -            }
>> 
>>              if (y < 0) {
>>                  long yi = (long) y;
>> 
>> 
>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> ----------------------------------------------------------------------
>> diff --git 
>> a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> index 5d36fea..06a1d07 100644
>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> @@ -29,8 +29,6 @@ import
>> org.apache.commons.math4.exception.MathArithmeticException;
>>  import org.apache.commons.math4.random.MersenneTwister;
>>  import org.apache.commons.math4.random.RandomGenerator;
>>  import org.apache.commons.math4.random.Well1024a;
>> -import org.apache.commons.math4.util.FastMath;
>> -import org.apache.commons.math4.util.Precision;
>>  import org.junit.Assert;
>>  import org.junit.Before;
>>  import org.junit.Ignore;
>> @@ -393,6 +391,8 @@ public class FastMathTest {
>> 
>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>> 
>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>> +
>>          // Added tests for a 100% coverage
>> 
>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>> 
>> 

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎7:20:04 AM | luc <luc@spaceroots.org>Go to full article
Le 2015-05-04 14:32, Benedikt Ritter a écrit :
> Hello Luc,
> 
> 2015-05-04 13:43 GMT+02:00 <luc@apache.org>:
> 
>> Repository: commons-math
>> Updated Branches:
>>   refs/heads/master c8cb75243 -> c771c0080
>> 
>> 
>> Attempt to circumvent some errors which seem to be platform-dependent.
>> 
>> The Jenkins build often fails on code that seems to be perfectly
>> correct. Failures also do no always happen so they may depend on
>> platform. There were similar problems a few months ago that were
>> probably related to JIT bugs.
>> 
>> This fix simply tries to do the same thing as before, but with an
>> earlier detection of NaN in one case, and by comparing directly the 
>> bits
>> representation in another case, to avoid wrong optimizations.
>> 
>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>> Commit:
>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>> Tree: 
>> http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>> Diff: 
>> http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>> 
>> Branch: refs/heads/master
>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>> Parents: c8cb752
>> Author: Luc Maisonobe <luc@apache.org>
>> Authored: Mon May 4 13:43:27 2015 +0200
>> Committer: Luc Maisonobe <luc@apache.org>
>> Committed: Mon May 4 13:43:27 2015 +0200
>> 
>> ----------------------------------------------------------------------
>>  .../org/apache/commons/math4/util/FastMath.java | 28 
>> +++++++++-----------
>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>  2 files changed, 15 insertions(+), 17 deletions(-)
>> ----------------------------------------------------------------------
>> 
>> 
>> 
>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>> ----------------------------------------------------------------------
>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>> index 24bb857..fcd03ea 100644
>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>> @@ -315,6 +315,9 @@ public class FastMath {
>>      /** Mask used to clear the non-sign part of a long. */
>>      private static final long MASK_NON_SIGN_LONG = 
>> 0x7fffffffffffffffl;
>> 
>> +    /** Bits representation of +1.0. */
>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>> +
>>      /** 2^52 - double numbers this large must be integral (no 
>> fraction)
>> or NaN or Infinite */
>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>      /** 2^53 - double numbers this large must be even. */
>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>              return x;
>>          }
>> 
>> +        if (y != y) { // Y is NaN
>> 
> 
> It really took me some time to understand this change. How about using
> Double.isNaN(double) instead? It does the same as the current code, but
> reads better, IMHO.

I agree but in this huge class this is how all NaNs are detected and 
there
are a bunch of such tests. I don't know the reason these existing tests
were done this way and not using Double.isNaN, it may well be 
performance related.
So for this class (and this class only), I prefer to do it the same way 
it
is already done a few lines above or below.

best regards,
Luc


> 
> Best regards,
> Benedikt
> 
> 
>> +            return y;
>> +        }
>> +
>>          if (x == 0) {
>>              long bits = Double.doubleToRawLongBits(x);
>>              if ((bits & 0x8000000000000000L) != 0) {
>> @@ -1485,18 +1492,13 @@ public class FastMath {
>> 
>>              if (y < 0) {
>>                  return Double.POSITIVE_INFINITY;
>> -            }
>> -            if (y > 0) {
>> +            } else {
>>                  return 0.0;
>>              }
>> 
>> -            return Double.NaN;
>>          }
>> 
>>          if (x == Double.POSITIVE_INFINITY) {
>> -            if (y != y) { // y is NaN
>> -                return y;
>> -            }
>>              if (y < 0.0) {
>>                  return 0.0;
>>              } else {
>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>          }
>> 
>>          if (y == Double.POSITIVE_INFINITY) {
>> -            if (x * x == 1.0) {
>> -                return Double.NaN;
>> -            }
>> -
>> -            if (x * x > 1.0) {
>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>> Double.doubleToRawLongBits(x);
>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>                  return Double.POSITIVE_INFINITY;
>> -            } else {
>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>                  return 0.0;
>> +            } else {
>> +                return Double.NaN;
>>              }
>>          }
>> 
>>          if (x == Double.NEGATIVE_INFINITY) {
>> -            if (y != y) { // y is NaN
>> -                return y;
>> -            }
>> 
>>              if (y < 0) {
>>                  long yi = (long) y;
>> 
>> 
>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> ----------------------------------------------------------------------
>> diff --git 
>> a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> index 5d36fea..06a1d07 100644
>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> @@ -29,8 +29,6 @@ import
>> org.apache.commons.math4.exception.MathArithmeticException;
>>  import org.apache.commons.math4.random.MersenneTwister;
>>  import org.apache.commons.math4.random.RandomGenerator;
>>  import org.apache.commons.math4.random.Well1024a;
>> -import org.apache.commons.math4.util.FastMath;
>> -import org.apache.commons.math4.util.Precision;
>>  import org.junit.Assert;
>>  import org.junit.Before;
>>  import org.junit.Ignore;
>> @@ -393,6 +391,8 @@ public class FastMathTest {
>> 
>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>> 
>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>> +
>>          // Added tests for a 100% coverage
>> 
>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>> 
>> 

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎7:07:52 AM | sebb <sebbaz@gmail.com>Go to full article
Also, note that commit log messages are not published with the source code.

So please consider adding suitable comments in the source code itself.

The commit log should contain sufficient detail to understand why the
commit was done; the source code needs to contain the detail to
understand the source on its own.



On 4 May 2015 at 13:32, Benedikt Ritter <britter@apache.org> wrote:
> Hello Luc,
>
> 2015-05-04 13:43 GMT+02:00 <luc@apache.org>:
>
>> Repository: commons-math
>> Updated Branches:
>>   refs/heads/master c8cb75243 -> c771c0080
>>
>>
>> Attempt to circumvent some errors which seem to be platform-dependent.
>>
>> The Jenkins build often fails on code that seems to be perfectly
>> correct. Failures also do no always happen so they may depend on
>> platform. There were similar problems a few months ago that were
>> probably related to JIT bugs.
>>
>> This fix simply tries to do the same thing as before, but with an
>> earlier detection of NaN in one case, and by comparing directly the bits
>> representation in another case, to avoid wrong optimizations.
>>
>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>> Commit:
>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>>
>> Branch: refs/heads/master
>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>> Parents: c8cb752
>> Author: Luc Maisonobe <luc@apache.org>
>> Authored: Mon May 4 13:43:27 2015 +0200
>> Committer: Luc Maisonobe <luc@apache.org>
>> Committed: Mon May 4 13:43:27 2015 +0200
>>
>> ----------------------------------------------------------------------
>>  .../org/apache/commons/math4/util/FastMath.java | 28 +++++++++-----------
>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>  2 files changed, 15 insertions(+), 17 deletions(-)
>> ----------------------------------------------------------------------
>>
>>
>>
>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>> ----------------------------------------------------------------------
>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>> index 24bb857..fcd03ea 100644
>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>> @@ -315,6 +315,9 @@ public class FastMath {
>>      /** Mask used to clear the non-sign part of a long. */
>>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>>
>> +    /** Bits representation of +1.0. */
>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>> +
>>      /** 2^52 - double numbers this large must be integral (no fraction)
>> or NaN or Infinite */
>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>      /** 2^53 - double numbers this large must be even. */
>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>              return x;
>>          }
>>
>> +        if (y != y) { // Y is NaN
>>
>
> It really took me some time to understand this change. How about using
> Double.isNaN(double) instead? It does the same as the current code, but
> reads better, IMHO.
>
> Best regards,
> Benedikt
>
>
>> +            return y;
>> +        }
>> +
>>          if (x == 0) {
>>              long bits = Double.doubleToRawLongBits(x);
>>              if ((bits & 0x8000000000000000L) != 0) {
>> @@ -1485,18 +1492,13 @@ public class FastMath {
>>
>>              if (y < 0) {
>>                  return Double.POSITIVE_INFINITY;
>> -            }
>> -            if (y > 0) {
>> +            } else {
>>                  return 0.0;
>>              }
>>
>> -            return Double.NaN;
>>          }
>>
>>          if (x == Double.POSITIVE_INFINITY) {
>> -            if (y != y) { // y is NaN
>> -                return y;
>> -            }
>>              if (y < 0.0) {
>>                  return 0.0;
>>              } else {
>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>          }
>>
>>          if (y == Double.POSITIVE_INFINITY) {
>> -            if (x * x == 1.0) {
>> -                return Double.NaN;
>> -            }
>> -
>> -            if (x * x > 1.0) {
>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>> Double.doubleToRawLongBits(x);
>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>                  return Double.POSITIVE_INFINITY;
>> -            } else {
>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>                  return 0.0;
>> +            } else {
>> +                return Double.NaN;
>>              }
>>          }
>>
>>          if (x == Double.NEGATIVE_INFINITY) {
>> -            if (y != y) { // y is NaN
>> -                return y;
>> -            }
>>
>>              if (y < 0) {
>>                  long yi = (long) y;
>>
>>
>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> ----------------------------------------------------------------------
>> diff --git a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> index 5d36fea..06a1d07 100644
>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> @@ -29,8 +29,6 @@ import
>> org.apache.commons.math4.exception.MathArithmeticException;
>>  import org.apache.commons.math4.random.MersenneTwister;
>>  import org.apache.commons.math4.random.RandomGenerator;
>>  import org.apache.commons.math4.random.Well1024a;
>> -import org.apache.commons.math4.util.FastMath;
>> -import org.apache.commons.math4.util.Precision;
>>  import org.junit.Assert;
>>  import org.junit.Before;
>>  import org.junit.Ignore;
>> @@ -393,6 +391,8 @@ public class FastMathTest {
>>
>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>>
>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>> +
>>          // Added tests for a 100% coverage
>>
>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>>
>>
>
>
> --
> http://people.apache.org/~britter/
> http://www.systemoutprintln.de/
> http://twitter.com/BenediktRitter
> http://github.com/britter

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎5:48:59 AM | Thomas Neidhart <thomas.neidhart@gmail.com>Go to full article
Problem still remains, see here:
https://builds.apache.org/job/Commons%20Math%20H10/49/console

The test failures only occur on the following slaves it seems:

 * H10
 * ubuntu-2

Thomas


On Mon, May 4, 2015 at 1:43 PM, <luc@apache.org> wrote:

> Repository: commons-math
> Updated Branches:
>   refs/heads/master c8cb75243 -> c771c0080
>
>
> Attempt to circumvent some errors which seem to be platform-dependent.
>
> The Jenkins build often fails on code that seems to be perfectly
> correct. Failures also do no always happen so they may depend on
> platform. There were similar problems a few months ago that were
> probably related to JIT bugs.
>
> This fix simply tries to do the same thing as before, but with an
> earlier detection of NaN in one case, and by comparing directly the bits
> representation in another case, to avoid wrong optimizations.
>
> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
> Commit:
> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>
> Branch: refs/heads/master
> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
> Parents: c8cb752
> Author: Luc Maisonobe <luc@apache.org>
> Authored: Mon May 4 13:43:27 2015 +0200
> Committer: Luc Maisonobe <luc@apache.org>
> Committed: Mon May 4 13:43:27 2015 +0200
>
> ----------------------------------------------------------------------
>  .../org/apache/commons/math4/util/FastMath.java | 28 +++++++++-----------
>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>  2 files changed, 15 insertions(+), 17 deletions(-)
> ----------------------------------------------------------------------
>
>
>
> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
> ----------------------------------------------------------------------
> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
> b/src/main/java/org/apache/commons/math4/util/FastMath.java
> index 24bb857..fcd03ea 100644
> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
> @@ -315,6 +315,9 @@ public class FastMath {
>      /** Mask used to clear the non-sign part of a long. */
>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>
> +    /** Bits representation of +1.0. */
> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
> +
>      /** 2^52 - double numbers this large must be integral (no fraction)
> or NaN or Infinite */
>      private static final double TWO_POWER_52 = 4503599627370496.0;
>      /** 2^53 - double numbers this large must be even. */
> @@ -1468,6 +1471,10 @@ public class FastMath {
>              return x;
>          }
>
> +        if (y != y) { // Y is NaN
> +            return y;
> +        }
> +
>          if (x == 0) {
>              long bits = Double.doubleToRawLongBits(x);
>              if ((bits & 0x8000000000000000L) != 0) {
> @@ -1485,18 +1492,13 @@ public class FastMath {
>
>              if (y < 0) {
>                  return Double.POSITIVE_INFINITY;
> -            }
> -            if (y > 0) {
> +            } else {
>                  return 0.0;
>              }
>
> -            return Double.NaN;
>          }
>
>          if (x == Double.POSITIVE_INFINITY) {
> -            if (y != y) { // y is NaN
> -                return y;
> -            }
>              if (y < 0.0) {
>                  return 0.0;
>              } else {
> @@ -1505,21 +1507,17 @@ public class FastMath {
>          }
>
>          if (y == Double.POSITIVE_INFINITY) {
> -            if (x * x == 1.0) {
> -                return Double.NaN;
> -            }
> -
> -            if (x * x > 1.0) {
> +            long bitsAbsX = MASK_NON_SIGN_LONG &
> Double.doubleToRawLongBits(x);
> +            if (bitsAbsX > PLUS_ONE_BITS) {
>                  return Double.POSITIVE_INFINITY;
> -            } else {
> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>                  return 0.0;
> +            } else {
> +                return Double.NaN;
>              }
>          }
>
>          if (x == Double.NEGATIVE_INFINITY) {
> -            if (y != y) { // y is NaN
> -                return y;
> -            }
>
>              if (y < 0) {
>                  long yi = (long) y;
>
>
> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> ----------------------------------------------------------------------
> diff --git a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> index 5d36fea..06a1d07 100644
> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> @@ -29,8 +29,6 @@ import
> org.apache.commons.math4.exception.MathArithmeticException;
>  import org.apache.commons.math4.random.MersenneTwister;
>  import org.apache.commons.math4.random.RandomGenerator;
>  import org.apache.commons.math4.random.Well1024a;
> -import org.apache.commons.math4.util.FastMath;
> -import org.apache.commons.math4.util.Precision;
>  import org.junit.Assert;
>  import org.junit.Before;
>  import org.junit.Ignore;
> @@ -393,6 +391,8 @@ public class FastMathTest {
>
>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>
> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
> +
>          // Added tests for a 100% coverage
>
>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>
>




Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎5:32:28 AM | Benedikt Ritter <britter@apache.org>Go to full article
Hello Luc,

2015-05-04 13:43 GMT+02:00 <luc@apache.org>:

> Repository: commons-math
> Updated Branches:
>   refs/heads/master c8cb75243 -> c771c0080
>
>
> Attempt to circumvent some errors which seem to be platform-dependent.
>
> The Jenkins build often fails on code that seems to be perfectly
> correct. Failures also do no always happen so they may depend on
> platform. There were similar problems a few months ago that were
> probably related to JIT bugs.
>
> This fix simply tries to do the same thing as before, but with an
> earlier detection of NaN in one case, and by comparing directly the bits
> representation in another case, to avoid wrong optimizations.
>
> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
> Commit:
> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>
> Branch: refs/heads/master
> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
> Parents: c8cb752
> Author: Luc Maisonobe <luc@apache.org>
> Authored: Mon May 4 13:43:27 2015 +0200
> Committer: Luc Maisonobe <luc@apache.org>
> Committed: Mon May 4 13:43:27 2015 +0200
>
> ----------------------------------------------------------------------
>  .../org/apache/commons/math4/util/FastMath.java | 28 +++++++++-----------
>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>  2 files changed, 15 insertions(+), 17 deletions(-)
> ----------------------------------------------------------------------
>
>
>
> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
> ----------------------------------------------------------------------
> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
> b/src/main/java/org/apache/commons/math4/util/FastMath.java
> index 24bb857..fcd03ea 100644
> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
> @@ -315,6 +315,9 @@ public class FastMath {
>      /** Mask used to clear the non-sign part of a long. */
>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>
> +    /** Bits representation of +1.0. */
> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
> +
>      /** 2^52 - double numbers this large must be integral (no fraction)
> or NaN or Infinite */
>      private static final double TWO_POWER_52 = 4503599627370496.0;
>      /** 2^53 - double numbers this large must be even. */
> @@ -1468,6 +1471,10 @@ public class FastMath {
>              return x;
>          }
>
> +        if (y != y) { // Y is NaN
>

It really took me some time to understand this change. How about using
Double.isNaN(double) instead? It does the same as the current code, but
reads better, IMHO.

Best regards,
Benedikt


> +            return y;
> +        }
> +
>          if (x == 0) {
>              long bits = Double.doubleToRawLongBits(x);
>              if ((bits & 0x8000000000000000L) != 0) {
> @@ -1485,18 +1492,13 @@ public class FastMath {
>
>              if (y < 0) {
>                  return Double.POSITIVE_INFINITY;
> -            }
> -            if (y > 0) {
> +            } else {
>                  return 0.0;
>              }
>
> -            return Double.NaN;
>          }
>
>          if (x == Double.POSITIVE_INFINITY) {
> -            if (y != y) { // y is NaN
> -                return y;
> -            }
>              if (y < 0.0) {
>                  return 0.0;
>              } else {
> @@ -1505,21 +1507,17 @@ public class FastMath {
>          }
>
>          if (y == Double.POSITIVE_INFINITY) {
> -            if (x * x == 1.0) {
> -                return Double.NaN;
> -            }
> -
> -            if (x * x > 1.0) {
> +            long bitsAbsX = MASK_NON_SIGN_LONG &
> Double.doubleToRawLongBits(x);
> +            if (bitsAbsX > PLUS_ONE_BITS) {
>                  return Double.POSITIVE_INFINITY;
> -            } else {
> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>                  return 0.0;
> +            } else {
> +                return Double.NaN;
>              }
>          }
>
>          if (x == Double.NEGATIVE_INFINITY) {
> -            if (y != y) { // y is NaN
> -                return y;
> -            }
>
>              if (y < 0) {
>                  long yi = (long) y;
>
>
> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> ----------------------------------------------------------------------
> diff --git a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> index 5d36fea..06a1d07 100644
> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> @@ -29,8 +29,6 @@ import
> org.apache.commons.math4.exception.MathArithmeticException;
>  import org.apache.commons.math4.random.MersenneTwister;
>  import org.apache.commons.math4.random.RandomGenerator;
>  import org.apache.commons.math4.random.Well1024a;
> -import org.apache.commons.math4.util.FastMath;
> -import org.apache.commons.math4.util.Precision;
>  import org.junit.Assert;
>  import org.junit.Before;
>  import org.junit.Ignore;
> @@ -393,6 +391,8 @@ public class FastMathTest {
>
>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>
> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
> +
>          // Added tests for a 100% coverage
>
>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [VOTE] Release Apache Commons CLI 1.3 based on RC1
‎Monday, ‎May ‎04, ‎2015, ‏‎2:05:23 AM | Jacopo Cappellato <jacopo.cappellato@gmail.com>Go to full article
Hi Benedikt,

see inline (with my vote at the bottom):

On May 3, 2015, at 5:18 PM, Benedikt Ritter <britter@apache.org> wrote:

> Hi,
> 
> We have fixed quite a few bugs and added some significant enhancements
> since CLI 1.2 was released and the Groovy Project is asking for a new
> release, so I would like to release CLI 1.3. The most notable change is the
> introduction of a new API for creating Option instances.
> 
> CLI 1.3 RC1 is available for review here:
>  https://dist.apache.org/repos/dist/dev/commons/cli/ (svn revision 8797)

Tested the checksums and signatures of the -bin.zip and -src.zip versions.

Results for -bin.zip:
* detached signature: ok
* sha checksum: ok
* md5 checksum: ok

Results for -src.zip:
* detached signature: ok
* sha checksum: ok
* md5 checksum: ok

> 
> Maven artifacts are here:
>  https://repository.apache.org/content/repositories/orgapachecommons-1090/
> 
> Details of changes since 1.2 are in the release notes:
>  https://dist.apache.org/repos/dist/dev/commons/cli/RELEASE-NOTES.txt
>  http://people.apache.org/~britter/cli-1.3-RC1/changes-report.html
> 

Release notes and report look good to me.

> I have tested this with JDK 6, 7 and 8 using maven 3.
> 

Tested the -src.zip file: all tests successful (mvn test) with Java 7.

> The tag is here:
>  http://svn.apache.org/repos/asf/commons/proper/cli/tags/cli-1.3-RC1/ (svn
> revision 1677410)
> 
> Site:
>  http://people.apache.org/~britter/cli-1.3-RC1/
>  (note some *relative* links are broken and the 1.2 directories are not
> yet created - these will be OK once the site is deployed)

The site looks good but I have noticed that under "User Guide" section in the left bar we
have now two items:
Javadoc (Current 1.3)
Javadoc (1.3)

Maybe we should drop the last one or point it to 1.2

> 
> Clirr Report (compared to 1.2):
>  http://people.apache.org/~britter/cli-1.3-RC1/clirr-report.html
> 
> RAT Report:
>  http://people.apache.org/~britter/cli-1.3-RC1/rat-report.html
> 
> KEYS:
>  https://www.apache.org/dist/commons/KEYS
> 
> Please review the release candidate and vote. This vote will close no
> sooner that 72 hours from now, i.e. after 06-May 2015, 17:30 CEST.
> 
> [ ] +1 Release these artifacts
> [ ] +0 OK, but...
> [ ] -0 OK, but really should fix...
> [ ] -1 I oppose this release because...

+1 (not binding)

Regards,

Jacopo

> 
> Thanks!
> Benedikt
> 
> 
> -- 
> http://people.apache.org/~britter/
> http://www.systemoutprintln.de/
> http://twitter.com/BenediktRitter
> http://github.com/britter


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [VOTE] Release Apache Commons CLI 1.3 based on RC1
‎Monday, ‎May ‎04, ‎2015, ‏‎1:31:12 AM | "Bruno P. Kinoshita" <brunodepaulak@yahoo.com.br>Go to full article
+1 non-binding
No new FindBugs, PMD or CPD issues, new site layout (with minor CSS adjustments I think) looks
good, all tests pass. Environment:
Apache Maven 3.2.5 (12a6b3acb947671f09b81f49094c53f426d8cea1; 2014-12-15T06:29:23+13:00)
Maven home: /opt/apache-maven-3.2.5
Java version: 1.8.0_45, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-8-oracle/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "3.16.0-36-generic", arch: "amd64", family: "unix"

There are some issues in SonarQube, but the only one that called my attention was catching
exception and throwing a new one without including the old exception [1]. But maybe that's
the intended behaviour?

Cheers
Bruno

[1] https://analysis.apache.org/issues/search#issues=15472838-0deb-4ae9-8c53-db00a11cc2ad

 
      From: Benedikt Ritter <britter@apache.org>
 To: Commons Developers List <dev@commons.apache.org> 
 Sent: Monday, May 4, 2015 3:18 AM
 Subject: [VOTE] Release Apache Commons CLI 1.3 based on RC1
   
Hi,

We have fixed quite a few bugs and added some significant enhancements
since CLI 1.2 was released and the Groovy Project is asking for a new
release, so I would like to release CLI 1.3. The most notable change is the
introduction of a new API for creating Option instances.

CLI 1.3 RC1 is available for review here:
  https://dist.apache.org/repos/dist/dev/commons/cli/ (svn revision 8797)

Maven artifacts are here:
  https://repository.apache.org/content/repositories/orgapachecommons-1090/

Details of changes since 1.2 are in the release notes:
  https://dist.apache.org/repos/dist/dev/commons/cli/RELEASE-NOTES.txt
  http://people.apache.org/~britter/cli-1.3-RC1/changes-report.html

I have tested this with JDK 6, 7 and 8 using maven 3.

The tag is here:
  http://svn.apache.org/repos/asf/commons/proper/cli/tags/cli-1.3-RC1/ (svn
revision 1677410)

Site:
  http://people.apache.org/~britter/cli-1.3-RC1/
  (note some *relative* links are broken and the 1.2 directories are not
yet created - these will be OK once the site is deployed)

Clirr Report (compared to 1.2):
  http://people.apache.org/~britter/cli-1.3-RC1/clirr-report.html

RAT Report:
  http://people.apache.org/~britter/cli-1.3-RC1/rat-report.html

KEYS:
  https://www.apache.org/dist/commons/KEYS

Please review the release candidate and vote. This vote will close no
sooner that 72 hours from now, i.e. after 06-May 2015, 17:30 CEST.

[ ] +1 Release these artifacts
[ ] +0 OK, but...
[ ] -0 OK, but really should fix...
[ ] -1 I oppose this release because...

Thanks!
Benedikt


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter


   




Re: [VOTE] Release Apache Commons CLI 1.3 based on RC1
‎Sunday, ‎May ‎03, ‎2015, ‏‎11:11:58 PM | Benedikt Ritter <britter@apache.org>Go to full article
2015-05-03 19:21 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:

> The new class DefaultParser does not use generics to define the options
> List, that is suspicious. Looking closer, the list can hold a mix of
> OptionGroup and String instances. Really? Looking at Options I see the list
> defined as List<Object>. This avoids compiler warnings but is nasty. This
> is probably what we have inherited from this very old code base. We should
> at least perpetuate this to DefaultParser's List as a List<Object>.
>

Don't be shy ;-) If this is a blocker for you, please vote -1.

Asking this the other way around: Would you be willing to vote +1 on a
second RC if the option list in DefaultParser is generified?

Thank you!
Benedikt


>
> I switched a couple of years ago to using annotation based CLI processing
> with JCommander. I'd like to come back to Commons for CLI, but not I do not
> see that happening until a very different CLI2 emerges.
>
> This is not the thread for discussing a CLI2 of course... ;-)
>
> Gary
>
> On Sun, May 3, 2015 at 8:18 AM, Benedikt Ritter <britter@apache.org>
> wrote:
>
> > Hi,
> >
> > We have fixed quite a few bugs and added some significant enhancements
> > since CLI 1.2 was released and the Groovy Project is asking for a new
> > release, so I would like to release CLI 1.3. The most notable change is
> the
> > introduction of a new API for creating Option instances.
> >
> > CLI 1.3 RC1 is available for review here:
> >   https://dist.apache.org/repos/dist/dev/commons/cli/ (svn revision
> 8797)
> >
> > Maven artifacts are here:
> >
> >
> https://repository.apache.org/content/repositories/orgapachecommons-1090/
> >
> > Details of changes since 1.2 are in the release notes:
> >   https://dist.apache.org/repos/dist/dev/commons/cli/RELEASE-NOTES.txt
> >   http://people.apache.org/~britter/cli-1.3-RC1/changes-report.html
> >
> > I have tested this with JDK 6, 7 and 8 using maven 3.
> >
> > The tag is here:
> >   http://svn.apache.org/repos/asf/commons/proper/cli/tags/cli-1.3-RC1/
> > (svn
> > revision 1677410)
> >
> > Site:
> >   http://people.apache.org/~britter/cli-1.3-RC1/
> >   (note some *relative* links are broken and the 1.2 directories are not
> > yet created - these will be OK once the site is deployed)
> >
> > Clirr Report (compared to 1.2):
> >   http://people.apache.org/~britter/cli-1.3-RC1/clirr-report.html
> >
> > RAT Report:
> >   http://people.apache.org/~britter/cli-1.3-RC1/rat-report.html
> >
> > KEYS:
> >   https://www.apache.org/dist/commons/KEYS
> >
> > Please review the release candidate and vote. This vote will close no
> > sooner that 72 hours from now, i.e. after 06-May 2015, 17:30 CEST.
> >
> > [ ] +1 Release these artifacts
> > [ ] +0 OK, but...
> > [ ] -0 OK, but really should fix...
> > [ ] -1 I oppose this release because...
> >
> > Thanks!
> > Benedikt
> >
> >
> > --
> > http://people.apache.org/~britter/
> > http://www.systemoutprintln.de/
> > http://twitter.com/BenediktRitter
> > http://github.com/britter
> >
>
>
>
> --
> E-Mail: garydgregory@gmail.com | ggregory@apache.org
> Java Persistence with Hibernate, Second Edition
> <http://www.manning.com/bauer3/>
> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> Spring Batch in Action <http://www.manning.com/templier/>
> Blog: http://garygregory.wordpress.com
> Home: http://garygregory.com/
> Tweet! http://twitter.com/GaryGregory
>



-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [VOTE] Release Apache Commons CLI 1.3 based on RC1
‎Sunday, ‎May ‎03, ‎2015, ‏‎11:10:20 PM | Benedikt Ritter <britter@apache.org>Go to full article
Strange? Building the site with:

Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06;
2015-04-22T13:57:37+02:00)
Maven home: /usr/local/Cellar/maven/3.3.3/libexec
Java version: 1.7.0_75, vendor: Oracle Corporation
Java home:
/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre
Default locale: de_DE, platform encoding: UTF-8
OS name: "mac os x", version: "10.10.3", arch: "x86_64", family: "mac"

works on my machine. No error or stacktraces... Can you give some more
context?

Benedikt

2015-05-03 19:33 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:

> Just FYI, the site does builds but logs errors with Maven 3.3.3, I think
> this might be a known issue. This means some reports do not get created. I
> do not think there is anything we can do except make a not of which Maven
> versions we know work. Maven 3.2.5 works fine for example.
>
> With Maven 3.3.3:
>
> [WARN] An issue has occurred with maven-checkstyle-plugin:2.15:checkstyle,
> skipping LinkageError
>
> org.slf4j.spi.LocationAwareLogger.log(Lorg/slf4j/Marker;Ljava/lang/String;ILjava/lang/String;Ljava/lang/Throwable;)V,
> please report an issue to Maven dev team.
> java.lang.NoSuchMethodError:
>
> org.slf4j.spi.LocationAwareLogger.log(Lorg/slf4j/Marker;Ljava/lang/String;ILjava/lang/String;Ljava/lang/Throwable;)V
>         at
>
> org.apache.commons.logging.impl.SLF4JLocationAwareLog.trace(SLF4JLocationAwareLog.java:99)
>         at
>
> org.apache.commons.beanutils.BeanUtilsBean.copyProperty(BeanUtilsBean.java:443)
>         at
>
> com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:149)
>         at
>
> org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:219)
>         at
>
> org.apache.maven.plugin.checkstyle.AbstractCheckstyleReport.executeReport(AbstractCheckstyleReport.java:473)
>         at
>
> org.apache.maven.plugin.checkstyle.CheckstyleReport.executeReport(CheckstyleReport.java:155)
>         at
>
> org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:255)
>         at
>
> org.apache.maven.plugins.site.render.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:224)
>         at
>
> org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.renderModule(DefaultSiteRenderer.java:311)
>         at
>
> org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render(DefaultSiteRenderer.java:129)
>         at
>
> org.apache.maven.plugins.site.render.SiteMojo.renderLocale(SiteMojo.java:182)
>         at
> org.apache.maven.plugins.site.render.SiteMojo.execute(SiteMojo.java:141)
>         at
>
> org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
>         at
>
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
>         at
>
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
>         at
>
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
>         at
>
> org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
>         at
>
> org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
>         at
>
> org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
>         at
>
> org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
>         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
>         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
>         at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
>         at org.apache.maven.cli.MavenCli.execute(MavenCli.java:862)
>         at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:286)
>         at org.apache.maven.cli.MavenCli.main(MavenCli.java:197)
>         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
>         at
>
> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
>         at
>
> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
>         at java.lang.reflect.Method.invoke(Method.java:606)
>         at
>
> org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
>         at
> org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
>         at
>
> org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
>         at
> org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
>
> Gary
>
> On Sun, May 3, 2015 at 10:21 AM, Gary Gregory <garydgregory@gmail.com>
> wrote:
>
> > The new class DefaultParser does not use generics to define the options
> > List, that is suspicious. Looking closer, the list can hold a mix of
> > OptionGroup and String instances. Really? Looking at Options I see the
> list
> > defined as List<Object>. This avoids compiler warnings but is nasty. This
> > is probably what we have inherited from this very old code base. We
> should
> > at least perpetuate this to DefaultParser's List as a List<Object>.
> >
> > I switched a couple of years ago to using annotation based CLI processing
> > with JCommander. I'd like to come back to Commons for CLI, but not I do
> not
> > see that happening until a very different CLI2 emerges.
> >
> > This is not the thread for discussing a CLI2 of course... ;-)
> >
> > Gary
> >
> > On Sun, May 3, 2015 at 8:18 AM, Benedikt Ritter <britter@apache.org>
> > wrote:
> >
> >> Hi,
> >>
> >> We have fixed quite a few bugs and added some significant enhancements
> >> since CLI 1.2 was released and the Groovy Project is asking for a new
> >> release, so I would like to release CLI 1.3. The most notable change is
> >> the
> >> introduction of a new API for creating Option instances.
> >>
> >> CLI 1.3 RC1 is available for review here:
> >>   https://dist.apache.org/repos/dist/dev/commons/cli/ (svn revision
> 8797)
> >>
> >> Maven artifacts are here:
> >>
> >>
> https://repository.apache.org/content/repositories/orgapachecommons-1090/
> >>
> >> Details of changes since 1.2 are in the release notes:
> >>   https://dist.apache.org/repos/dist/dev/commons/cli/RELEASE-NOTES.txt
> >>   http://people.apache.org/~britter/cli-1.3-RC1/changes-report.html
> >>
> >> I have tested this with JDK 6, 7 and 8 using maven 3.
> >>
> >> The tag is here:
> >>   http://svn.apache.org/repos/asf/commons/proper/cli/tags/cli-1.3-RC1/
> >> (svn
> >> revision 1677410)
> >>
> >> Site:
> >>   http://people.apache.org/~britter/cli-1.3-RC1/
> >>   (note some *relative* links are broken and the 1.2 directories are not
> >> yet created - these will be OK once the site is deployed)
> >>
> >> Clirr Report (compared to 1.2):
> >>   http://people.apache.org/~britter/cli-1.3-RC1/clirr-report.html
> >>
> >> RAT Report:
> >>   http://people.apache.org/~britter/cli-1.3-RC1/rat-report.html
> >>
> >> KEYS:
> >>   https://www.apache.org/dist/commons/KEYS
> >>
> >> Please review the release candidate and vote. This vote will close no
> >> sooner that 72 hours from now, i.e. after 06-May 2015, 17:30 CEST.
> >>
> >> [ ] +1 Release these artifacts
> >> [ ] +0 OK, but...
> >> [ ] -0 OK, but really should fix...
> >> [ ] -1 I oppose this release because...
> >>
> >> Thanks!
> >> Benedikt
> >>
> >>
> >> --
> >> http://people.apache.org/~britter/
> >> http://www.systemoutprintln.de/
> >> http://twitter.com/BenediktRitter
> >> http://github.com/britter
> >>
> >
> >
> >
> > --
> > E-Mail: garydgregory@gmail.com | ggregory@apache.org
> > Java Persistence with Hibernate, Second Edition
> > <http://www.manning.com/bauer3/>
> > JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> > Spring Batch in Action <http://www.manning.com/templier/>
> > Blog: http://garygregory.wordpress.com
> > Home: http://garygregory.com/
> > Tweet! http://twitter.com/GaryGregory
> >
>
>
>
> --
> E-Mail: garydgregory@gmail.com | ggregory@apache.org
> Java Persistence with Hibernate, Second Edition
> <http://www.manning.com/bauer3/>
> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> Spring Batch in Action <http://www.manning.com/templier/>
> Blog: http://garygregory.wordpress.com
> Home: http://garygregory.com/
> Tweet! http://twitter.com/GaryGregory
>



-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [CLI] Release 1.3
‎Sunday, ‎May ‎03, ‎2015, ‏‎11:06:59 PM | Benedikt Ritter <britter@apache.org>Go to full article
Hello Jacopo,

2015-05-03 18:20 GMT+02:00 Jacopo Cappellato <jacopo.cappellato@gmail.com>:

> On May 3, 2015, at 12:54 PM, Benedikt Ritter <britter@apache.org> wrote:
>
> > Sounds good to me. Go for it!
>
> I have attached a patch for one (but will resolve two) of the issues in
> the list:
>
> https://issues.apache.org/jira/browse/CLI-179
>
> I am not sure if it is the right direction but this is what I could do
> today, so I am sharing it; if someone could provide some feedback I would
> really appreciate it.
>

Thank you, I'll have a look.

Following the advice on the Groovy ML, I've looked through the open issues
and they all looked like they could be postponed to 1.4. So I moved them to
1.4 an started a release vote for 1.3 [1].

I would appreciate feedback for the RC from the Groovy project.

Thank you!

Benedikt

[1] http://markmail.org/message/bhp2c2l7mmk7dksq


>
> Regards,
>
> Jacopo
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Show all items

Displaying40 / 40
 
All40New40
Sort by:
List OrderDateTitleAuthor

Filter by category:
CheckedMark feed as readView feed </properties\>
Your subscribed feeds are not being updated automatically because this setting is turned off.
Turn on automatic feed updates
You've successfully subscribed to this feed!

Updated content can be viewed in Internet Explorer and other programs that use the Common Feed List.

View my feeds

You've successfully subscribed to this feed!

dev@commons.apache.org Archives
You are viewing a feed that contains frequently updated content. When you subscribe to a feed, it is added to the Common Feed List. Updated information from the feed is automatically downloaded to your computer and can be viewed in Internet Explorer and other programs. Learn more about feeds.

Plus ButtonSubscribe to this feed

dev@commons.apache.org Archives
‎Today, ‎May ‎06, ‎2015, ‏‎27 minutes ago

Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎4:56:09 PM | Peter Ansell <ansell.peter@gmail.com>Go to full article
On 6 May 2015 at 01:51, Jörg Schaible <joerg.schaible@swisspost.com> wrote:
> Hi Benedikt,
>
> Benedikt Ritter wrote:
>
>> 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
>>
>>> Hello Jörg,
>>>
>>> 2015-05-05 8:30 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
>>>
>>>> Hi Benedikt,
>>>>
>>>> britter@apache.org wrote:
>>>>
>>>> > Repository: commons-lang
>>>> > Updated Branches:
>>>> >   refs/heads/master 8548b12d8 -> 60b32953a
>>>> >
>>>> >
>>>> > Allocate array of the correct size
>>>> >
>>>> >
>>>> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
>>>> > Commit:
>>>> > http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
>>>> Tree:
>>>> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953
>>>> > Diff:
>>>> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
>>>> >
>>>> > Branch: refs/heads/master
>>>> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
>>>> > Parents: 8548b12
>>>> > Author: Benedikt Ritter <britter@apache.org>
>>>> > Authored: Mon May 4 21:26:07 2015 +0200
>>>> > Committer: Benedikt Ritter
>>>> > <britter@apache.org> Committed: Mon May 4
>>>> > 21:26:07 2015 +0200
>>>> >
>>>> > ----------------------------------------------------------------------
>>>> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java   
|
>>>> >  2
>>>> +-
>>>> >  1 file changed, 1 insertion(+), 1 deletion(-)
>>>> > ----------------------------------------------------------------------
>>>> >
>>>> >
>>>> >
>>>> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>> > ----------------------------------------------------------------------
>>>> > diff --git
>>>> >
>>>>
>>>>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>> >
>>>>
>>>>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>> > index 5904469..7a78170 100644 ---
>>>> >
>>>>
>>>>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>> > +++
>>>> >
>>>>
>>>>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
>>>> > ToStringBuilder {
>>>> >                  list.add(e.toString());
>>>> >              }
>>>> >          }
>>>> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
>>>> > +        return list.toArray(new String[list.size()]);
>>>> >      }
>>>>
>>>> What's the benefit of this? Where's the difference by letting
>>>> List.toArray()
>>>> allocate the appropriate array compared to do it on your own?
>>>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no
>>>> additional allocation.
>>>>
>>>
>>> I changed this because my IDE complained about that line of code:
>>>
>>> "Call to 'toArray' with zero-length array argument
>>> 'ArrayUtils.EMPTY_STRING_ARRAY'
>>>
>>> Reports any call to 'toArray' on an object or type or subtype of
>>> java.util.Collection with a zero-length argument. When passing an array
>>> of too small size, the toArray() method has to construct a new array of
>>> the correct size using reflection. This has significantly worse
>>> performance than passing in an array of at least the size of the
>>> collection itself."
>>>
>>> To be honest, I did not do any performance benchmarks to make sure this
>>> is really true.
>>>
>>
>> In any case, the commit message should have been more explanatory. Sorry
>> about that.
>
> Well, that warning is somewhat stupid, if you're using a constant for the
> zero length array. The "worse performance" only occurs if you provide a new
> array instance that is too small.

The worse performance would be in reflection overhead as reflection
may always be used to derive the class for a new array if you are
passing in an empty array. There is no need for any microbenchmarks on
different JVMs if reflection is used at all in the zero length array
method on any JVM. The reflection method will necessarily have more
CPU instructions than a native array allocation of the correct size
which is done in compiled code and JIT'ed without any reflection
calls.

Cheers,

Peter

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎4:09:56 PM | Jörg Schaible <joerg.schaible@gmx.de>Go to full article
Benedikt Ritter wrote:

> 2015-05-05 19:13 GMT+02:00 Jörg Schaible <joerg.schaible@gmx.de>:
> 
>> Benedikt Ritter wrote:
>>
>> > 2015-05-05 17:51 GMT+02:00 Jörg Schaible
>> > <joerg.schaible@swisspost.com>:
>> >
>> >> Hi Benedikt,
>> >>
>> >> Benedikt Ritter wrote:
>> >>
>> >> > 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
>> >> >
>> >> >> Hello Jörg,
>> >> >>
>> >> >> 2015-05-05 8:30 GMT+02:00 Jörg Schaible
>> >> >> <joerg.schaible@swisspost.com>:
>> >> >>
>> >> >>> Hi Benedikt,
>> >> >>>

[snip]

>> >> >>> What's the benefit of this? Where's the difference by letting
>> >> >>> List.toArray()
>> >> >>> allocate the appropriate array compared to do it on your own?
>> >> >>> ArrayUtils.EMPTY_STRING is a constant after all, so there's
no
>> >> >>> additional allocation.
>> >> >>>
>> >> >>
>> >> >> I changed this because my IDE complained about that line of code:
>> >> >>
>> >> >> "Call to 'toArray' with zero-length array argument
>> >> >> 'ArrayUtils.EMPTY_STRING_ARRAY'
>> >> >>
>> >> >> Reports any call to 'toArray' on an object or type or subtype of
>> >> >> java.util.Collection with a zero-length argument. When passing
an
>> >> >> array of too small size, the toArray() method has to construct
a
>> >> >> new array of the correct size using reflection. This has
>> >> >> significantly worse performance than passing in an array of at
>> >> >> least the size of
>> the
>> >> >> collection itself."
>> >> >>
>> >> >> To be honest, I did not do any performance benchmarks to make sure
>> >> >> this is really true.
>> >> >>
>> >> >
>> >> > In any case, the commit message should have been more explanatory.
>> >> > Sorry about that.
>> >>
>> >> Well, that warning is somewhat stupid, if you're using a constant for
>> the
>> >> zero length array. The "worse performance" only occurs if you provide
>> >> a new array instance that is too small.
>> >>
>> >
>> > ... which will always be the case unless the list is empty, or am I
>> > missing something here?
>>
>> Where's the difference in creating a new array of proper size yourself or
>> let the method do it? It's even worse now, because now you create a new
>> instance *even* if the list is empty.
>>
> 
> The difference is, that toArray(T[]) will have to create a new instance
> using reflection every time the
> ReflectionToStringBuilder.toNoNullStringArray(Object[]) method is invoked
> with an non empty array (see ArrayList.toArray(T[]), line 389). The IDE
> report complains that this will be significantly slower then creating a
> new array of the correct type and size using an array constructor. As I
> said, I haven't done any benchmarks. But it seemed logical to me.

OK, agreed. Only a micro benchmark on the different Java runtimes will tell. 
And it might be different for Collection implementations than ArrayList.
Nevertheless, I was just curious about the reasoning.

Cheers,
Jörg


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎12:32:02 PM | Oliver Heger <oliver.heger@oliver-heger.de>Go to full article


Am 05.05.2015 um 19:44 schrieb Benedikt Ritter:
> 2015-05-05 19:13 GMT+02:00 Jörg Schaible <joerg.schaible@gmx.de>:
> 
>> Benedikt Ritter wrote:
>>
>>> 2015-05-05 17:51 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
>>>
>>>> Hi Benedikt,
>>>>
>>>> Benedikt Ritter wrote:
>>>>
>>>>> 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
>>>>>
>>>>>> Hello Jörg,
>>>>>>
>>>>>> 2015-05-05 8:30 GMT+02:00 Jörg Schaible
>>>>>> <joerg.schaible@swisspost.com>:
>>>>>>
>>>>>>> Hi Benedikt,
>>>>>>>
>>>>>>> britter@apache.org wrote:
>>>>>>>
>>>>>>>> Repository: commons-lang
>>>>>>>> Updated Branches:
>>>>>>>>   refs/heads/master 8548b12d8 -> 60b32953a
>>>>>>>>
>>>>>>>>
>>>>>>>> Allocate array of the correct size
>>>>>>>>
>>>>>>>>
>>>>>>>> Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
>>>>>>>> Commit:
>>>>>>>>
>> http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
>>>>>>> Tree:
>>>>>>>> http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953
>>>>>>>> Diff:
>>>>>>>> http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
>>>>>>>>
>>>>>>>> Branch: refs/heads/master
>>>>>>>> Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
>>>>>>>> Parents: 8548b12
>>>>>>>> Author: Benedikt Ritter <britter@apache.org>
>>>>>>>> Authored: Mon May 4 21:26:07 2015 +0200
>>>>>>>> Committer: Benedikt Ritter
>>>>>>>> <britter@apache.org> Committed: Mon May 4
>>>>>>>> 21:26:07 2015 +0200
>>>>>>>>
>>>>>>>>
>>>> ----------------------------------------------------------------------
>>>>>>>>  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>>>>>>  | 2
>>>>>>> +-
>>>>>>>>  1 file changed, 1 insertion(+), 1 deletion(-)
>>>>>>>>
>>>> ----------------------------------------------------------------------
>>>>>>>>
>>>>>>>>
>>>>>>>>
>>>>>>>
>>>>
>> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>>>>>>
>>>> ----------------------------------------------------------------------
>>>>>>>> diff --git
>>>>>>>>
>>>>>>>
>>>>>>>
>>>>
>>>>
>>
>> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>>>>>>
>>>>>>>
>>>>>>>
>>>>
>>>>
>>
>> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>>>>>> index 5904469..7a78170 100644 ---
>>>>>>>>
>>>>>>>
>>>>>>>
>>>>
>>>>
>>
>> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>>>>>> +++
>>>>>>>>
>>>>>>>
>>>>>>>
>>>>
>>>>
>>
>> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>>>>>>> @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder
extends
>>>>>>>> ToStringBuilder {
>>>>>>>>                  list.add(e.toString());
>>>>>>>>              }
>>>>>>>>          }
>>>>>>>> -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
>>>>>>>> +        return list.toArray(new String[list.size()]);
>>>>>>>>      }
>>>>>>>
>>>>>>> What's the benefit of this? Where's the difference by letting
>>>>>>> List.toArray()
>>>>>>> allocate the appropriate array compared to do it on your own?
>>>>>>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no
>>>>>>> additional allocation.
>>>>>>>
>>>>>>
>>>>>> I changed this because my IDE complained about that line of code:
>>>>>>
>>>>>> "Call to 'toArray' with zero-length array argument
>>>>>> 'ArrayUtils.EMPTY_STRING_ARRAY'
>>>>>>
>>>>>> Reports any call to 'toArray' on an object or type or subtype of
>>>>>> java.util.Collection with a zero-length argument. When passing an
>>>>>> array of too small size, the toArray() method has to construct a
new
>>>>>> array of the correct size using reflection. This has significantly
>>>>>> worse performance than passing in an array of at least the size of
>> the
>>>>>> collection itself."
>>>>>>
>>>>>> To be honest, I did not do any performance benchmarks to make sure
>>>>>> this is really true.
>>>>>>
>>>>>
>>>>> In any case, the commit message should have been more explanatory.
>>>>> Sorry about that.
>>>>
>>>> Well, that warning is somewhat stupid, if you're using a constant for
>> the
>>>> zero length array. The "worse performance" only occurs if you provide a
>>>> new array instance that is too small.
>>>>
>>>
>>> ... which will always be the case unless the list is empty, or am I
>>> missing something here?
>>
>> Where's the difference in creating a new array of proper size yourself or
>> let the method do it? It's even worse now, because now you create a new
>> instance *even* if the list is empty.
>>
> 
> The difference is, that toArray(T[]) will have to create a new instance
> using reflection every time the
> ReflectionToStringBuilder.toNoNullStringArray(Object[]) method is invoked
> with an non empty array (see ArrayList.toArray(T[]), line 389). The IDE
> report complains that this will be significantly slower then creating a new
> array of the correct type and size using an array constructor. As I said, I
> haven't done any benchmarks. But it seemed logical to me.
> 
> br,
> Benedikt
> 

ISTR that also Bloch in "Effective Java" recommended the approach of
passing in a zero-length array (which can be a constant as it is
immutable) and let the method create a properly sized array itself.

Oliver

> 
>>
>> Cheers,
>> Jörg
>>
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
>>
> 
> 

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





[SCXML] Mirror or move to git?
‎Yesterday, ‎May ‎05, ‎2015, ‏‎12:27:51 PM | Benedikt Ritter <britter@apache.org>Go to full article
Hello,

there is a request to mirror SCXML to github [1]. Now I'm wondering whether
the majority of the SCXML developers would rather like to the a SVN -> git
migration then just a mirroring.

br,
Benedikt

[1] https://issues.apache.org/jira/browse/SCXML-231

-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎10:44:29 AM | Benedikt Ritter <britter@apache.org>Go to full article
2015-05-05 19:13 GMT+02:00 Jörg Schaible <joerg.schaible@gmx.de>:

> Benedikt Ritter wrote:
>
> > 2015-05-05 17:51 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
> >
> >> Hi Benedikt,
> >>
> >> Benedikt Ritter wrote:
> >>
> >> > 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
> >> >
> >> >> Hello Jörg,
> >> >>
> >> >> 2015-05-05 8:30 GMT+02:00 Jörg Schaible
> >> >> <joerg.schaible@swisspost.com>:
> >> >>
> >> >>> Hi Benedikt,
> >> >>>
> >> >>> britter@apache.org wrote:
> >> >>>
> >> >>> > Repository: commons-lang
> >> >>> > Updated Branches:
> >> >>> >   refs/heads/master 8548b12d8 -> 60b32953a
> >> >>> >
> >> >>> >
> >> >>> > Allocate array of the correct size
> >> >>> >
> >> >>> >
> >> >>> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
> >> >>> > Commit:
> >> >>> >
> http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
> >> >>> Tree:
> >> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953
> >> >>> > Diff:
> >> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
> >> >>> >
> >> >>> > Branch: refs/heads/master
> >> >>> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
> >> >>> > Parents: 8548b12
> >> >>> > Author: Benedikt Ritter <britter@apache.org>
> >> >>> > Authored: Mon May 4 21:26:07 2015 +0200
> >> >>> > Committer: Benedikt Ritter
> >> >>> > <britter@apache.org> Committed: Mon May 4
> >> >>> > 21:26:07 2015 +0200
> >> >>> >
> >> >>> >
> >> ----------------------------------------------------------------------
> >> >>> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >> >>> >  | 2
> >> >>> +-
> >> >>> >  1 file changed, 1 insertion(+), 1 deletion(-)
> >> >>> >
> >> ----------------------------------------------------------------------
> >> >>> >
> >> >>> >
> >> >>> >
> >> >>>
> >>
> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >> >>> >
> >> ----------------------------------------------------------------------
> >> >>> > diff --git
> >> >>> >
> >> >>>
> >> >>>
> >>
> >>
>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >> >>> >
> >> >>>
> >> >>>
> >>
> >>
>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >> >>> > index 5904469..7a78170 100644 ---
> >> >>> >
> >> >>>
> >> >>>
> >>
> >>
>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >> >>> > +++
> >> >>> >
> >> >>>
> >> >>>
> >>
> >>
>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >> >>> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder
extends
> >> >>> > ToStringBuilder {
> >> >>> >                  list.add(e.toString());
> >> >>> >              }
> >> >>> >          }
> >> >>> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
> >> >>> > +        return list.toArray(new String[list.size()]);
> >> >>> >      }
> >> >>>
> >> >>> What's the benefit of this? Where's the difference by letting
> >> >>> List.toArray()
> >> >>> allocate the appropriate array compared to do it on your own?
> >> >>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no
> >> >>> additional allocation.
> >> >>>
> >> >>
> >> >> I changed this because my IDE complained about that line of code:
> >> >>
> >> >> "Call to 'toArray' with zero-length array argument
> >> >> 'ArrayUtils.EMPTY_STRING_ARRAY'
> >> >>
> >> >> Reports any call to 'toArray' on an object or type or subtype of
> >> >> java.util.Collection with a zero-length argument. When passing an
> >> >> array of too small size, the toArray() method has to construct a new
> >> >> array of the correct size using reflection. This has significantly
> >> >> worse performance than passing in an array of at least the size of
> the
> >> >> collection itself."
> >> >>
> >> >> To be honest, I did not do any performance benchmarks to make sure
> >> >> this is really true.
> >> >>
> >> >
> >> > In any case, the commit message should have been more explanatory.
> >> > Sorry about that.
> >>
> >> Well, that warning is somewhat stupid, if you're using a constant for
> the
> >> zero length array. The "worse performance" only occurs if you provide a
> >> new array instance that is too small.
> >>
> >
> > ... which will always be the case unless the list is empty, or am I
> > missing something here?
>
> Where's the difference in creating a new array of proper size yourself or
> let the method do it? It's even worse now, because now you create a new
> instance *even* if the list is empty.
>

The difference is, that toArray(T[]) will have to create a new instance
using reflection every time the
ReflectionToStringBuilder.toNoNullStringArray(Object[]) method is invoked
with an non empty array (see ArrayList.toArray(T[]), line 389). The IDE
report complains that this will be significantly slower then creating a new
array of the correct type and size using an array constructor. As I said, I
haven't done any benchmarks. But it seemed logical to me.

br,
Benedikt


>
> Cheers,
> Jörg
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎10:13:37 AM | Jörg Schaible <joerg.schaible@gmx.de>Go to full article
Benedikt Ritter wrote:

> 2015-05-05 17:51 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
> 
>> Hi Benedikt,
>>
>> Benedikt Ritter wrote:
>>
>> > 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
>> >
>> >> Hello Jörg,
>> >>
>> >> 2015-05-05 8:30 GMT+02:00 Jörg Schaible
>> >> <joerg.schaible@swisspost.com>:
>> >>
>> >>> Hi Benedikt,
>> >>>
>> >>> britter@apache.org wrote:
>> >>>
>> >>> > Repository: commons-lang
>> >>> > Updated Branches:
>> >>> >   refs/heads/master 8548b12d8 -> 60b32953a
>> >>> >
>> >>> >
>> >>> > Allocate array of the correct size
>> >>> >
>> >>> >
>> >>> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
>> >>> > Commit:
>> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
>> >>> Tree:
>> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953
>> >>> > Diff:
>> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
>> >>> >
>> >>> > Branch: refs/heads/master
>> >>> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
>> >>> > Parents: 8548b12
>> >>> > Author: Benedikt Ritter <britter@apache.org>
>> >>> > Authored: Mon May 4 21:26:07 2015 +0200
>> >>> > Committer: Benedikt Ritter
>> >>> > <britter@apache.org> Committed: Mon May 4
>> >>> > 21:26:07 2015 +0200
>> >>> >
>> >>> >
>> ----------------------------------------------------------------------
>> >>> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java
  
>> >>> >  | 2
>> >>> +-
>> >>> >  1 file changed, 1 insertion(+), 1 deletion(-)
>> >>> >
>> ----------------------------------------------------------------------
>> >>> >
>> >>> >
>> >>> >
>> >>>
>> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> >>> >
>> ----------------------------------------------------------------------
>> >>> > diff --git
>> >>> >
>> >>>
>> >>>
>>
>> 
a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> >>> >
>> >>>
>> >>>
>>
>> 
b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> >>> > index 5904469..7a78170 100644 ---
>> >>> >
>> >>>
>> >>>
>>
>> 
a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> >>> > +++
>> >>> >
>> >>>
>> >>>
>>
>> 
b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> >>> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
>> >>> > ToStringBuilder {
>> >>> >                  list.add(e.toString());
>> >>> >              }
>> >>> >          }
>> >>> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
>> >>> > +        return list.toArray(new String[list.size()]);
>> >>> >      }
>> >>>
>> >>> What's the benefit of this? Where's the difference by letting
>> >>> List.toArray()
>> >>> allocate the appropriate array compared to do it on your own?
>> >>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no
>> >>> additional allocation.
>> >>>
>> >>
>> >> I changed this because my IDE complained about that line of code:
>> >>
>> >> "Call to 'toArray' with zero-length array argument
>> >> 'ArrayUtils.EMPTY_STRING_ARRAY'
>> >>
>> >> Reports any call to 'toArray' on an object or type or subtype of
>> >> java.util.Collection with a zero-length argument. When passing an
>> >> array of too small size, the toArray() method has to construct a new
>> >> array of the correct size using reflection. This has significantly
>> >> worse performance than passing in an array of at least the size of the
>> >> collection itself."
>> >>
>> >> To be honest, I did not do any performance benchmarks to make sure
>> >> this is really true.
>> >>
>> >
>> > In any case, the commit message should have been more explanatory.
>> > Sorry about that.
>>
>> Well, that warning is somewhat stupid, if you're using a constant for the
>> zero length array. The "worse performance" only occurs if you provide a
>> new array instance that is too small.
>>
> 
> ... which will always be the case unless the list is empty, or am I
> missing something here?

Where's the difference in creating a new array of proper size yourself or 
let the method do it? It's even worse now, because now you create a new 
instance *even* if the list is empty.

Cheers,
Jörg


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎10:07:20 AM | Benedikt Ritter <britter@apache.org>Go to full article
2015-05-05 17:51 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:

> Hi Benedikt,
>
> Benedikt Ritter wrote:
>
> > 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
> >
> >> Hello Jörg,
> >>
> >> 2015-05-05 8:30 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
> >>
> >>> Hi Benedikt,
> >>>
> >>> britter@apache.org wrote:
> >>>
> >>> > Repository: commons-lang
> >>> > Updated Branches:
> >>> >   refs/heads/master 8548b12d8 -> 60b32953a
> >>> >
> >>> >
> >>> > Allocate array of the correct size
> >>> >
> >>> >
> >>> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
> >>> > Commit:
> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
> >>> Tree:
> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953
> >>> > Diff:
> >>> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
> >>> >
> >>> > Branch: refs/heads/master
> >>> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
> >>> > Parents: 8548b12
> >>> > Author: Benedikt Ritter <britter@apache.org>
> >>> > Authored: Mon May 4 21:26:07 2015 +0200
> >>> > Committer: Benedikt Ritter
> >>> > <britter@apache.org> Committed: Mon May 4
> >>> > 21:26:07 2015 +0200
> >>> >
> >>> >
> ----------------------------------------------------------------------
> >>> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java  
 |
> >>> >  2
> >>> +-
> >>> >  1 file changed, 1 insertion(+), 1 deletion(-)
> >>> >
> ----------------------------------------------------------------------
> >>> >
> >>> >
> >>> >
> >>>
> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >>> >
> ----------------------------------------------------------------------
> >>> > diff --git
> >>> >
> >>>
> >>>
>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >>> >
> >>>
> >>>
>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >>> > index 5904469..7a78170 100644 ---
> >>> >
> >>>
> >>>
>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >>> > +++
> >>> >
> >>>
> >>>
>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >>> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
> >>> > ToStringBuilder {
> >>> >                  list.add(e.toString());
> >>> >              }
> >>> >          }
> >>> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
> >>> > +        return list.toArray(new String[list.size()]);
> >>> >      }
> >>>
> >>> What's the benefit of this? Where's the difference by letting
> >>> List.toArray()
> >>> allocate the appropriate array compared to do it on your own?
> >>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no
> >>> additional allocation.
> >>>
> >>
> >> I changed this because my IDE complained about that line of code:
> >>
> >> "Call to 'toArray' with zero-length array argument
> >> 'ArrayUtils.EMPTY_STRING_ARRAY'
> >>
> >> Reports any call to 'toArray' on an object or type or subtype of
> >> java.util.Collection with a zero-length argument. When passing an array
> >> of too small size, the toArray() method has to construct a new array of
> >> the correct size using reflection. This has significantly worse
> >> performance than passing in an array of at least the size of the
> >> collection itself."
> >>
> >> To be honest, I did not do any performance benchmarks to make sure this
> >> is really true.
> >>
> >
> > In any case, the commit message should have been more explanatory. Sorry
> > about that.
>
> Well, that warning is somewhat stupid, if you're using a constant for the
> zero length array. The "worse performance" only occurs if you provide a new
> array instance that is too small.
>

... which will always be the case unless the list is empty, or am I missing
something here?

Benedikt


>
> Cheers,
> Jörg
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎8:51:56 AM | Jörg Schaible <joerg.schaible@swisspost.com>Go to full article
Hi Benedikt,

Benedikt Ritter wrote:

> 2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:
> 
>> Hello Jörg,
>>
>> 2015-05-05 8:30 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
>>
>>> Hi Benedikt,
>>>
>>> britter@apache.org wrote:
>>>
>>> > Repository: commons-lang
>>> > Updated Branches:
>>> >   refs/heads/master 8548b12d8 -> 60b32953a
>>> >
>>> >
>>> > Allocate array of the correct size
>>> >
>>> >
>>> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
>>> > Commit:
>>> > http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
>>> Tree:
>>> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953
>>> > Diff:
>>> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
>>> >
>>> > Branch: refs/heads/master
>>> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
>>> > Parents: 8548b12
>>> > Author: Benedikt Ritter <britter@apache.org>
>>> > Authored: Mon May 4 21:26:07 2015 +0200
>>> > Committer: Benedikt Ritter
>>> > <britter@apache.org> Committed: Mon May 4
>>> > 21:26:07 2015 +0200
>>> >
>>> > ----------------------------------------------------------------------
>>> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java    |
>>> >  2
>>> +-
>>> >  1 file changed, 1 insertion(+), 1 deletion(-)
>>> > ----------------------------------------------------------------------
>>> >
>>> >
>>> >
>>> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>> > ----------------------------------------------------------------------
>>> > diff --git
>>> >
>>>
>>> 
a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>> >
>>>
>>> 
b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>> > index 5904469..7a78170 100644 ---
>>> >
>>>
>>> 
a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>> > +++
>>> >
>>>
>>> 
b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>>> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
>>> > ToStringBuilder {
>>> >                  list.add(e.toString());
>>> >              }
>>> >          }
>>> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
>>> > +        return list.toArray(new String[list.size()]);
>>> >      }
>>>
>>> What's the benefit of this? Where's the difference by letting
>>> List.toArray()
>>> allocate the appropriate array compared to do it on your own?
>>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no
>>> additional allocation.
>>>
>>
>> I changed this because my IDE complained about that line of code:
>>
>> "Call to 'toArray' with zero-length array argument
>> 'ArrayUtils.EMPTY_STRING_ARRAY'
>>
>> Reports any call to 'toArray' on an object or type or subtype of
>> java.util.Collection with a zero-length argument. When passing an array
>> of too small size, the toArray() method has to construct a new array of
>> the correct size using reflection. This has significantly worse
>> performance than passing in an array of at least the size of the
>> collection itself."
>>
>> To be honest, I did not do any performance benchmarks to make sure this
>> is really true.
>>
> 
> In any case, the commit message should have been more explanatory. Sorry
> about that.

Well, that warning is somewhat stupid, if you're using a constant for the 
zero length array. The "worse performance" only occurs if you provide a new 
array instance that is too small.

Cheers,
Jörg


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Yesterday, ‎May ‎05, ‎2015, ‏‎7:39:42 AM | Luc Maisonobe <luc@spaceroots.org>Go to full article
Le 05/05/2015 10:51, Luc Maisonobe a écrit :
> Le 04/05/2015 23:30, Thomas Neidhart a écrit :
>> On 05/04/2015 09:31 PM, Luc Maisonobe wrote:
>>> Le 04/05/2015 19:13, sebb a écrit :
>>>> On 4 May 2015 at 16:43, luc <luc@spaceroots.org> wrote:
>>>>> Le 2015-05-04 14:48, Thomas Neidhart a écrit :
>>>>>>
>>>>>> Problem still remains, see here:
>>>>>> https://builds.apache.org/job/Commons%20Math%20H10/49/console
>>>>>>
>>>>>> The test failures only occur on the following slaves it seems:
>>>>>>
>>>>>>  * H10
>>>>>>  * ubuntu-2
>>>>>
>>>>>
>>>>> This looks like what happened a few months ago then.
>>>>>
>>>>> I will try to look at it. As we are only able to reproduce this on this
>>>>> build system, I guess this implies committing lots of small changes (with
>>>>> System.out.println and the like) and triggering a custom buid from the
>>>>> Jenkins configuration above. I can do that, but wonder if there is another
>>>>> way without committing the tests in the master branch. Can we set up
an
>>>>> h10-builds branch that would be used by the job above and would be ignored
>>>>> by the regular job ?
>>>>
>>>> Yes, just configure the Jenkins job to use the appropriate branch.
>>>> It is currently using
>>>>
>>>> */master
>>>
>>> I explored the project and did not find any way to change the build.
>>> Looking at the REST API explanation page, I found a reference to
>>> JOBNAME/config.xml. However, if I try this URL I get an access denied
>>> failure with message "luc is missing the Job/ExtendedRead permission"
>>> and if I try the createItem URL I get an access denied failure with
>>> message "luc is missing the Job/Create permission".
>>>
>>> Could someone give me karma for changing these elements on the Commons
>>> Math H10 job?
>>
>> I changed the job configuration to use the h10-builds branch and started
>> a new build already.
> 
> OK, thanks.
> It seemed to work up to commit 96903ec I made this morning, but not
> for the two next ones (67da172 and 14f24f2). They were not picked up
> even after wating a long time and so each time I trigger a new build it
> is still done from 96903ec.

I don't know why, but it started working again in the afternoon and I
could do a few tests.
Then it seemded to get stuck on a commit. I tried to force it reload
its work space by cleaning it. I was allowed to do it but now the build
does not work anymore. I probably not only cleaned old stuff but also
completely wiped the directory ... I still cannot change anything else
on the job.

Gary, could you add me to the hudson-jobadmin group (looking at
<http://wiki.apache.org/general/Jenkins> it seems the way to get access).

I am sorry.
Luc

> 
> Luc
> 
>>
>> I am not sure that I have the credentials to give you the permissions.
>>
>> Thomas
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
>>
> 
> 
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
> 
> 
> 


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Yesterday, ‎May ‎05, ‎2015, ‏‎7:22:49 AM | Sergio Fernández <sergio.fernandez@redlink.co>Go to full article
Hi Brian,

On Tue, May 5, 2015 at 3:54 PM, Brian Fox <brianf@sonatype.com> wrote:

> As there is no ldap group for the podling, can you please file an infra
> jira with the user ids to be added?


The missing LDAP group is weird... anyway, all details at jira:
https://issues.apache.org/jira/browse/INFRA-9600
Thanks!





> On Tue, May 5, 2015 at 9:53 AM, Sergio Fernández <wikier@apache.org>
> wrote:
>
> > Hi,
> >
> > the CommonsRDF podling is preparing the fist incubating release, and the
> > PPMC members need to be granted with access to deploy maven artifacts
> > to org.apache.commons groupId in our nexus.
> >
> > The Commons PMC is aware of such request, but if you have any question
> > please feel free to ask.
> >
> > Thanks in advance.
> >
> > Cheers,
> >
> >
> > On Tue, May 5, 2015 at 2:48 AM, Phil Steitz <phil.steitz@gmail.com>
> wrote:
> >
> >> Try mailing repository@
> >>
> >>
> >>
> >> > On May 4, 2015, at 12:32 PM, Benedikt Ritter <britter@apache.org>
> >> wrote:
> >> >
> >> > 2015-05-04 18:46 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:
> >> >
> >> >> On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com>
> >> >> wrote:
> >> >>
> >> >>>> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
> >> >>>> On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <
> wikier@apache.org>
> >> >>> wrote:
> >> >>>>> we're discussing our first incubating release, and we came
to the
> >> >> issue
> >> >>>>> that we are not grant with permissions to deploy maven
artifacts
> to
> >> >> the
> >> >>>>> org.apache.commons groupId [1].
> >> >>>> Why org.apache.commons, and not, say, org.apache.commons.rdf?
The
> >> >>>> former seems overly broad to me.
> >> >>>
> >> >>> Could be we should have gone that way years ago when we moved to
> >> >>> org.apache.commons:commons-foo; but that ship has sailed, so I
think
> >> >>> its best to stay consistent with the rest of the components and
> >> >>> proceed as proposed.
> >> >>
> >> >> Some rambling thoughts (tm):
> >> >>
> >> >> I like to 'fix' things too but I was on the fence about this one
> until
> >> now.
> >> >> Yes, there is a redundancy because the substring 'commons' is in the
> >> >> AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID,
so
> >> of
> >> >> course we have o.a.commons, that's a must. The AID is the component,
> >> which
> >> >> I always call Commons Foo, and sometimes Apache Commons Foo when I
> >> want to
> >> >> make it clear to folks (at work for example) that I am talking about
> >> >> software hosted at Apache. If I were to talk within Apache about Foo,
> >> I bet
> >> >> some folks would not know what Foo is or where it lives. If I say
> >> 'Commons
> >> >> Foo' then it's obvious (I hope). That is how I justify to myself the
> >> >> commons in the AID.
> >> >>
> >> >> FWIW: Over at Log4j, we have "log4j-" as the prefix for all module
> >> names,
> >> >> and no one seems to mind.
> >> >
> >> > I'm all for consistency. VFS does it this way, Weaver does it this
> way,
> >> > Chain does it this way. And GID matching TLP ID makes sense as well.
> >> >
> >> > Who can grant the necessary permissions?
> >> >
> >> >
> >> >>
> >> >> Gary
> >> >>
> >> >>
> >> >>>
> >> >>> Phil
> >> >>>>
> >> >>>> Jochen
> >> >>>>
> >> >>>>
> ---------------------------------------------------------------------
> >> >>>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >> >>>> For additional commands, e-mail: dev-help@commons.apache.org
> >> >>>
> >> >>>
> >> >>>
> ---------------------------------------------------------------------
> >> >>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >> >>> For additional commands, e-mail: dev-help@commons.apache.org
> >> >>
> >> >>
> >> >> --
> >> >> E-Mail: garydgregory@gmail.com | ggregory@apache.org
> >> >> Java Persistence with Hibernate, Second Edition
> >> >> <http://www.manning.com/bauer3/>
> >> >> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> >> >> Spring Batch in Action <http://www.manning.com/templier/>
> >> >> Blog: http://garygregory.wordpress.com
> >> >> Home: http://garygregory.com/
> >> >> Tweet! http://twitter.com/GaryGregory
> >> >
> >> >
> >> >
> >> > --
> >> > http://people.apache.org/~britter/
> >> > http://www.systemoutprintln.de/
> >> > http://twitter.com/BenediktRitter
> >> > http://github.com/britter
> >>
> >> ---------------------------------------------------------------------
> >> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >> For additional commands, e-mail: dev-help@commons.apache.org
> >>
> >>
> >
> >
> > --
> > Sergio Fernández
> > Partner Technology Manager
> > Redlink GmbH
> > m: +43 6602747925
> > e: sergio.fernandez@redlink.co
> > w: http://redlink.co
> >
>



-- 
Sergio Fernández
Partner Technology Manager
Redlink GmbH
m: +43 6602747925
e: sergio.fernandez@redlink.co
w: http://redlink.co




Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Yesterday, ‎May ‎05, ‎2015, ‏‎6:54:26 AM | Brian Fox <brianf@sonatype.com>Go to full article
As there is no ldap group for the podling, can you please file an infra
jira with the user ids to be added?

On Tue, May 5, 2015 at 9:53 AM, Sergio Fernández <wikier@apache.org> wrote:

> Hi,
>
> the CommonsRDF podling is preparing the fist incubating release, and the
> PPMC members need to be granted with access to deploy maven artifacts
> to org.apache.commons groupId in our nexus.
>
> The Commons PMC is aware of such request, but if you have any question
> please feel free to ask.
>
> Thanks in advance.
>
> Cheers,
>
>
> On Tue, May 5, 2015 at 2:48 AM, Phil Steitz <phil.steitz@gmail.com> wrote:
>
>> Try mailing repository@
>>
>>
>>
>> > On May 4, 2015, at 12:32 PM, Benedikt Ritter <britter@apache.org>
>> wrote:
>> >
>> > 2015-05-04 18:46 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:
>> >
>> >> On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com>
>> >> wrote:
>> >>
>> >>>> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
>> >>>> On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
>> >>> wrote:
>> >>>>> we're discussing our first incubating release, and we came to
the
>> >> issue
>> >>>>> that we are not grant with permissions to deploy maven artifacts
to
>> >> the
>> >>>>> org.apache.commons groupId [1].
>> >>>> Why org.apache.commons, and not, say, org.apache.commons.rdf? The
>> >>>> former seems overly broad to me.
>> >>>
>> >>> Could be we should have gone that way years ago when we moved to
>> >>> org.apache.commons:commons-foo; but that ship has sailed, so I think
>> >>> its best to stay consistent with the rest of the components and
>> >>> proceed as proposed.
>> >>
>> >> Some rambling thoughts (tm):
>> >>
>> >> I like to 'fix' things too but I was on the fence about this one until
>> now.
>> >> Yes, there is a redundancy because the substring 'commons' is in the
>> >> AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID, so
>> of
>> >> course we have o.a.commons, that's a must. The AID is the component,
>> which
>> >> I always call Commons Foo, and sometimes Apache Commons Foo when I
>> want to
>> >> make it clear to folks (at work for example) that I am talking about
>> >> software hosted at Apache. If I were to talk within Apache about Foo,
>> I bet
>> >> some folks would not know what Foo is or where it lives. If I say
>> 'Commons
>> >> Foo' then it's obvious (I hope). That is how I justify to myself the
>> >> commons in the AID.
>> >>
>> >> FWIW: Over at Log4j, we have "log4j-" as the prefix for all module
>> names,
>> >> and no one seems to mind.
>> >
>> > I'm all for consistency. VFS does it this way, Weaver does it this way,
>> > Chain does it this way. And GID matching TLP ID makes sense as well.
>> >
>> > Who can grant the necessary permissions?
>> >
>> >
>> >>
>> >> Gary
>> >>
>> >>
>> >>>
>> >>> Phil
>> >>>>
>> >>>> Jochen
>> >>>>
>> >>>> ---------------------------------------------------------------------
>> >>>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> >>>> For additional commands, e-mail: dev-help@commons.apache.org
>> >>>
>> >>>
>> >>> ---------------------------------------------------------------------
>> >>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> >>> For additional commands, e-mail: dev-help@commons.apache.org
>> >>
>> >>
>> >> --
>> >> E-Mail: garydgregory@gmail.com | ggregory@apache.org
>> >> Java Persistence with Hibernate, Second Edition
>> >> <http://www.manning.com/bauer3/>
>> >> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
>> >> Spring Batch in Action <http://www.manning.com/templier/>
>> >> Blog: http://garygregory.wordpress.com
>> >> Home: http://garygregory.com/
>> >> Tweet! http://twitter.com/GaryGregory
>> >
>> >
>> >
>> > --
>> > http://people.apache.org/~britter/
>> > http://www.systemoutprintln.de/
>> > http://twitter.com/BenediktRitter
>> > http://github.com/britter
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
>>
>
>
> --
> Sergio Fernández
> Partner Technology Manager
> Redlink GmbH
> m: +43 6602747925
> e: sergio.fernandez@redlink.co
> w: http://redlink.co
>




Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Yesterday, ‎May ‎05, ‎2015, ‏‎6:53:01 AM | Sergio Fernández <wikier@apache.org>Go to full article
Hi,

the CommonsRDF podling is preparing the fist incubating release, and the
PPMC members need to be granted with access to deploy maven artifacts
to org.apache.commons groupId in our nexus.

The Commons PMC is aware of such request, but if you have any question
please feel free to ask.

Thanks in advance.

Cheers,


On Tue, May 5, 2015 at 2:48 AM, Phil Steitz <phil.steitz@gmail.com> wrote:

> Try mailing repository@
>
>
>
> > On May 4, 2015, at 12:32 PM, Benedikt Ritter <britter@apache.org> wrote:
> >
> > 2015-05-04 18:46 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:
> >
> >> On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com>
> >> wrote:
> >>
> >>>> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
> >>>> On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
> >>> wrote:
> >>>>> we're discussing our first incubating release, and we came to the
> >> issue
> >>>>> that we are not grant with permissions to deploy maven artifacts
to
> >> the
> >>>>> org.apache.commons groupId [1].
> >>>> Why org.apache.commons, and not, say, org.apache.commons.rdf? The
> >>>> former seems overly broad to me.
> >>>
> >>> Could be we should have gone that way years ago when we moved to
> >>> org.apache.commons:commons-foo; but that ship has sailed, so I think
> >>> its best to stay consistent with the rest of the components and
> >>> proceed as proposed.
> >>
> >> Some rambling thoughts (tm):
> >>
> >> I like to 'fix' things too but I was on the fence about this one until
> now.
> >> Yes, there is a redundancy because the substring 'commons' is in the
> >> AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID, so of
> >> course we have o.a.commons, that's a must. The AID is the component,
> which
> >> I always call Commons Foo, and sometimes Apache Commons Foo when I want
> to
> >> make it clear to folks (at work for example) that I am talking about
> >> software hosted at Apache. If I were to talk within Apache about Foo, I
> bet
> >> some folks would not know what Foo is or where it lives. If I say
> 'Commons
> >> Foo' then it's obvious (I hope). That is how I justify to myself the
> >> commons in the AID.
> >>
> >> FWIW: Over at Log4j, we have "log4j-" as the prefix for all module
> names,
> >> and no one seems to mind.
> >
> > I'm all for consistency. VFS does it this way, Weaver does it this way,
> > Chain does it this way. And GID matching TLP ID makes sense as well.
> >
> > Who can grant the necessary permissions?
> >
> >
> >>
> >> Gary
> >>
> >>
> >>>
> >>> Phil
> >>>>
> >>>> Jochen
> >>>>
> >>>> ---------------------------------------------------------------------
> >>>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >>>> For additional commands, e-mail: dev-help@commons.apache.org
> >>>
> >>>
> >>> ---------------------------------------------------------------------
> >>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >>> For additional commands, e-mail: dev-help@commons.apache.org
> >>
> >>
> >> --
> >> E-Mail: garydgregory@gmail.com | ggregory@apache.org
> >> Java Persistence with Hibernate, Second Edition
> >> <http://www.manning.com/bauer3/>
> >> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> >> Spring Batch in Action <http://www.manning.com/templier/>
> >> Blog: http://garygregory.wordpress.com
> >> Home: http://garygregory.com/
> >> Tweet! http://twitter.com/GaryGregory
> >
> >
> >
> > --
> > http://people.apache.org/~britter/
> > http://www.systemoutprintln.de/
> > http://twitter.com/BenediktRitter
> > http://github.com/britter
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
Sergio Fernández
Partner Technology Manager
Redlink GmbH
m: +43 6602747925
e: sergio.fernandez@redlink.co
w: http://redlink.co




Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎5:54:23 AM | Benedikt Ritter <britter@apache.org>Go to full article
2015-05-05 14:52 GMT+02:00 Benedikt Ritter <britter@apache.org>:

> Hello Jörg,
>
> 2015-05-05 8:30 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:
>
>> Hi Benedikt,
>>
>> britter@apache.org wrote:
>>
>> > Repository: commons-lang
>> > Updated Branches:
>> >   refs/heads/master 8548b12d8 -> 60b32953a
>> >
>> >
>> > Allocate array of the correct size
>> >
>> >
>> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
>> > Commit:
>> > http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
>> Tree:
>> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953 Diff:
>> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
>> >
>> > Branch: refs/heads/master
>> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
>> > Parents: 8548b12
>> > Author: Benedikt Ritter <britter@apache.org>
>> > Authored: Mon May 4 21:26:07 2015 +0200
>> > Committer: Benedikt Ritter
>> > <britter@apache.org> Committed: Mon May 4
>> > 21:26:07 2015 +0200
>> >
>> > ----------------------------------------------------------------------
>> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java    | 2
>> +-
>> >  1 file changed, 1 insertion(+), 1 deletion(-)
>> > ----------------------------------------------------------------------
>> >
>> >
>> >
>> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> > ----------------------------------------------------------------------
>> > diff --git
>> >
>>
>> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> >
>>
>> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> > index 5904469..7a78170 100644 ---
>> >
>>
>> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> > +++
>> >
>>
>> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
>> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
>> > ToStringBuilder {
>> >                  list.add(e.toString());
>> >              }
>> >          }
>> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
>> > +        return list.toArray(new String[list.size()]);
>> >      }
>>
>> What's the benefit of this? Where's the difference by letting
>> List.toArray()
>> allocate the appropriate array compared to do it on your own?
>> ArrayUtils.EMPTY_STRING is a constant after all, so there's no additional
>> allocation.
>>
>
> I changed this because my IDE complained about that line of code:
>
> "Call to 'toArray' with zero-length array argument
> 'ArrayUtils.EMPTY_STRING_ARRAY'
>
> Reports any call to 'toArray' on an object or type or subtype of
> java.util.Collection with a zero-length argument. When passing an array of
> too small size, the toArray() method has to construct a new array of the
> correct size using reflection. This has significantly worse performance
> than passing in an array of at least the size of the collection itself."
>
> To be honest, I did not do any performance benchmarks to make sure this is
> really true.
>

In any case, the commit message should have been more explanatory. Sorry
about that.


>
> Benedikt
>
>
>>
>> - Jörg
>>
>>
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
>>
>
>
> --
> http://people.apache.org/~britter/
> http://www.systemoutprintln.de/
> http://twitter.com/BenediktRitter
> http://github.com/britter
>



-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [lang] Allocate array of the correct size
‎Yesterday, ‎May ‎05, ‎2015, ‏‎5:52:49 AM | Benedikt Ritter <britter@apache.org>Go to full article
Hello Jörg,

2015-05-05 8:30 GMT+02:00 Jörg Schaible <joerg.schaible@swisspost.com>:

> Hi Benedikt,
>
> britter@apache.org wrote:
>
> > Repository: commons-lang
> > Updated Branches:
> >   refs/heads/master 8548b12d8 -> 60b32953a
> >
> >
> > Allocate array of the correct size
> >
> >
> > Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
> > Commit:
> > http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953
> Tree:
> > http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953 Diff:
> > http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
> >
> > Branch: refs/heads/master
> > Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
> > Parents: 8548b12
> > Author: Benedikt Ritter <britter@apache.org>
> > Authored: Mon May 4 21:26:07 2015 +0200
> > Committer: Benedikt Ritter
> > <britter@apache.org> Committed: Mon May 4
> > 21:26:07 2015 +0200
> >
> > ----------------------------------------------------------------------
> >  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java    | 2
> +-
> >  1 file changed, 1 insertion(+), 1 deletion(-)
> > ----------------------------------------------------------------------
> >
> >
> >
> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> > ----------------------------------------------------------------------
> > diff --git
> >
>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> >
>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> > index 5904469..7a78170 100644 ---
> >
>
> a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> > +++
> >
>
> b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> > @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
> > ToStringBuilder {
> >                  list.add(e.toString());
> >              }
> >          }
> > -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
> > +        return list.toArray(new String[list.size()]);
> >      }
>
> What's the benefit of this? Where's the difference by letting
> List.toArray()
> allocate the appropriate array compared to do it on your own?
> ArrayUtils.EMPTY_STRING is a constant after all, so there's no additional
> allocation.
>

I changed this because my IDE complained about that line of code:

"Call to 'toArray' with zero-length array argument
'ArrayUtils.EMPTY_STRING_ARRAY'

Reports any call to 'toArray' on an object or type or subtype of
java.util.Collection with a zero-length argument. When passing an array of
too small size, the toArray() method has to construct a new array of the
correct size using reflection. This has significantly worse performance
than passing in an array of at least the size of the collection itself."

To be honest, I did not do any performance benchmarks to make sure this is
really true.

Benedikt


>
> - Jörg
>
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Yesterday, ‎May ‎05, ‎2015, ‏‎1:51:54 AM | Luc Maisonobe <luc@spaceroots.org>Go to full article
Le 04/05/2015 23:30, Thomas Neidhart a écrit :
> On 05/04/2015 09:31 PM, Luc Maisonobe wrote:
>> Le 04/05/2015 19:13, sebb a écrit :
>>> On 4 May 2015 at 16:43, luc <luc@spaceroots.org> wrote:
>>>> Le 2015-05-04 14:48, Thomas Neidhart a écrit :
>>>>>
>>>>> Problem still remains, see here:
>>>>> https://builds.apache.org/job/Commons%20Math%20H10/49/console
>>>>>
>>>>> The test failures only occur on the following slaves it seems:
>>>>>
>>>>>  * H10
>>>>>  * ubuntu-2
>>>>
>>>>
>>>> This looks like what happened a few months ago then.
>>>>
>>>> I will try to look at it. As we are only able to reproduce this on this
>>>> build system, I guess this implies committing lots of small changes (with
>>>> System.out.println and the like) and triggering a custom buid from the
>>>> Jenkins configuration above. I can do that, but wonder if there is another
>>>> way without committing the tests in the master branch. Can we set up an
>>>> h10-builds branch that would be used by the job above and would be ignored
>>>> by the regular job ?
>>>
>>> Yes, just configure the Jenkins job to use the appropriate branch.
>>> It is currently using
>>>
>>> */master
>>
>> I explored the project and did not find any way to change the build.
>> Looking at the REST API explanation page, I found a reference to
>> JOBNAME/config.xml. However, if I try this URL I get an access denied
>> failure with message "luc is missing the Job/ExtendedRead permission"
>> and if I try the createItem URL I get an access denied failure with
>> message "luc is missing the Job/Create permission".
>>
>> Could someone give me karma for changing these elements on the Commons
>> Math H10 job?
> 
> I changed the job configuration to use the h10-builds branch and started
> a new build already.

OK, thanks.
It seemed to work up to commit 96903ec I made this morning, but not
for the two next ones (67da172 and 14f24f2). They were not picked up
even after wating a long time and so each time I trigger a new build it
is still done from 96903ec.

Luc

> 
> I am not sure that I have the credentials to give you the permissions.
> 
> Thomas
> 
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
> 
> 


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Yesterday, ‎May ‎05, ‎2015, ‏‎12:57:01 AM | Thomas Neidhart <thomas.neidhart@gmail.com>Go to full article
In fact we do not need real physical / remote access to the machine. It
would be sufficient if somebody can install the hotspot disassembler plugin
for the Java runtime:

Could not load hsdis-i386.so; library not loadable; PrintAssembly is
disabled

Then the assembly for the method in question will be present in the console
output.

Thomas

On Mon, May 4, 2015 at 10:16 PM, Thomas Neidhart <thomas.neidhart@gmail.com>
wrote:

> On 05/04/2015 05:43 PM, luc wrote:
> > Le 2015-05-04 14:48, Thomas Neidhart a écrit :
> >> Problem still remains, see here:
> >> https://builds.apache.org/job/Commons%20Math%20H10/49/console
> >>
> >> The test failures only occur on the following slaves it seems:
> >>
> >>  * H10
> >>  * ubuntu-2
> >
> > This looks like what happened a few months ago then.
> >
> > I will try to look at it. As we are only able to reproduce this on this
> > build system, I guess this implies committing lots of small changes (with
> > System.out.println and the like) and triggering a custom buid from the
> > Jenkins configuration above. I can do that, but wonder if there is
> another
> > way without committing the tests in the master branch. Can we set up an
> > h10-builds branch that would be used by the job above and would be
> ignored
> > by the regular job ?
> >
> > If I remember well, when the previous problem arose even putting simple
> > print
> > statements in the code made the bug appear and disappear without control.
>
> yes indeed. I tried different ways to figure out what exact statement
> went wrong due to JIT compilation (e.g. with System.out statement), but
> this already alters the compilation itself thus making it
> difficult/impossible to track down the problem like that.
>
> The advantage we had previously was that we had a good idea which
> statement went wrong (it was a cast). This time, I do not yet have an
> idea, so I think the only way to track this down would be to get
> physical access to the machine and analyze the resulting JIT assembly.
>
> You can see in the console output above that I enabled JIT debugging and
> that the method in question was optimized 2 times.
>
> Thomas
>




Re: [lang] Allocate array of the correct size
‎Monday, ‎May ‎04, ‎2015, ‏‎11:30:42 PM | Jörg Schaible <joerg.schaible@swisspost.com>Go to full article
Hi Benedikt,

britter@apache.org wrote:

> Repository: commons-lang
> Updated Branches:
>   refs/heads/master 8548b12d8 -> 60b32953a
> 
> 
> Allocate array of the correct size
> 
> 
> Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
> Commit:
> http://git-wip-us.apache.org/repos/asf/commons-lang/commit/60b32953 Tree:
> http://git-wip-us.apache.org/repos/asf/commons-lang/tree/60b32953 Diff:
> http://git-wip-us.apache.org/repos/asf/commons-lang/diff/60b32953
> 
> Branch: refs/heads/master
> Commit: 60b32953a968e5623f82a6b27d6c679bc17c48e5
> Parents: 8548b12
> Author: Benedikt Ritter <britter@apache.org>
> Authored: Mon May 4 21:26:07 2015 +0200
> Committer: Benedikt Ritter
> <britter@apache.org> Committed: Mon May 4
> 21:26:07 2015 +0200
> 
> ----------------------------------------------------------------------
>  .../apache/commons/lang3/builder/ReflectionToStringBuilder.java    | 2 +-
>  1 file changed, 1 insertion(+), 1 deletion(-)
> ----------------------------------------------------------------------
> 
> 
> http://git-wip-us.apache.org/repos/asf/commons-lang/blob/60b32953/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> ----------------------------------------------------------------------
> diff --git
> 
a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> 
b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> index 5904469..7a78170 100644 ---
> 
a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> +++
> 
b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
> @@ -333,7 +333,7 @@ public class ReflectionToStringBuilder extends
> ToStringBuilder {
>                  list.add(e.toString());
>              }
>          }
> -        return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
> +        return list.toArray(new String[list.size()]);
>      }

What's the benefit of this? Where's the difference by letting List.toArray() 
allocate the appropriate array compared to do it on your own? 
ArrayUtils.EMPTY_STRING is a constant after all, so there's no additional 
allocation.

- Jörg



---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Monday, ‎May ‎04, ‎2015, ‏‎6:05:07 PM | James Carman <james@carmanconsulting.com>Go to full article
It is such a common pattern to have the artifactId begin with the last part
of the groupId that the OSGi bundle plugin handles that case out of the box.

Top-posting because I'm on my phone. Sorry.
On Mon, May 4, 2015 at 8:49 PM Phil Steitz <phil.steitz@gmail.com> wrote:

> Try mailing repository@
>
>
>
> > On May 4, 2015, at 12:32 PM, Benedikt Ritter <britter@apache.org> wrote:
> >
> > 2015-05-04 18:46 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:
> >
> >> On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com>
> >> wrote:
> >>
> >>>> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
> >>>> On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
> >>> wrote:
> >>>>> we're discussing our first incubating release, and we came to the
> >> issue
> >>>>> that we are not grant with permissions to deploy maven artifacts
to
> >> the
> >>>>> org.apache.commons groupId [1].
> >>>> Why org.apache.commons, and not, say, org.apache.commons.rdf? The
> >>>> former seems overly broad to me.
> >>>
> >>> Could be we should have gone that way years ago when we moved to
> >>> org.apache.commons:commons-foo; but that ship has sailed, so I think
> >>> its best to stay consistent with the rest of the components and
> >>> proceed as proposed.
> >>
> >> Some rambling thoughts (tm):
> >>
> >> I like to 'fix' things too but I was on the fence about this one until
> now.
> >> Yes, there is a redundancy because the substring 'commons' is in the
> >> AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID, so of
> >> course we have o.a.commons, that's a must. The AID is the component,
> which
> >> I always call Commons Foo, and sometimes Apache Commons Foo when I want
> to
> >> make it clear to folks (at work for example) that I am talking about
> >> software hosted at Apache. If I were to talk within Apache about Foo, I
> bet
> >> some folks would not know what Foo is or where it lives. If I say
> 'Commons
> >> Foo' then it's obvious (I hope). That is how I justify to myself the
> >> commons in the AID.
> >>
> >> FWIW: Over at Log4j, we have "log4j-" as the prefix for all module
> names,
> >> and no one seems to mind.
> >
> > I'm all for consistency. VFS does it this way, Weaver does it this way,
> > Chain does it this way. And GID matching TLP ID makes sense as well.
> >
> > Who can grant the necessary permissions?
> >
> >
> >>
> >> Gary
> >>
> >>
> >>>
> >>> Phil
> >>>>
> >>>> Jochen
> >>>>
> >>>> ---------------------------------------------------------------------
> >>>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >>>> For additional commands, e-mail: dev-help@commons.apache.org
> >>>
> >>>
> >>> ---------------------------------------------------------------------
> >>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >>> For additional commands, e-mail: dev-help@commons.apache.org
> >>
> >>
> >> --
> >> E-Mail: garydgregory@gmail.com | ggregory@apache.org
> >> Java Persistence with Hibernate, Second Edition
> >> <http://www.manning.com/bauer3/>
> >> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> >> Spring Batch in Action <http://www.manning.com/templier/>
> >> Blog: http://garygregory.wordpress.com
> >> Home: http://garygregory.com/
> >> Tweet! http://twitter.com/GaryGregory
> >
> >
> >
> > --
> > http://people.apache.org/~britter/
> > http://www.systemoutprintln.de/
> > http://twitter.com/BenediktRitter
> > http://github.com/britter
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>




Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Monday, ‎May ‎04, ‎2015, ‏‎5:48:45 PM | Phil Steitz <phil.steitz@gmail.com>Go to full article
Try mailing repository@



> On May 4, 2015, at 12:32 PM, Benedikt Ritter <britter@apache.org> wrote:
> 
> 2015-05-04 18:46 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:
> 
>> On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com>
>> wrote:
>> 
>>>> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
>>>> On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
>>> wrote:
>>>>> we're discussing our first incubating release, and we came to the
>> issue
>>>>> that we are not grant with permissions to deploy maven artifacts to
>> the
>>>>> org.apache.commons groupId [1].
>>>> Why org.apache.commons, and not, say, org.apache.commons.rdf? The
>>>> former seems overly broad to me.
>>> 
>>> Could be we should have gone that way years ago when we moved to
>>> org.apache.commons:commons-foo; but that ship has sailed, so I think
>>> its best to stay consistent with the rest of the components and
>>> proceed as proposed.
>> 
>> Some rambling thoughts (tm):
>> 
>> I like to 'fix' things too but I was on the fence about this one until now.
>> Yes, there is a redundancy because the substring 'commons' is in the
>> AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID, so of
>> course we have o.a.commons, that's a must. The AID is the component, which
>> I always call Commons Foo, and sometimes Apache Commons Foo when I want to
>> make it clear to folks (at work for example) that I am talking about
>> software hosted at Apache. If I were to talk within Apache about Foo, I bet
>> some folks would not know what Foo is or where it lives. If I say 'Commons
>> Foo' then it's obvious (I hope). That is how I justify to myself the
>> commons in the AID.
>> 
>> FWIW: Over at Log4j, we have "log4j-" as the prefix for all module names,
>> and no one seems to mind.
> 
> I'm all for consistency. VFS does it this way, Weaver does it this way,
> Chain does it this way. And GID matching TLP ID makes sense as well.
> 
> Who can grant the necessary permissions?
> 
> 
>> 
>> Gary
>> 
>> 
>>> 
>>> Phil
>>>> 
>>>> Jochen
>>>> 
>>>> ---------------------------------------------------------------------
>>>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>>>> For additional commands, e-mail: dev-help@commons.apache.org
>>> 
>>> 
>>> ---------------------------------------------------------------------
>>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>>> For additional commands, e-mail: dev-help@commons.apache.org
>> 
>> 
>> --
>> E-Mail: garydgregory@gmail.com | ggregory@apache.org
>> Java Persistence with Hibernate, Second Edition
>> <http://www.manning.com/bauer3/>
>> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
>> Spring Batch in Action <http://www.manning.com/templier/>
>> Blog: http://garygregory.wordpress.com
>> Home: http://garygregory.com/
>> Tweet! http://twitter.com/GaryGregory
> 
> 
> 
> -- 
> http://people.apache.org/~britter/
> http://www.systemoutprintln.de/
> http://twitter.com/BenediktRitter
> http://github.com/britter

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎2:30:01 PM | Thomas Neidhart <thomas.neidhart@gmail.com>Go to full article
On 05/04/2015 09:31 PM, Luc Maisonobe wrote:
> Le 04/05/2015 19:13, sebb a écrit :
>> On 4 May 2015 at 16:43, luc <luc@spaceroots.org> wrote:
>>> Le 2015-05-04 14:48, Thomas Neidhart a écrit :
>>>>
>>>> Problem still remains, see here:
>>>> https://builds.apache.org/job/Commons%20Math%20H10/49/console
>>>>
>>>> The test failures only occur on the following slaves it seems:
>>>>
>>>>  * H10
>>>>  * ubuntu-2
>>>
>>>
>>> This looks like what happened a few months ago then.
>>>
>>> I will try to look at it. As we are only able to reproduce this on this
>>> build system, I guess this implies committing lots of small changes (with
>>> System.out.println and the like) and triggering a custom buid from the
>>> Jenkins configuration above. I can do that, but wonder if there is another
>>> way without committing the tests in the master branch. Can we set up an
>>> h10-builds branch that would be used by the job above and would be ignored
>>> by the regular job ?
>>
>> Yes, just configure the Jenkins job to use the appropriate branch.
>> It is currently using
>>
>> */master
> 
> I explored the project and did not find any way to change the build.
> Looking at the REST API explanation page, I found a reference to
> JOBNAME/config.xml. However, if I try this URL I get an access denied
> failure with message "luc is missing the Job/ExtendedRead permission"
> and if I try the createItem URL I get an access denied failure with
> message "luc is missing the Job/Create permission".
> 
> Could someone give me karma for changing these elements on the Commons
> Math H10 job?

I changed the job configuration to use the h10-builds branch and started
a new build already.

I am not sure that I have the credentials to give you the permissions.

Thomas

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎1:16:28 PM | Thomas Neidhart <thomas.neidhart@gmail.com>Go to full article
On 05/04/2015 05:43 PM, luc wrote:
> Le 2015-05-04 14:48, Thomas Neidhart a écrit :
>> Problem still remains, see here:
>> https://builds.apache.org/job/Commons%20Math%20H10/49/console
>>
>> The test failures only occur on the following slaves it seems:
>>
>>  * H10
>>  * ubuntu-2
> 
> This looks like what happened a few months ago then.
> 
> I will try to look at it. As we are only able to reproduce this on this
> build system, I guess this implies committing lots of small changes (with
> System.out.println and the like) and triggering a custom buid from the
> Jenkins configuration above. I can do that, but wonder if there is another
> way without committing the tests in the master branch. Can we set up an
> h10-builds branch that would be used by the job above and would be ignored
> by the regular job ?
> 
> If I remember well, when the previous problem arose even putting simple
> print
> statements in the code made the bug appear and disappear without control.

yes indeed. I tried different ways to figure out what exact statement
went wrong due to JIT compilation (e.g. with System.out statement), but
this already alters the compilation itself thus making it
difficult/impossible to track down the problem like that.

The advantage we had previously was that we had a good idea which
statement went wrong (it was a cast). This time, I do not yet have an
idea, so I think the only way to track this down would be to get
physical access to the machine and analyze the resulting JIT assembly.

You can see in the console output above that I enabled JIT debugging and
that the method in question was optimized 2 times.

Thomas

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎12:52:04 PM | Luc Maisonobe <luc@spaceroots.org>Go to full article
Le 04/05/2015 21:34, Benedikt Ritter a écrit :
> 2015-05-04 16:20 GMT+02:00 luc <luc@spaceroots.org>:
> 
>> Le 2015-05-04 14:32, Benedikt Ritter a écrit :
>>
>>> Hello Luc,
>>>
>>> 2015-05-04 13:43 GMT+02:00 <luc@apache.org>:
>>>
>>>  Repository: commons-math
>>>> Updated Branches:
>>>>   refs/heads/master c8cb75243 -> c771c0080
>>>>
>>>>
>>>> Attempt to circumvent some errors which seem to be platform-dependent.
>>>>
>>>> The Jenkins build often fails on code that seems to be perfectly
>>>> correct. Failures also do no always happen so they may depend on
>>>> platform. There were similar problems a few months ago that were
>>>> probably related to JIT bugs.
>>>>
>>>> This fix simply tries to do the same thing as before, but with an
>>>> earlier detection of NaN in one case, and by comparing directly the bits
>>>> representation in another case, to avoid wrong optimizations.
>>>>
>>>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>>>> Commit:
>>>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>>>> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>>>> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>>>>
>>>> Branch: refs/heads/master
>>>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>>>> Parents: c8cb752
>>>> Author: Luc Maisonobe <luc@apache.org>
>>>> Authored: Mon May 4 13:43:27 2015 +0200
>>>> Committer: Luc Maisonobe <luc@apache.org>
>>>> Committed: Mon May 4 13:43:27 2015 +0200
>>>>
>>>> ----------------------------------------------------------------------
>>>>  .../org/apache/commons/math4/util/FastMath.java | 28
>>>> +++++++++-----------
>>>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>>>  2 files changed, 15 insertions(+), 17 deletions(-)
>>>> ----------------------------------------------------------------------
>>>>
>>>>
>>>>
>>>>
>>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> ----------------------------------------------------------------------
>>>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> index 24bb857..fcd03ea 100644
>>>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> @@ -315,6 +315,9 @@ public class FastMath {
>>>>      /** Mask used to clear the non-sign part of a long. */
>>>>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>>>>
>>>> +    /** Bits representation of +1.0. */
>>>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>>>> +
>>>>      /** 2^52 - double numbers this large must be integral (no fraction)
>>>> or NaN or Infinite */
>>>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>>>      /** 2^53 - double numbers this large must be even. */
>>>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>>>              return x;
>>>>          }
>>>>
>>>> +        if (y != y) { // Y is NaN
>>>>
>>>>
>>> It really took me some time to understand this change. How about using
>>> Double.isNaN(double) instead? It does the same as the current code, but
>>> reads better, IMHO.
>>>
>>
>> I agree but in this huge class this is how all NaNs are detected and there
>> are a bunch of such tests. I don't know the reason these existing tests
>> were done this way and not using Double.isNaN, it may well be performance
>> related.
>> So for this class (and this class only), I prefer to do it the same way it
>> is already done a few lines above or below.
>>
> 
> Yes at first I also thought it has something to do with performance. But
> then I looked at the implementation of Double.isNaN(double):
> 
> static public boolean isNaN(double v) {
>     return (v != v);
> }
> 
> So it's probably because of consistency with the rest of the class. Would
> you be willing to merge a PR that changes the whole class to use
> Double.isNaN(double) if I provide one?

You are a committer, you can merge it if you want ;-)
I agree it would be cleaner.

best regards,
Luc

> 
> Benedikt
> 
>>
>>
>> best regards,
>> Luc
>>
>>
>>
>>
>>> Best regards,
>>> Benedikt
>>>
>>>
>>>  +            return y;
>>>> +        }
>>>> +
>>>>          if (x == 0) {
>>>>              long bits = Double.doubleToRawLongBits(x);
>>>>              if ((bits & 0x8000000000000000L) != 0) {
>>>> @@ -1485,18 +1492,13 @@ public class FastMath {
>>>>
>>>>              if (y < 0) {
>>>>                  return Double.POSITIVE_INFINITY;
>>>> -            }
>>>> -            if (y > 0) {
>>>> +            } else {
>>>>                  return 0.0;
>>>>              }
>>>>
>>>> -            return Double.NaN;
>>>>          }
>>>>
>>>>          if (x == Double.POSITIVE_INFINITY) {
>>>> -            if (y != y) { // y is NaN
>>>> -                return y;
>>>> -            }
>>>>              if (y < 0.0) {
>>>>                  return 0.0;
>>>>              } else {
>>>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>>>          }
>>>>
>>>>          if (y == Double.POSITIVE_INFINITY) {
>>>> -            if (x * x == 1.0) {
>>>> -                return Double.NaN;
>>>> -            }
>>>> -
>>>> -            if (x * x > 1.0) {
>>>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>>>> Double.doubleToRawLongBits(x);
>>>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>>>                  return Double.POSITIVE_INFINITY;
>>>> -            } else {
>>>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>>>                  return 0.0;
>>>> +            } else {
>>>> +                return Double.NaN;
>>>>              }
>>>>          }
>>>>
>>>>          if (x == Double.NEGATIVE_INFINITY) {
>>>> -            if (y != y) { // y is NaN
>>>> -                return y;
>>>> -            }
>>>>
>>>>              if (y < 0) {
>>>>                  long yi = (long) y;
>>>>
>>>>
>>>>
>>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> ----------------------------------------------------------------------
>>>> diff --git
>>>> a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> index 5d36fea..06a1d07 100644
>>>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> @@ -29,8 +29,6 @@ import
>>>> org.apache.commons.math4.exception.MathArithmeticException;
>>>>  import org.apache.commons.math4.random.MersenneTwister;
>>>>  import org.apache.commons.math4.random.RandomGenerator;
>>>>  import org.apache.commons.math4.random.Well1024a;
>>>> -import org.apache.commons.math4.util.FastMath;
>>>> -import org.apache.commons.math4.util.Precision;
>>>>  import org.junit.Assert;
>>>>  import org.junit.Before;
>>>>  import org.junit.Ignore;
>>>> @@ -393,6 +391,8 @@ public class FastMathTest {
>>>>
>>>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>>>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>>>>
>>>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>>>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>>>> +
>>>>          // Added tests for a 100% coverage
>>>>
>>>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>>>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>>>>
>>>>
>>>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
>>
> 
> 


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎12:34:54 PM | Benedikt Ritter <britter@apache.org>Go to full article
2015-05-04 16:20 GMT+02:00 luc <luc@spaceroots.org>:

> Le 2015-05-04 14:32, Benedikt Ritter a écrit :
>
>> Hello Luc,
>>
>> 2015-05-04 13:43 GMT+02:00 <luc@apache.org>:
>>
>>  Repository: commons-math
>>> Updated Branches:
>>>   refs/heads/master c8cb75243 -> c771c0080
>>>
>>>
>>> Attempt to circumvent some errors which seem to be platform-dependent.
>>>
>>> The Jenkins build often fails on code that seems to be perfectly
>>> correct. Failures also do no always happen so they may depend on
>>> platform. There were similar problems a few months ago that were
>>> probably related to JIT bugs.
>>>
>>> This fix simply tries to do the same thing as before, but with an
>>> earlier detection of NaN in one case, and by comparing directly the bits
>>> representation in another case, to avoid wrong optimizations.
>>>
>>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>>> Commit:
>>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>>> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>>> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>>>
>>> Branch: refs/heads/master
>>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>>> Parents: c8cb752
>>> Author: Luc Maisonobe <luc@apache.org>
>>> Authored: Mon May 4 13:43:27 2015 +0200
>>> Committer: Luc Maisonobe <luc@apache.org>
>>> Committed: Mon May 4 13:43:27 2015 +0200
>>>
>>> ----------------------------------------------------------------------
>>>  .../org/apache/commons/math4/util/FastMath.java | 28
>>> +++++++++-----------
>>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>>  2 files changed, 15 insertions(+), 17 deletions(-)
>>> ----------------------------------------------------------------------
>>>
>>>
>>>
>>>
>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> ----------------------------------------------------------------------
>>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> index 24bb857..fcd03ea 100644
>>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> @@ -315,6 +315,9 @@ public class FastMath {
>>>      /** Mask used to clear the non-sign part of a long. */
>>>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>>>
>>> +    /** Bits representation of +1.0. */
>>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>>> +
>>>      /** 2^52 - double numbers this large must be integral (no fraction)
>>> or NaN or Infinite */
>>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>>      /** 2^53 - double numbers this large must be even. */
>>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>>              return x;
>>>          }
>>>
>>> +        if (y != y) { // Y is NaN
>>>
>>>
>> It really took me some time to understand this change. How about using
>> Double.isNaN(double) instead? It does the same as the current code, but
>> reads better, IMHO.
>>
>
> I agree but in this huge class this is how all NaNs are detected and there
> are a bunch of such tests. I don't know the reason these existing tests
> were done this way and not using Double.isNaN, it may well be performance
> related.
> So for this class (and this class only), I prefer to do it the same way it
> is already done a few lines above or below.
>

Yes at first I also thought it has something to do with performance. But
then I looked at the implementation of Double.isNaN(double):

static public boolean isNaN(double v) {
    return (v != v);
}

So it's probably because of consistency with the rest of the class. Would
you be willing to merge a PR that changes the whole class to use
Double.isNaN(double) if I provide one?

Benedikt

>
>
> best regards,
> Luc
>
>
>
>
>> Best regards,
>> Benedikt
>>
>>
>>  +            return y;
>>> +        }
>>> +
>>>          if (x == 0) {
>>>              long bits = Double.doubleToRawLongBits(x);
>>>              if ((bits & 0x8000000000000000L) != 0) {
>>> @@ -1485,18 +1492,13 @@ public class FastMath {
>>>
>>>              if (y < 0) {
>>>                  return Double.POSITIVE_INFINITY;
>>> -            }
>>> -            if (y > 0) {
>>> +            } else {
>>>                  return 0.0;
>>>              }
>>>
>>> -            return Double.NaN;
>>>          }
>>>
>>>          if (x == Double.POSITIVE_INFINITY) {
>>> -            if (y != y) { // y is NaN
>>> -                return y;
>>> -            }
>>>              if (y < 0.0) {
>>>                  return 0.0;
>>>              } else {
>>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>>          }
>>>
>>>          if (y == Double.POSITIVE_INFINITY) {
>>> -            if (x * x == 1.0) {
>>> -                return Double.NaN;
>>> -            }
>>> -
>>> -            if (x * x > 1.0) {
>>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>>> Double.doubleToRawLongBits(x);
>>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>>                  return Double.POSITIVE_INFINITY;
>>> -            } else {
>>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>>                  return 0.0;
>>> +            } else {
>>> +                return Double.NaN;
>>>              }
>>>          }
>>>
>>>          if (x == Double.NEGATIVE_INFINITY) {
>>> -            if (y != y) { // y is NaN
>>> -                return y;
>>> -            }
>>>
>>>              if (y < 0) {
>>>                  long yi = (long) y;
>>>
>>>
>>>
>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> ----------------------------------------------------------------------
>>> diff --git
>>> a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> index 5d36fea..06a1d07 100644
>>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> @@ -29,8 +29,6 @@ import
>>> org.apache.commons.math4.exception.MathArithmeticException;
>>>  import org.apache.commons.math4.random.MersenneTwister;
>>>  import org.apache.commons.math4.random.RandomGenerator;
>>>  import org.apache.commons.math4.random.Well1024a;
>>> -import org.apache.commons.math4.util.FastMath;
>>> -import org.apache.commons.math4.util.Precision;
>>>  import org.junit.Assert;
>>>  import org.junit.Before;
>>>  import org.junit.Ignore;
>>> @@ -393,6 +391,8 @@ public class FastMathTest {
>>>
>>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>>>
>>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>>> +
>>>          // Added tests for a 100% coverage
>>>
>>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>>>
>>>
>>>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Monday, ‎May ‎04, ‎2015, ‏‎12:32:26 PM | Benedikt Ritter <britter@apache.org>Go to full article
2015-05-04 18:46 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:

> On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com>
> wrote:
>
> > On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
> > > On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
> > wrote:
> > >> we're discussing our first incubating release, and we came to the
> issue
> > >> that we are not grant with permissions to deploy maven artifacts to
> the
> > >> org.apache.commons groupId [1].
> > > Why org.apache.commons, and not, say, org.apache.commons.rdf? The
> > > former seems overly broad to me.
> >
> > Could be we should have gone that way years ago when we moved to
> > org.apache.commons:commons-foo; but that ship has sailed, so I think
> > its best to stay consistent with the rest of the components and
> > proceed as proposed.
> >
>
> Some rambling thoughts (tm):
>
> I like to 'fix' things too but I was on the fence about this one until now.
> Yes, there is a redundancy because the substring 'commons' is in the
> AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID, so of
> course we have o.a.commons, that's a must. The AID is the component, which
> I always call Commons Foo, and sometimes Apache Commons Foo when I want to
> make it clear to folks (at work for example) that I am talking about
> software hosted at Apache. If I were to talk within Apache about Foo, I bet
> some folks would not know what Foo is or where it lives. If I say 'Commons
> Foo' then it's obvious (I hope). That is how I justify to myself the
> commons in the AID.
>
> FWIW: Over at Log4j, we have "log4j-" as the prefix for all module names,
> and no one seems to mind.
>

I'm all for consistency. VFS does it this way, Weaver does it this way,
Chain does it this way. And GID matching TLP ID makes sense as well.

Who can grant the necessary permissions?


>
> Gary
>
>
> >
> > Phil
> > >
> > > Jochen
> > >
> > > ---------------------------------------------------------------------
> > > To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> > > For additional commands, e-mail: dev-help@commons.apache.org
> > >
> > >
> >
> >
> > ---------------------------------------------------------------------
> > To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> > For additional commands, e-mail: dev-help@commons.apache.org
> >
> >
>
>
> --
> E-Mail: garydgregory@gmail.com | ggregory@apache.org
> Java Persistence with Hibernate, Second Edition
> <http://www.manning.com/bauer3/>
> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> Spring Batch in Action <http://www.manning.com/templier/>
> Blog: http://garygregory.wordpress.com
> Home: http://garygregory.com/
> Tweet! http://twitter.com/GaryGregory
>



-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎12:31:27 PM | Luc Maisonobe <luc@spaceroots.org>Go to full article
Le 04/05/2015 19:13, sebb a écrit :
> On 4 May 2015 at 16:43, luc <luc@spaceroots.org> wrote:
>> Le 2015-05-04 14:48, Thomas Neidhart a écrit :
>>>
>>> Problem still remains, see here:
>>> https://builds.apache.org/job/Commons%20Math%20H10/49/console
>>>
>>> The test failures only occur on the following slaves it seems:
>>>
>>>  * H10
>>>  * ubuntu-2
>>
>>
>> This looks like what happened a few months ago then.
>>
>> I will try to look at it. As we are only able to reproduce this on this
>> build system, I guess this implies committing lots of small changes (with
>> System.out.println and the like) and triggering a custom buid from the
>> Jenkins configuration above. I can do that, but wonder if there is another
>> way without committing the tests in the master branch. Can we set up an
>> h10-builds branch that would be used by the job above and would be ignored
>> by the regular job ?
> 
> Yes, just configure the Jenkins job to use the appropriate branch.
> It is currently using
> 
> */master

I explored the project and did not find any way to change the build.
Looking at the REST API explanation page, I found a reference to
JOBNAME/config.xml. However, if I try this URL I get an access denied
failure with message "luc is missing the Job/ExtendedRead permission"
and if I try the createItem URL I get an access denied failure with
message "luc is missing the Job/Create permission".

Could someone give me karma for changing these elements on the Commons
Math H10 job?

best regards,
Luc

> 
> 
>> If I remember well, when the previous problem arose even putting simple
>> print
>> statements in the code made the bug appear and disappear without control.
> 
> I don't remember that; I do remember that it was host-dependent.
> 
>> best regards,
>> Luc
>>
>>
>>>
>>> Thomas
>>>
>>>
>>> On Mon, May 4, 2015 at 1:43 PM, <luc@apache.org> wrote:
>>>
>>>> Repository: commons-math
>>>> Updated Branches:
>>>>   refs/heads/master c8cb75243 -> c771c0080
>>>>
>>>>
>>>> Attempt to circumvent some errors which seem to be platform-dependent.
>>>>
>>>> The Jenkins build often fails on code that seems to be perfectly
>>>> correct. Failures also do no always happen so they may depend on
>>>> platform. There were similar problems a few months ago that were
>>>> probably related to JIT bugs.
>>>>
>>>> This fix simply tries to do the same thing as before, but with an
>>>> earlier detection of NaN in one case, and by comparing directly the bits
>>>> representation in another case, to avoid wrong optimizations.
>>>>
>>>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>>>> Commit:
>>>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>>>> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>>>> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>>>>
>>>> Branch: refs/heads/master
>>>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>>>> Parents: c8cb752
>>>> Author: Luc Maisonobe <luc@apache.org>
>>>> Authored: Mon May 4 13:43:27 2015 +0200
>>>> Committer: Luc Maisonobe <luc@apache.org>
>>>> Committed: Mon May 4 13:43:27 2015 +0200
>>>>
>>>> ----------------------------------------------------------------------
>>>>  .../org/apache/commons/math4/util/FastMath.java | 28
>>>> +++++++++-----------
>>>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>>>  2 files changed, 15 insertions(+), 17 deletions(-)
>>>> ----------------------------------------------------------------------
>>>>
>>>>
>>>>
>>>>
>>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> ----------------------------------------------------------------------
>>>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> index 24bb857..fcd03ea 100644
>>>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>>> @@ -315,6 +315,9 @@ public class FastMath {
>>>>      /** Mask used to clear the non-sign part of a long. */
>>>>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>>>>
>>>> +    /** Bits representation of +1.0. */
>>>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>>>> +
>>>>      /** 2^52 - double numbers this large must be integral (no fraction)
>>>> or NaN or Infinite */
>>>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>>>      /** 2^53 - double numbers this large must be even. */
>>>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>>>              return x;
>>>>          }
>>>>
>>>> +        if (y != y) { // Y is NaN
>>>> +            return y;
>>>> +        }
>>>> +
>>>>          if (x == 0) {
>>>>              long bits = Double.doubleToRawLongBits(x);
>>>>              if ((bits & 0x8000000000000000L) != 0) {
>>>> @@ -1485,18 +1492,13 @@ public class FastMath {
>>>>
>>>>              if (y < 0) {
>>>>                  return Double.POSITIVE_INFINITY;
>>>> -            }
>>>> -            if (y > 0) {
>>>> +            } else {
>>>>                  return 0.0;
>>>>              }
>>>>
>>>> -            return Double.NaN;
>>>>          }
>>>>
>>>>          if (x == Double.POSITIVE_INFINITY) {
>>>> -            if (y != y) { // y is NaN
>>>> -                return y;
>>>> -            }
>>>>              if (y < 0.0) {
>>>>                  return 0.0;
>>>>              } else {
>>>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>>>          }
>>>>
>>>>          if (y == Double.POSITIVE_INFINITY) {
>>>> -            if (x * x == 1.0) {
>>>> -                return Double.NaN;
>>>> -            }
>>>> -
>>>> -            if (x * x > 1.0) {
>>>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>>>> Double.doubleToRawLongBits(x);
>>>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>>>                  return Double.POSITIVE_INFINITY;
>>>> -            } else {
>>>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>>>                  return 0.0;
>>>> +            } else {
>>>> +                return Double.NaN;
>>>>              }
>>>>          }
>>>>
>>>>          if (x == Double.NEGATIVE_INFINITY) {
>>>> -            if (y != y) { // y is NaN
>>>> -                return y;
>>>> -            }
>>>>
>>>>              if (y < 0) {
>>>>                  long yi = (long) y;
>>>>
>>>>
>>>>
>>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> ----------------------------------------------------------------------
>>>> diff --git
>>>> a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> index 5d36fea..06a1d07 100644
>>>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>>> @@ -29,8 +29,6 @@ import
>>>> org.apache.commons.math4.exception.MathArithmeticException;
>>>>  import org.apache.commons.math4.random.MersenneTwister;
>>>>  import org.apache.commons.math4.random.RandomGenerator;
>>>>  import org.apache.commons.math4.random.Well1024a;
>>>> -import org.apache.commons.math4.util.FastMath;
>>>> -import org.apache.commons.math4.util.Precision;
>>>>  import org.junit.Assert;
>>>>  import org.junit.Before;
>>>>  import org.junit.Ignore;
>>>> @@ -393,6 +391,8 @@ public class FastMathTest {
>>>>
>>>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>>>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>>>>
>>>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>>>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>>>> +
>>>>          // Added tests for a 100% coverage
>>>>
>>>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>>>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>>>>
>>>>
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
> 
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
> 
> 
> 


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [LANG] Add ThreadUtils
‎Monday, ‎May ‎04, ‎2015, ‏‎12:29:35 PM | Benedikt Ritter <britter@apache.org>Go to full article
Hello Hendrik,

2015-05-04 0:28 GMT+02:00 Hendrik Dev <hendrikdev22@gmail.com>:

> Hi Benedikt,
>
> i have opened a new pull request
> https://github.com/apache/commons-lang/pull/78 which is based against
> the master branch, contains only a single commit and fixes the issues
> you named.
> Hope thats ok ...
>

Thank you. The PR looks very promising.

Benedikt


>
> Thanks
> Hendrik
>
> On Sun, Apr 26, 2015 at 11:40 AM, Benedikt Ritter <britter@apache.org>
> wrote:
> > Hello Hendrik,
> >
> > 2015-04-22 21:14 GMT+02:00 Hendrik Dev <hendrikdev22@gmail.com>:
> >
> >> based on what i understand from this discussion i did some changes,
> >> pls see
> >>
> https://github.com/salyh/commons-lang/commit/12edd41ec7563368b03fa540af5c9a127bbfd89d
> >> for the diff and
> >>
> >>
> https://github.com/salyh/commons-lang/blob/12edd41ec7563368b03fa540af5c9a127bbfd89d/src/main/java/org/apache/commons/lang3/ThreadUtils.java
> >> for the class in its current version.
> >>
> >
> > I think we're almost there. Two minor nits remain:
> > - what's the difference between "finding" and "selecting"? I think we
> > should name all methods findXXX
> > - AlwayTruePredicate can be private
> >
> > I think if we have that we can apply the patch. Since you're an ASF
> > committer, you can add it to our svn repository yourself, if you like
> [1].
> >
> > Best regards,
> > Benedikt
> >
> > [1] http://markmail.org/message/ylmw7qzx23br4ver
> >
> >
> >>
> >> Thanks
> >> Hendrik
> >>
> >> On Wed, Apr 15, 2015 at 2:48 AM, Peter Ansell <ansell.peter@gmail.com>
> >> wrote:
> >> > On 13 April 2015 at 19:21, Benedikt Ritter <britter@apache.org>
> wrote:
> >> >> 2015-04-13 2:27 GMT+02:00 Matt Benson <gudnabrsam@gmail.com>:
> >> >>
> >> >>> +1 to what Peter said: it's a functional interface so it is
> >> >>> lambda-compatible anyway.
> >> >>>
> >> >>
> >> >> Well, yes it would be a functional interface, but it would lack all
> the
> >> >> default methods defined in java.util.function.Predicate if we don't
> >> extend
> >> >> it later.
> >> >
> >> > Agreed, I was trying to get that point across with my last comment:
> >> >
> >> >>> > > public interface ThreadPredicate extends
> >> >>> > java.util.function.Predicate<Thread>
> >> >>> >
> >> >>> > This change is useful once JDK-8 is the baseline, as it would
only
> >> add
> >> >>> > features (all of the default methods) from Predicate, not
remove
> any
> >> >>> > features or backwards compatibility.
> >> >
> >> > Cheers,
> >> >
> >> > Peter
> >> >
> >> > ---------------------------------------------------------------------
> >> > To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >> > For additional commands, e-mail: dev-help@commons.apache.org
> >> >
> >>
> >>
> >>
> >> --
> >> Hendrik Saly (salyh, hendrikdev22)
> >> @hendrikdev22
> >> PGP: 0x22D7F6EC
> >>
> >> ---------------------------------------------------------------------
> >> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> >> For additional commands, e-mail: dev-help@commons.apache.org
> >>
> >>
> >
> >
> > --
> > http://people.apache.org/~britter/
> > http://www.systemoutprintln.de/
> > http://twitter.com/BenediktRitter
> > http://github.com/britter
>
>
>
> --
> Hendrik Saly (salyh, hendrikdev22)
> @hendrikdev22
> PGP: 0x22D7F6EC
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [VOTE] Release Apache Commons CLI 1.3 based on RC1
‎Monday, ‎May ‎04, ‎2015, ‏‎10:33:18 AM | Jörg Schaible <joerg.schaible@gmx.de>Go to full article
Hi Benedikt,

Benedikt Ritter wrote:

> Hi,
> 
> We have fixed quite a few bugs and added some significant enhancements
> since CLI 1.2 was released and the Groovy Project is asking for a new
> release, so I would like to release CLI 1.3. The most notable change is
> the introduction of a new API for creating Option instances.
> 
> CLI 1.3 RC1 is available for review here:
>   https://dist.apache.org/repos/dist/dev/commons/cli/ (svn revision 8797)
> 
> Maven artifacts are here:
>   
https://repository.apache.org/content/repositories/orgapachecommons-1090/
> 
> Details of changes since 1.2 are in the release notes:
>   https://dist.apache.org/repos/dist/dev/commons/cli/RELEASE-NOTES.txt
>   http://people.apache.org/~britter/cli-1.3-RC1/changes-report.html
> 
> I have tested this with JDK 6, 7 and 8 using maven 3.
> 
> The tag is here:
>   http://svn.apache.org/repos/asf/commons/proper/cli/tags/cli-1.3-RC1/
>   (svn
> revision 1677410)
> 
> Site:
>   http://people.apache.org/~britter/cli-1.3-RC1/
>   (note some *relative* links are broken and the 1.2 directories are not
> yet created - these will be OK once the site is deployed)
> 
> Clirr Report (compared to 1.2):
>   http://people.apache.org/~britter/cli-1.3-RC1/clirr-report.html
> 
> RAT Report:
>   http://people.apache.org/~britter/cli-1.3-RC1/rat-report.html
> 
> KEYS:
>   https://www.apache.org/dist/commons/KEYS
> 
> Please review the release candidate and vote. This vote will close no
> sooner that 72 hours from now, i.e. after 06-May 2015, 17:30 CEST.
> 
> [ ] +1 Release these artifacts
> [ ] +0 OK, but...
> [ ] -0 OK, but really should fix...
> [ ] -1 I oppose this release because...

Test fails for IBM JDK 1.5 and 1.6:
Failed tests: 
==================== %< ====================
  BugCLI162Test.testPrintHelpLongLines:310 expected:<...th are displayed.
 -[o,--paramModes <arg>       Parameters modes (1=IN, 2=INOUT, 4=OUT,
                             0=Unknown). -o and -O are mutually exclusive.
                             Example for 2 parameters, OUT and IN: -o "4
                             1"
 -O,--paramModeNames <arg>   Parameters mode names (IN, INOUT, OUT,
                             Unknown). -o and -O are mutually exclusive.
                             Example for 2 parameters, OUT and IN: -O "OUT
                             IN]"
 -p,--password <ar...> but was:<...th are displayed.
 -[O,--paramModeNames <arg>   Parameters mode names (IN, INOUT, OUT,
                             Unknown). -o and -O are mutually exclusive.
                             Example for 2 parameters, OUT and IN: -O "OUT
                             IN"
 -o,--paramModes <arg>       Parameters modes (1=IN, 2=INOUT, 4=OUT,
                             0=Unknown). -o and -O are mutually exclusive.
                             Example for 2 parameters, OUT and IN: -o "4
                             1]"
 -p,--password <ar...>
==================== %< ====================

... but not for Sun JDK 1.5/1.6 nor for IBM JDK 1.7. For whatever reason the 
options are printed in different order. Succeeds for my OpenJD versions, 
Oracle Java 8 and 9.

+1

Cheers,
Jörg



> 
> Thanks!
> Benedikt
> 
> 


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎10:13:48 AM | sebb <sebbaz@gmail.com>Go to full article
On 4 May 2015 at 16:43, luc <luc@spaceroots.org> wrote:
> Le 2015-05-04 14:48, Thomas Neidhart a écrit :
>>
>> Problem still remains, see here:
>> https://builds.apache.org/job/Commons%20Math%20H10/49/console
>>
>> The test failures only occur on the following slaves it seems:
>>
>>  * H10
>>  * ubuntu-2
>
>
> This looks like what happened a few months ago then.
>
> I will try to look at it. As we are only able to reproduce this on this
> build system, I guess this implies committing lots of small changes (with
> System.out.println and the like) and triggering a custom buid from the
> Jenkins configuration above. I can do that, but wonder if there is another
> way without committing the tests in the master branch. Can we set up an
> h10-builds branch that would be used by the job above and would be ignored
> by the regular job ?

Yes, just configure the Jenkins job to use the appropriate branch.
It is currently using

*/master


> If I remember well, when the previous problem arose even putting simple
> print
> statements in the code made the bug appear and disappear without control.

I don't remember that; I do remember that it was host-dependent.

> best regards,
> Luc
>
>
>>
>> Thomas
>>
>>
>> On Mon, May 4, 2015 at 1:43 PM, <luc@apache.org> wrote:
>>
>>> Repository: commons-math
>>> Updated Branches:
>>>   refs/heads/master c8cb75243 -> c771c0080
>>>
>>>
>>> Attempt to circumvent some errors which seem to be platform-dependent.
>>>
>>> The Jenkins build often fails on code that seems to be perfectly
>>> correct. Failures also do no always happen so they may depend on
>>> platform. There were similar problems a few months ago that were
>>> probably related to JIT bugs.
>>>
>>> This fix simply tries to do the same thing as before, but with an
>>> earlier detection of NaN in one case, and by comparing directly the bits
>>> representation in another case, to avoid wrong optimizations.
>>>
>>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>>> Commit:
>>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>>> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>>> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>>>
>>> Branch: refs/heads/master
>>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>>> Parents: c8cb752
>>> Author: Luc Maisonobe <luc@apache.org>
>>> Authored: Mon May 4 13:43:27 2015 +0200
>>> Committer: Luc Maisonobe <luc@apache.org>
>>> Committed: Mon May 4 13:43:27 2015 +0200
>>>
>>> ----------------------------------------------------------------------
>>>  .../org/apache/commons/math4/util/FastMath.java | 28
>>> +++++++++-----------
>>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>>  2 files changed, 15 insertions(+), 17 deletions(-)
>>> ----------------------------------------------------------------------
>>>
>>>
>>>
>>>
>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> ----------------------------------------------------------------------
>>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> index 24bb857..fcd03ea 100644
>>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>>> @@ -315,6 +315,9 @@ public class FastMath {
>>>      /** Mask used to clear the non-sign part of a long. */
>>>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>>>
>>> +    /** Bits representation of +1.0. */
>>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>>> +
>>>      /** 2^52 - double numbers this large must be integral (no fraction)
>>> or NaN or Infinite */
>>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>>      /** 2^53 - double numbers this large must be even. */
>>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>>              return x;
>>>          }
>>>
>>> +        if (y != y) { // Y is NaN
>>> +            return y;
>>> +        }
>>> +
>>>          if (x == 0) {
>>>              long bits = Double.doubleToRawLongBits(x);
>>>              if ((bits & 0x8000000000000000L) != 0) {
>>> @@ -1485,18 +1492,13 @@ public class FastMath {
>>>
>>>              if (y < 0) {
>>>                  return Double.POSITIVE_INFINITY;
>>> -            }
>>> -            if (y > 0) {
>>> +            } else {
>>>                  return 0.0;
>>>              }
>>>
>>> -            return Double.NaN;
>>>          }
>>>
>>>          if (x == Double.POSITIVE_INFINITY) {
>>> -            if (y != y) { // y is NaN
>>> -                return y;
>>> -            }
>>>              if (y < 0.0) {
>>>                  return 0.0;
>>>              } else {
>>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>>          }
>>>
>>>          if (y == Double.POSITIVE_INFINITY) {
>>> -            if (x * x == 1.0) {
>>> -                return Double.NaN;
>>> -            }
>>> -
>>> -            if (x * x > 1.0) {
>>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>>> Double.doubleToRawLongBits(x);
>>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>>                  return Double.POSITIVE_INFINITY;
>>> -            } else {
>>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>>                  return 0.0;
>>> +            } else {
>>> +                return Double.NaN;
>>>              }
>>>          }
>>>
>>>          if (x == Double.NEGATIVE_INFINITY) {
>>> -            if (y != y) { // y is NaN
>>> -                return y;
>>> -            }
>>>
>>>              if (y < 0) {
>>>                  long yi = (long) y;
>>>
>>>
>>>
>>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> ----------------------------------------------------------------------
>>> diff --git
>>> a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> index 5d36fea..06a1d07 100644
>>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>>> @@ -29,8 +29,6 @@ import
>>> org.apache.commons.math4.exception.MathArithmeticException;
>>>  import org.apache.commons.math4.random.MersenneTwister;
>>>  import org.apache.commons.math4.random.RandomGenerator;
>>>  import org.apache.commons.math4.random.Well1024a;
>>> -import org.apache.commons.math4.util.FastMath;
>>> -import org.apache.commons.math4.util.Precision;
>>>  import org.junit.Assert;
>>>  import org.junit.Before;
>>>  import org.junit.Ignore;
>>> @@ -393,6 +391,8 @@ public class FastMathTest {
>>>
>>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>>>
>>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>>> +
>>>          // Added tests for a 100% coverage
>>>
>>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>>>
>>>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Monday, ‎May ‎04, ‎2015, ‏‎9:46:08 AM | Gary Gregory <garydgregory@gmail.com>Go to full article
On Sun, May 3, 2015 at 12:03 PM, Phil Steitz <phil.steitz@gmail.com> wrote:

> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
> > On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
> wrote:
> >> we're discussing our first incubating release, and we came to the issue
> >> that we are not grant with permissions to deploy maven artifacts to the
> >> org.apache.commons groupId [1].
> > Why org.apache.commons, and not, say, org.apache.commons.rdf? The
> > former seems overly broad to me.
>
> Could be we should have gone that way years ago when we moved to
> org.apache.commons:commons-foo; but that ship has sailed, so I think
> its best to stay consistent with the rest of the components and
> proceed as proposed.
>

Some rambling thoughts (tm):

I like to 'fix' things too but I was on the fence about this one until now.
Yes, there is a redundancy because the substring 'commons' is in the
AID/GID twice; but that is OK I claim. Why? The GID is the TLP ID, so of
course we have o.a.commons, that's a must. The AID is the component, which
I always call Commons Foo, and sometimes Apache Commons Foo when I want to
make it clear to folks (at work for example) that I am talking about
software hosted at Apache. If I were to talk within Apache about Foo, I bet
some folks would not know what Foo is or where it lives. If I say 'Commons
Foo' then it's obvious (I hope). That is how I justify to myself the
commons in the AID.

FWIW: Over at Log4j, we have "log4j-" as the prefix for all module names,
and no one seems to mind.

Gary


>
> Phil
> >
> > Jochen
> >
> > ---------------------------------------------------------------------
> > To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> > For additional commands, e-mail: dev-help@commons.apache.org
> >
> >
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
E-Mail: garydgregory@gmail.com | ggregory@apache.org
Java Persistence with Hibernate, Second Edition
<http://www.manning.com/bauer3/>
JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
Spring Batch in Action <http://www.manning.com/templier/>
Blog: http://garygregory.wordpress.com
Home: http://garygregory.com/
Tweet! http://twitter.com/GaryGregory




Re: [RDF] grant Commons RDF (incubating) permission to deploy artifacts to org.apache.commons groupId
‎Monday, ‎May ‎04, ‎2015, ‏‎9:31:29 AM | Sergio Fernández <wikier@apache.org>Go to full article
Hi,

any consensus about this?

Please, take into account this issue is blocking the publication of our
first (incubating) release.

Thanks.

Cheers,


On Sun, May 3, 2015 at 10:53 PM, Sergio Fernández <wikier@apache.org> wrote:

> Well, we just followed Gary and Benedikt recommendation to adopt the
> current components' style. For us as podling is fine whatever you decide,
> we just need a decision (an permission to deploy over it).
>
> On Sun, May 3, 2015 at 9:33 PM, Phil Steitz <phil.steitz@gmail.com> wrote:
>
>> On 5/3/15 12:26 PM, Jochen Wiedmann wrote:
>> > On Sun, May 3, 2015 at 9:03 PM, Phil Steitz <phil.steitz@gmail.com>
>> wrote:
>> >> On 5/3/15 11:56 AM, Jochen Wiedmann wrote:
>> >>> On Sun, May 3, 2015 at 4:44 PM, Sergio Fernández <wikier@apache.org>
>> wrote:
>> >>>> we're discussing our first incubating release, and we came to the
>> issue
>> >>>> that we are not grant with permissions to deploy maven artifacts
to
>> the
>> >>>> org.apache.commons groupId [1].
>> >>> Why org.apache.commons, and not, say, org.apache.commons.rdf? The
>> >>> former seems overly broad to me.
>> >> Could be we should have gone that way years ago when we moved to
>> >> org.apache.commons:commons-foo; but that ship has sailed, so I think
>> >> its best to stay consistent with the rest of the components and
>> >> proceed as proposed.
>> >
>> > First release, and the ship has sailed? Sorry, but I don't think so.
>>
>> What I meant was the decision to standardize on
>>
>> GroupId: org.apache.commons
>> ArtifactId: commons-foo[v]
>>
>> I am -1 for making new components different.
>>
>> Phil
>> >
>> > Jochen
>> >
>> >
>>
>>
>> ---------------------------------------------------------------------
>> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
>> For additional commands, e-mail: dev-help@commons.apache.org
>>
>>
>
>
> --
> Sergio Fernández
> Partner Technology Manager
> Redlink GmbH
> m: +43 6602747925
> e: sergio.fernandez@redlink.co
> w: http://redlink.co
>



-- 
Sergio Fernández
Partner Technology Manager
Redlink GmbH
m: +43 6602747925
e: sergio.fernandez@redlink.co
w: http://redlink.co




Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎8:43:15 AM | luc <luc@spaceroots.org>Go to full article
Le 2015-05-04 14:48, Thomas Neidhart a écrit :
> Problem still remains, see here:
> https://builds.apache.org/job/Commons%20Math%20H10/49/console
> 
> The test failures only occur on the following slaves it seems:
> 
>  * H10
>  * ubuntu-2

This looks like what happened a few months ago then.

I will try to look at it. As we are only able to reproduce this on this
build system, I guess this implies committing lots of small changes 
(with
System.out.println and the like) and triggering a custom buid from the
Jenkins configuration above. I can do that, but wonder if there is 
another
way without committing the tests in the master branch. Can we set up an
h10-builds branch that would be used by the job above and would be 
ignored
by the regular job ?

If I remember well, when the previous problem arose even putting simple 
print
statements in the code made the bug appear and disappear without 
control.

best regards,
Luc

> 
> Thomas
> 
> 
> On Mon, May 4, 2015 at 1:43 PM, <luc@apache.org> wrote:
> 
>> Repository: commons-math
>> Updated Branches:
>>   refs/heads/master c8cb75243 -> c771c0080
>> 
>> 
>> Attempt to circumvent some errors which seem to be platform-dependent.
>> 
>> The Jenkins build often fails on code that seems to be perfectly
>> correct. Failures also do no always happen so they may depend on
>> platform. There were similar problems a few months ago that were
>> probably related to JIT bugs.
>> 
>> This fix simply tries to do the same thing as before, but with an
>> earlier detection of NaN in one case, and by comparing directly the 
>> bits
>> representation in another case, to avoid wrong optimizations.
>> 
>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>> Commit:
>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>> Tree: 
>> http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>> Diff: 
>> http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>> 
>> Branch: refs/heads/master
>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>> Parents: c8cb752
>> Author: Luc Maisonobe <luc@apache.org>
>> Authored: Mon May 4 13:43:27 2015 +0200
>> Committer: Luc Maisonobe <luc@apache.org>
>> Committed: Mon May 4 13:43:27 2015 +0200
>> 
>> ----------------------------------------------------------------------
>>  .../org/apache/commons/math4/util/FastMath.java | 28 
>> +++++++++-----------
>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>  2 files changed, 15 insertions(+), 17 deletions(-)
>> ----------------------------------------------------------------------
>> 
>> 
>> 
>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>> ----------------------------------------------------------------------
>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>> index 24bb857..fcd03ea 100644
>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>> @@ -315,6 +315,9 @@ public class FastMath {
>>      /** Mask used to clear the non-sign part of a long. */
>>      private static final long MASK_NON_SIGN_LONG = 
>> 0x7fffffffffffffffl;
>> 
>> +    /** Bits representation of +1.0. */
>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>> +
>>      /** 2^52 - double numbers this large must be integral (no 
>> fraction)
>> or NaN or Infinite */
>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>      /** 2^53 - double numbers this large must be even. */
>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>              return x;
>>          }
>> 
>> +        if (y != y) { // Y is NaN
>> +            return y;
>> +        }
>> +
>>          if (x == 0) {
>>              long bits = Double.doubleToRawLongBits(x);
>>              if ((bits & 0x8000000000000000L) != 0) {
>> @@ -1485,18 +1492,13 @@ public class FastMath {
>> 
>>              if (y < 0) {
>>                  return Double.POSITIVE_INFINITY;
>> -            }
>> -            if (y > 0) {
>> +            } else {
>>                  return 0.0;
>>              }
>> 
>> -            return Double.NaN;
>>          }
>> 
>>          if (x == Double.POSITIVE_INFINITY) {
>> -            if (y != y) { // y is NaN
>> -                return y;
>> -            }
>>              if (y < 0.0) {
>>                  return 0.0;
>>              } else {
>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>          }
>> 
>>          if (y == Double.POSITIVE_INFINITY) {
>> -            if (x * x == 1.0) {
>> -                return Double.NaN;
>> -            }
>> -
>> -            if (x * x > 1.0) {
>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>> Double.doubleToRawLongBits(x);
>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>                  return Double.POSITIVE_INFINITY;
>> -            } else {
>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>                  return 0.0;
>> +            } else {
>> +                return Double.NaN;
>>              }
>>          }
>> 
>>          if (x == Double.NEGATIVE_INFINITY) {
>> -            if (y != y) { // y is NaN
>> -                return y;
>> -            }
>> 
>>              if (y < 0) {
>>                  long yi = (long) y;
>> 
>> 
>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> ----------------------------------------------------------------------
>> diff --git 
>> a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> index 5d36fea..06a1d07 100644
>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> @@ -29,8 +29,6 @@ import
>> org.apache.commons.math4.exception.MathArithmeticException;
>>  import org.apache.commons.math4.random.MersenneTwister;
>>  import org.apache.commons.math4.random.RandomGenerator;
>>  import org.apache.commons.math4.random.Well1024a;
>> -import org.apache.commons.math4.util.FastMath;
>> -import org.apache.commons.math4.util.Precision;
>>  import org.junit.Assert;
>>  import org.junit.Before;
>>  import org.junit.Ignore;
>> @@ -393,6 +391,8 @@ public class FastMathTest {
>> 
>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>> 
>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>> +
>>          // Added tests for a 100% coverage
>> 
>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>> 
>> 

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎7:20:04 AM | luc <luc@spaceroots.org>Go to full article
Le 2015-05-04 14:32, Benedikt Ritter a écrit :
> Hello Luc,
> 
> 2015-05-04 13:43 GMT+02:00 <luc@apache.org>:
> 
>> Repository: commons-math
>> Updated Branches:
>>   refs/heads/master c8cb75243 -> c771c0080
>> 
>> 
>> Attempt to circumvent some errors which seem to be platform-dependent.
>> 
>> The Jenkins build often fails on code that seems to be perfectly
>> correct. Failures also do no always happen so they may depend on
>> platform. There were similar problems a few months ago that were
>> probably related to JIT bugs.
>> 
>> This fix simply tries to do the same thing as before, but with an
>> earlier detection of NaN in one case, and by comparing directly the 
>> bits
>> representation in another case, to avoid wrong optimizations.
>> 
>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>> Commit:
>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>> Tree: 
>> http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>> Diff: 
>> http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>> 
>> Branch: refs/heads/master
>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>> Parents: c8cb752
>> Author: Luc Maisonobe <luc@apache.org>
>> Authored: Mon May 4 13:43:27 2015 +0200
>> Committer: Luc Maisonobe <luc@apache.org>
>> Committed: Mon May 4 13:43:27 2015 +0200
>> 
>> ----------------------------------------------------------------------
>>  .../org/apache/commons/math4/util/FastMath.java | 28 
>> +++++++++-----------
>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>  2 files changed, 15 insertions(+), 17 deletions(-)
>> ----------------------------------------------------------------------
>> 
>> 
>> 
>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>> ----------------------------------------------------------------------
>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>> index 24bb857..fcd03ea 100644
>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>> @@ -315,6 +315,9 @@ public class FastMath {
>>      /** Mask used to clear the non-sign part of a long. */
>>      private static final long MASK_NON_SIGN_LONG = 
>> 0x7fffffffffffffffl;
>> 
>> +    /** Bits representation of +1.0. */
>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>> +
>>      /** 2^52 - double numbers this large must be integral (no 
>> fraction)
>> or NaN or Infinite */
>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>      /** 2^53 - double numbers this large must be even. */
>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>              return x;
>>          }
>> 
>> +        if (y != y) { // Y is NaN
>> 
> 
> It really took me some time to understand this change. How about using
> Double.isNaN(double) instead? It does the same as the current code, but
> reads better, IMHO.

I agree but in this huge class this is how all NaNs are detected and 
there
are a bunch of such tests. I don't know the reason these existing tests
were done this way and not using Double.isNaN, it may well be 
performance related.
So for this class (and this class only), I prefer to do it the same way 
it
is already done a few lines above or below.

best regards,
Luc


> 
> Best regards,
> Benedikt
> 
> 
>> +            return y;
>> +        }
>> +
>>          if (x == 0) {
>>              long bits = Double.doubleToRawLongBits(x);
>>              if ((bits & 0x8000000000000000L) != 0) {
>> @@ -1485,18 +1492,13 @@ public class FastMath {
>> 
>>              if (y < 0) {
>>                  return Double.POSITIVE_INFINITY;
>> -            }
>> -            if (y > 0) {
>> +            } else {
>>                  return 0.0;
>>              }
>> 
>> -            return Double.NaN;
>>          }
>> 
>>          if (x == Double.POSITIVE_INFINITY) {
>> -            if (y != y) { // y is NaN
>> -                return y;
>> -            }
>>              if (y < 0.0) {
>>                  return 0.0;
>>              } else {
>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>          }
>> 
>>          if (y == Double.POSITIVE_INFINITY) {
>> -            if (x * x == 1.0) {
>> -                return Double.NaN;
>> -            }
>> -
>> -            if (x * x > 1.0) {
>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>> Double.doubleToRawLongBits(x);
>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>                  return Double.POSITIVE_INFINITY;
>> -            } else {
>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>                  return 0.0;
>> +            } else {
>> +                return Double.NaN;
>>              }
>>          }
>> 
>>          if (x == Double.NEGATIVE_INFINITY) {
>> -            if (y != y) { // y is NaN
>> -                return y;
>> -            }
>> 
>>              if (y < 0) {
>>                  long yi = (long) y;
>> 
>> 
>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> ----------------------------------------------------------------------
>> diff --git 
>> a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> index 5d36fea..06a1d07 100644
>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> @@ -29,8 +29,6 @@ import
>> org.apache.commons.math4.exception.MathArithmeticException;
>>  import org.apache.commons.math4.random.MersenneTwister;
>>  import org.apache.commons.math4.random.RandomGenerator;
>>  import org.apache.commons.math4.random.Well1024a;
>> -import org.apache.commons.math4.util.FastMath;
>> -import org.apache.commons.math4.util.Precision;
>>  import org.junit.Assert;
>>  import org.junit.Before;
>>  import org.junit.Ignore;
>> @@ -393,6 +391,8 @@ public class FastMathTest {
>> 
>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>> 
>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>> +
>>          // Added tests for a 100% coverage
>> 
>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>> 
>> 

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎7:07:52 AM | sebb <sebbaz@gmail.com>Go to full article
Also, note that commit log messages are not published with the source code.

So please consider adding suitable comments in the source code itself.

The commit log should contain sufficient detail to understand why the
commit was done; the source code needs to contain the detail to
understand the source on its own.



On 4 May 2015 at 13:32, Benedikt Ritter <britter@apache.org> wrote:
> Hello Luc,
>
> 2015-05-04 13:43 GMT+02:00 <luc@apache.org>:
>
>> Repository: commons-math
>> Updated Branches:
>>   refs/heads/master c8cb75243 -> c771c0080
>>
>>
>> Attempt to circumvent some errors which seem to be platform-dependent.
>>
>> The Jenkins build often fails on code that seems to be perfectly
>> correct. Failures also do no always happen so they may depend on
>> platform. There were similar problems a few months ago that were
>> probably related to JIT bugs.
>>
>> This fix simply tries to do the same thing as before, but with an
>> earlier detection of NaN in one case, and by comparing directly the bits
>> representation in another case, to avoid wrong optimizations.
>>
>> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
>> Commit:
>> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
>> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
>> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>>
>> Branch: refs/heads/master
>> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
>> Parents: c8cb752
>> Author: Luc Maisonobe <luc@apache.org>
>> Authored: Mon May 4 13:43:27 2015 +0200
>> Committer: Luc Maisonobe <luc@apache.org>
>> Committed: Mon May 4 13:43:27 2015 +0200
>>
>> ----------------------------------------------------------------------
>>  .../org/apache/commons/math4/util/FastMath.java | 28 +++++++++-----------
>>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>>  2 files changed, 15 insertions(+), 17 deletions(-)
>> ----------------------------------------------------------------------
>>
>>
>>
>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
>> ----------------------------------------------------------------------
>> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
>> b/src/main/java/org/apache/commons/math4/util/FastMath.java
>> index 24bb857..fcd03ea 100644
>> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
>> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
>> @@ -315,6 +315,9 @@ public class FastMath {
>>      /** Mask used to clear the non-sign part of a long. */
>>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>>
>> +    /** Bits representation of +1.0. */
>> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
>> +
>>      /** 2^52 - double numbers this large must be integral (no fraction)
>> or NaN or Infinite */
>>      private static final double TWO_POWER_52 = 4503599627370496.0;
>>      /** 2^53 - double numbers this large must be even. */
>> @@ -1468,6 +1471,10 @@ public class FastMath {
>>              return x;
>>          }
>>
>> +        if (y != y) { // Y is NaN
>>
>
> It really took me some time to understand this change. How about using
> Double.isNaN(double) instead? It does the same as the current code, but
> reads better, IMHO.
>
> Best regards,
> Benedikt
>
>
>> +            return y;
>> +        }
>> +
>>          if (x == 0) {
>>              long bits = Double.doubleToRawLongBits(x);
>>              if ((bits & 0x8000000000000000L) != 0) {
>> @@ -1485,18 +1492,13 @@ public class FastMath {
>>
>>              if (y < 0) {
>>                  return Double.POSITIVE_INFINITY;
>> -            }
>> -            if (y > 0) {
>> +            } else {
>>                  return 0.0;
>>              }
>>
>> -            return Double.NaN;
>>          }
>>
>>          if (x == Double.POSITIVE_INFINITY) {
>> -            if (y != y) { // y is NaN
>> -                return y;
>> -            }
>>              if (y < 0.0) {
>>                  return 0.0;
>>              } else {
>> @@ -1505,21 +1507,17 @@ public class FastMath {
>>          }
>>
>>          if (y == Double.POSITIVE_INFINITY) {
>> -            if (x * x == 1.0) {
>> -                return Double.NaN;
>> -            }
>> -
>> -            if (x * x > 1.0) {
>> +            long bitsAbsX = MASK_NON_SIGN_LONG &
>> Double.doubleToRawLongBits(x);
>> +            if (bitsAbsX > PLUS_ONE_BITS) {
>>                  return Double.POSITIVE_INFINITY;
>> -            } else {
>> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>>                  return 0.0;
>> +            } else {
>> +                return Double.NaN;
>>              }
>>          }
>>
>>          if (x == Double.NEGATIVE_INFINITY) {
>> -            if (y != y) { // y is NaN
>> -                return y;
>> -            }
>>
>>              if (y < 0) {
>>                  long yi = (long) y;
>>
>>
>> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> ----------------------------------------------------------------------
>> diff --git a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> index 5d36fea..06a1d07 100644
>> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
>> @@ -29,8 +29,6 @@ import
>> org.apache.commons.math4.exception.MathArithmeticException;
>>  import org.apache.commons.math4.random.MersenneTwister;
>>  import org.apache.commons.math4.random.RandomGenerator;
>>  import org.apache.commons.math4.random.Well1024a;
>> -import org.apache.commons.math4.util.FastMath;
>> -import org.apache.commons.math4.util.Precision;
>>  import org.junit.Assert;
>>  import org.junit.Before;
>>  import org.junit.Ignore;
>> @@ -393,6 +391,8 @@ public class FastMathTest {
>>
>>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
>> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>>
>> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
>> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
>> +
>>          // Added tests for a 100% coverage
>>
>>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
>> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>>
>>
>
>
> --
> http://people.apache.org/~britter/
> http://www.systemoutprintln.de/
> http://twitter.com/BenediktRitter
> http://github.com/britter

---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎5:48:59 AM | Thomas Neidhart <thomas.neidhart@gmail.com>Go to full article
Problem still remains, see here:
https://builds.apache.org/job/Commons%20Math%20H10/49/console

The test failures only occur on the following slaves it seems:

 * H10
 * ubuntu-2

Thomas


On Mon, May 4, 2015 at 1:43 PM, <luc@apache.org> wrote:

> Repository: commons-math
> Updated Branches:
>   refs/heads/master c8cb75243 -> c771c0080
>
>
> Attempt to circumvent some errors which seem to be platform-dependent.
>
> The Jenkins build often fails on code that seems to be perfectly
> correct. Failures also do no always happen so they may depend on
> platform. There were similar problems a few months ago that were
> probably related to JIT bugs.
>
> This fix simply tries to do the same thing as before, but with an
> earlier detection of NaN in one case, and by comparing directly the bits
> representation in another case, to avoid wrong optimizations.
>
> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
> Commit:
> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>
> Branch: refs/heads/master
> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
> Parents: c8cb752
> Author: Luc Maisonobe <luc@apache.org>
> Authored: Mon May 4 13:43:27 2015 +0200
> Committer: Luc Maisonobe <luc@apache.org>
> Committed: Mon May 4 13:43:27 2015 +0200
>
> ----------------------------------------------------------------------
>  .../org/apache/commons/math4/util/FastMath.java | 28 +++++++++-----------
>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>  2 files changed, 15 insertions(+), 17 deletions(-)
> ----------------------------------------------------------------------
>
>
>
> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
> ----------------------------------------------------------------------
> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
> b/src/main/java/org/apache/commons/math4/util/FastMath.java
> index 24bb857..fcd03ea 100644
> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
> @@ -315,6 +315,9 @@ public class FastMath {
>      /** Mask used to clear the non-sign part of a long. */
>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>
> +    /** Bits representation of +1.0. */
> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
> +
>      /** 2^52 - double numbers this large must be integral (no fraction)
> or NaN or Infinite */
>      private static final double TWO_POWER_52 = 4503599627370496.0;
>      /** 2^53 - double numbers this large must be even. */
> @@ -1468,6 +1471,10 @@ public class FastMath {
>              return x;
>          }
>
> +        if (y != y) { // Y is NaN
> +            return y;
> +        }
> +
>          if (x == 0) {
>              long bits = Double.doubleToRawLongBits(x);
>              if ((bits & 0x8000000000000000L) != 0) {
> @@ -1485,18 +1492,13 @@ public class FastMath {
>
>              if (y < 0) {
>                  return Double.POSITIVE_INFINITY;
> -            }
> -            if (y > 0) {
> +            } else {
>                  return 0.0;
>              }
>
> -            return Double.NaN;
>          }
>
>          if (x == Double.POSITIVE_INFINITY) {
> -            if (y != y) { // y is NaN
> -                return y;
> -            }
>              if (y < 0.0) {
>                  return 0.0;
>              } else {
> @@ -1505,21 +1507,17 @@ public class FastMath {
>          }
>
>          if (y == Double.POSITIVE_INFINITY) {
> -            if (x * x == 1.0) {
> -                return Double.NaN;
> -            }
> -
> -            if (x * x > 1.0) {
> +            long bitsAbsX = MASK_NON_SIGN_LONG &
> Double.doubleToRawLongBits(x);
> +            if (bitsAbsX > PLUS_ONE_BITS) {
>                  return Double.POSITIVE_INFINITY;
> -            } else {
> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>                  return 0.0;
> +            } else {
> +                return Double.NaN;
>              }
>          }
>
>          if (x == Double.NEGATIVE_INFINITY) {
> -            if (y != y) { // y is NaN
> -                return y;
> -            }
>
>              if (y < 0) {
>                  long yi = (long) y;
>
>
> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> ----------------------------------------------------------------------
> diff --git a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> index 5d36fea..06a1d07 100644
> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> @@ -29,8 +29,6 @@ import
> org.apache.commons.math4.exception.MathArithmeticException;
>  import org.apache.commons.math4.random.MersenneTwister;
>  import org.apache.commons.math4.random.RandomGenerator;
>  import org.apache.commons.math4.random.Well1024a;
> -import org.apache.commons.math4.util.FastMath;
> -import org.apache.commons.math4.util.Precision;
>  import org.junit.Assert;
>  import org.junit.Before;
>  import org.junit.Ignore;
> @@ -393,6 +391,8 @@ public class FastMathTest {
>
>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>
> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
> +
>          // Added tests for a 100% coverage
>
>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>
>




Re: [math] Attempt to circumvent some errors which seem to be platform-dependent.
‎Monday, ‎May ‎04, ‎2015, ‏‎5:32:28 AM | Benedikt Ritter <britter@apache.org>Go to full article
Hello Luc,

2015-05-04 13:43 GMT+02:00 <luc@apache.org>:

> Repository: commons-math
> Updated Branches:
>   refs/heads/master c8cb75243 -> c771c0080
>
>
> Attempt to circumvent some errors which seem to be platform-dependent.
>
> The Jenkins build often fails on code that seems to be perfectly
> correct. Failures also do no always happen so they may depend on
> platform. There were similar problems a few months ago that were
> probably related to JIT bugs.
>
> This fix simply tries to do the same thing as before, but with an
> earlier detection of NaN in one case, and by comparing directly the bits
> representation in another case, to avoid wrong optimizations.
>
> Project: http://git-wip-us.apache.org/repos/asf/commons-math/repo
> Commit:
> http://git-wip-us.apache.org/repos/asf/commons-math/commit/c771c008
> Tree: http://git-wip-us.apache.org/repos/asf/commons-math/tree/c771c008
> Diff: http://git-wip-us.apache.org/repos/asf/commons-math/diff/c771c008
>
> Branch: refs/heads/master
> Commit: c771c0080b08abd80418c4e88f1be3efec828f0a
> Parents: c8cb752
> Author: Luc Maisonobe <luc@apache.org>
> Authored: Mon May 4 13:43:27 2015 +0200
> Committer: Luc Maisonobe <luc@apache.org>
> Committed: Mon May 4 13:43:27 2015 +0200
>
> ----------------------------------------------------------------------
>  .../org/apache/commons/math4/util/FastMath.java | 28 +++++++++-----------
>  .../apache/commons/math4/util/FastMathTest.java |  4 +--
>  2 files changed, 15 insertions(+), 17 deletions(-)
> ----------------------------------------------------------------------
>
>
>
> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/main/java/org/apache/commons/math4/util/FastMath.java
> ----------------------------------------------------------------------
> diff --git a/src/main/java/org/apache/commons/math4/util/FastMath.java
> b/src/main/java/org/apache/commons/math4/util/FastMath.java
> index 24bb857..fcd03ea 100644
> --- a/src/main/java/org/apache/commons/math4/util/FastMath.java
> +++ b/src/main/java/org/apache/commons/math4/util/FastMath.java
> @@ -315,6 +315,9 @@ public class FastMath {
>      /** Mask used to clear the non-sign part of a long. */
>      private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;
>
> +    /** Bits representation of +1.0. */
> +    private static final long PLUS_ONE_BITS = 0x3ff0000000000000L;
> +
>      /** 2^52 - double numbers this large must be integral (no fraction)
> or NaN or Infinite */
>      private static final double TWO_POWER_52 = 4503599627370496.0;
>      /** 2^53 - double numbers this large must be even. */
> @@ -1468,6 +1471,10 @@ public class FastMath {
>              return x;
>          }
>
> +        if (y != y) { // Y is NaN
>

It really took me some time to understand this change. How about using
Double.isNaN(double) instead? It does the same as the current code, but
reads better, IMHO.

Best regards,
Benedikt


> +            return y;
> +        }
> +
>          if (x == 0) {
>              long bits = Double.doubleToRawLongBits(x);
>              if ((bits & 0x8000000000000000L) != 0) {
> @@ -1485,18 +1492,13 @@ public class FastMath {
>
>              if (y < 0) {
>                  return Double.POSITIVE_INFINITY;
> -            }
> -            if (y > 0) {
> +            } else {
>                  return 0.0;
>              }
>
> -            return Double.NaN;
>          }
>
>          if (x == Double.POSITIVE_INFINITY) {
> -            if (y != y) { // y is NaN
> -                return y;
> -            }
>              if (y < 0.0) {
>                  return 0.0;
>              } else {
> @@ -1505,21 +1507,17 @@ public class FastMath {
>          }
>
>          if (y == Double.POSITIVE_INFINITY) {
> -            if (x * x == 1.0) {
> -                return Double.NaN;
> -            }
> -
> -            if (x * x > 1.0) {
> +            long bitsAbsX = MASK_NON_SIGN_LONG &
> Double.doubleToRawLongBits(x);
> +            if (bitsAbsX > PLUS_ONE_BITS) {
>                  return Double.POSITIVE_INFINITY;
> -            } else {
> +            } else if (bitsAbsX < PLUS_ONE_BITS) {
>                  return 0.0;
> +            } else {
> +                return Double.NaN;
>              }
>          }
>
>          if (x == Double.NEGATIVE_INFINITY) {
> -            if (y != y) { // y is NaN
> -                return y;
> -            }
>
>              if (y < 0) {
>                  long yi = (long) y;
>
>
> http://git-wip-us.apache.org/repos/asf/commons-math/blob/c771c008/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> ----------------------------------------------------------------------
> diff --git a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> index 5d36fea..06a1d07 100644
> --- a/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> +++ b/src/test/java/org/apache/commons/math4/util/FastMathTest.java
> @@ -29,8 +29,6 @@ import
> org.apache.commons.math4.exception.MathArithmeticException;
>  import org.apache.commons.math4.random.MersenneTwister;
>  import org.apache.commons.math4.random.RandomGenerator;
>  import org.apache.commons.math4.random.Well1024a;
> -import org.apache.commons.math4.util.FastMath;
> -import org.apache.commons.math4.util.Precision;
>  import org.junit.Assert;
>  import org.junit.Before;
>  import org.junit.Ignore;
> @@ -393,6 +391,8 @@ public class FastMathTest {
>
>          Assert.assertTrue("pow(-2.0, 3.5) should be NaN",
> Double.isNaN(FastMath.pow(-2.0, 3.5)));
>
> +        Assert.assertTrue("pow(-0.0, NaN) should be NaN",
> Double.isNaN(FastMath.pow(-0.0, Double.NaN)));
> +
>          // Added tests for a 100% coverage
>
>          Assert.assertTrue("pow(+Inf, NaN) should be NaN",
> Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY, Double.NaN)));
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [VOTE] Release Apache Commons CLI 1.3 based on RC1
‎Monday, ‎May ‎04, ‎2015, ‏‎2:05:23 AM | Jacopo Cappellato <jacopo.cappellato@gmail.com>Go to full article
Hi Benedikt,

see inline (with my vote at the bottom):

On May 3, 2015, at 5:18 PM, Benedikt Ritter <britter@apache.org> wrote:

> Hi,
> 
> We have fixed quite a few bugs and added some significant enhancements
> since CLI 1.2 was released and the Groovy Project is asking for a new
> release, so I would like to release CLI 1.3. The most notable change is the
> introduction of a new API for creating Option instances.
> 
> CLI 1.3 RC1 is available for review here:
>  https://dist.apache.org/repos/dist/dev/commons/cli/ (svn revision 8797)

Tested the checksums and signatures of the -bin.zip and -src.zip versions.

Results for -bin.zip:
* detached signature: ok
* sha checksum: ok
* md5 checksum: ok

Results for -src.zip:
* detached signature: ok
* sha checksum: ok
* md5 checksum: ok

> 
> Maven artifacts are here:
>  https://repository.apache.org/content/repositories/orgapachecommons-1090/
> 
> Details of changes since 1.2 are in the release notes:
>  https://dist.apache.org/repos/dist/dev/commons/cli/RELEASE-NOTES.txt
>  http://people.apache.org/~britter/cli-1.3-RC1/changes-report.html
> 

Release notes and report look good to me.

> I have tested this with JDK 6, 7 and 8 using maven 3.
> 

Tested the -src.zip file: all tests successful (mvn test) with Java 7.

> The tag is here:
>  http://svn.apache.org/repos/asf/commons/proper/cli/tags/cli-1.3-RC1/ (svn
> revision 1677410)
> 
> Site:
>  http://people.apache.org/~britter/cli-1.3-RC1/
>  (note some *relative* links are broken and the 1.2 directories are not
> yet created - these will be OK once the site is deployed)

The site looks good but I have noticed that under "User Guide" section in the left bar we
have now two items:
Javadoc (Current 1.3)
Javadoc (1.3)

Maybe we should drop the last one or point it to 1.2

> 
> Clirr Report (compared to 1.2):
>  http://people.apache.org/~britter/cli-1.3-RC1/clirr-report.html
> 
> RAT Report:
>  http://people.apache.org/~britter/cli-1.3-RC1/rat-report.html
> 
> KEYS:
>  https://www.apache.org/dist/commons/KEYS
> 
> Please review the release candidate and vote. This vote will close no
> sooner that 72 hours from now, i.e. after 06-May 2015, 17:30 CEST.
> 
> [ ] +1 Release these artifacts
> [ ] +0 OK, but...
> [ ] -0 OK, but really should fix...
> [ ] -1 I oppose this release because...

+1 (not binding)

Regards,

Jacopo

> 
> Thanks!
> Benedikt
> 
> 
> -- 
> http://people.apache.org/~britter/
> http://www.systemoutprintln.de/
> http://twitter.com/BenediktRitter
> http://github.com/britter


---------------------------------------------------------------------
To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
For additional commands, e-mail: dev-help@commons.apache.org





Re: [VOTE] Release Apache Commons CLI 1.3 based on RC1
‎Monday, ‎May ‎04, ‎2015, ‏‎1:31:12 AM | "Bruno P. Kinoshita" <brunodepaulak@yahoo.com.br>Go to full article
+1 non-binding
No new FindBugs, PMD or CPD issues, new site layout (with minor CSS adjustments I think) looks
good, all tests pass. Environment:
Apache Maven 3.2.5 (12a6b3acb947671f09b81f49094c53f426d8cea1; 2014-12-15T06:29:23+13:00)
Maven home: /opt/apache-maven-3.2.5
Java version: 1.8.0_45, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-8-oracle/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "3.16.0-36-generic", arch: "amd64", family: "unix"

There are some issues in SonarQube, but the only one that called my attention was catching
exception and throwing a new one without including the old exception [1]. But maybe that's
the intended behaviour?

Cheers
Bruno

[1] https://analysis.apache.org/issues/search#issues=15472838-0deb-4ae9-8c53-db00a11cc2ad

 
      From: Benedikt Ritter <britter@apache.org>
 To: Commons Developers List <dev@commons.apache.org> 
 Sent: Monday, May 4, 2015 3:18 AM
 Subject: [VOTE] Release Apache Commons CLI 1.3 based on RC1
   
Hi,

We have fixed quite a few bugs and added some significant enhancements
since CLI 1.2 was released and the Groovy Project is asking for a new
release, so I would like to release CLI 1.3. The most notable change is the
introduction of a new API for creating Option instances.

CLI 1.3 RC1 is available for review here:
  https://dist.apache.org/repos/dist/dev/commons/cli/ (svn revision 8797)

Maven artifacts are here:
  https://repository.apache.org/content/repositories/orgapachecommons-1090/

Details of changes since 1.2 are in the release notes:
  https://dist.apache.org/repos/dist/dev/commons/cli/RELEASE-NOTES.txt
  http://people.apache.org/~britter/cli-1.3-RC1/changes-report.html

I have tested this with JDK 6, 7 and 8 using maven 3.

The tag is here:
  http://svn.apache.org/repos/asf/commons/proper/cli/tags/cli-1.3-RC1/ (svn
revision 1677410)

Site:
  http://people.apache.org/~britter/cli-1.3-RC1/
  (note some *relative* links are broken and the 1.2 directories are not
yet created - these will be OK once the site is deployed)

Clirr Report (compared to 1.2):
  http://people.apache.org/~britter/cli-1.3-RC1/clirr-report.html

RAT Report:
  http://people.apache.org/~britter/cli-1.3-RC1/rat-report.html

KEYS:
  https://www.apache.org/dist/commons/KEYS

Please review the release candidate and vote. This vote will close no
sooner that 72 hours from now, i.e. after 06-May 2015, 17:30 CEST.

[ ] +1 Release these artifacts
[ ] +0 OK, but...
[ ] -0 OK, but really should fix...
[ ] -1 I oppose this release because...

Thanks!
Benedikt


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter


   




Re: [VOTE] Release Apache Commons CLI 1.3 based on RC1
‎Sunday, ‎May ‎03, ‎2015, ‏‎11:11:58 PM | Benedikt Ritter <britter@apache.org>Go to full article
2015-05-03 19:21 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:

> The new class DefaultParser does not use generics to define the options
> List, that is suspicious. Looking closer, the list can hold a mix of
> OptionGroup and String instances. Really? Looking at Options I see the list
> defined as List<Object>. This avoids compiler warnings but is nasty. This
> is probably what we have inherited from this very old code base. We should
> at least perpetuate this to DefaultParser's List as a List<Object>.
>

Don't be shy ;-) If this is a blocker for you, please vote -1.

Asking this the other way around: Would you be willing to vote +1 on a
second RC if the option list in DefaultParser is generified?

Thank you!
Benedikt


>
> I switched a couple of years ago to using annotation based CLI processing
> with JCommander. I'd like to come back to Commons for CLI, but not I do not
> see that happening until a very different CLI2 emerges.
>
> This is not the thread for discussing a CLI2 of course... ;-)
>
> Gary
>
> On Sun, May 3, 2015 at 8:18 AM, Benedikt Ritter <britter@apache.org>
> wrote:
>
> > Hi,
> >
> > We have fixed quite a few bugs and added some significant enhancements
> > since CLI 1.2 was released and the Groovy Project is asking for a new
> > release, so I would like to release CLI 1.3. The most notable change is
> the
> > introduction of a new API for creating Option instances.
> >
> > CLI 1.3 RC1 is available for review here:
> >   https://dist.apache.org/repos/dist/dev/commons/cli/ (svn revision
> 8797)
> >
> > Maven artifacts are here:
> >
> >
> https://repository.apache.org/content/repositories/orgapachecommons-1090/
> >
> > Details of changes since 1.2 are in the release notes:
> >   https://dist.apache.org/repos/dist/dev/commons/cli/RELEASE-NOTES.txt
> >   http://people.apache.org/~britter/cli-1.3-RC1/changes-report.html
> >
> > I have tested this with JDK 6, 7 and 8 using maven 3.
> >
> > The tag is here:
> >   http://svn.apache.org/repos/asf/commons/proper/cli/tags/cli-1.3-RC1/
> > (svn
> > revision 1677410)
> >
> > Site:
> >   http://people.apache.org/~britter/cli-1.3-RC1/
> >   (note some *relative* links are broken and the 1.2 directories are not
> > yet created - these will be OK once the site is deployed)
> >
> > Clirr Report (compared to 1.2):
> >   http://people.apache.org/~britter/cli-1.3-RC1/clirr-report.html
> >
> > RAT Report:
> >   http://people.apache.org/~britter/cli-1.3-RC1/rat-report.html
> >
> > KEYS:
> >   https://www.apache.org/dist/commons/KEYS
> >
> > Please review the release candidate and vote. This vote will close no
> > sooner that 72 hours from now, i.e. after 06-May 2015, 17:30 CEST.
> >
> > [ ] +1 Release these artifacts
> > [ ] +0 OK, but...
> > [ ] -0 OK, but really should fix...
> > [ ] -1 I oppose this release because...
> >
> > Thanks!
> > Benedikt
> >
> >
> > --
> > http://people.apache.org/~britter/
> > http://www.systemoutprintln.de/
> > http://twitter.com/BenediktRitter
> > http://github.com/britter
> >
>
>
>
> --
> E-Mail: garydgregory@gmail.com | ggregory@apache.org
> Java Persistence with Hibernate, Second Edition
> <http://www.manning.com/bauer3/>
> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> Spring Batch in Action <http://www.manning.com/templier/>
> Blog: http://garygregory.wordpress.com
> Home: http://garygregory.com/
> Tweet! http://twitter.com/GaryGregory
>



-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [VOTE] Release Apache Commons CLI 1.3 based on RC1
‎Sunday, ‎May ‎03, ‎2015, ‏‎11:10:20 PM | Benedikt Ritter <britter@apache.org>Go to full article
Strange? Building the site with:

Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06;
2015-04-22T13:57:37+02:00)
Maven home: /usr/local/Cellar/maven/3.3.3/libexec
Java version: 1.7.0_75, vendor: Oracle Corporation
Java home:
/Library/Java/JavaVirtualMachines/jdk1.7.0_75.jdk/Contents/Home/jre
Default locale: de_DE, platform encoding: UTF-8
OS name: "mac os x", version: "10.10.3", arch: "x86_64", family: "mac"

works on my machine. No error or stacktraces... Can you give some more
context?

Benedikt

2015-05-03 19:33 GMT+02:00 Gary Gregory <garydgregory@gmail.com>:

> Just FYI, the site does builds but logs errors with Maven 3.3.3, I think
> this might be a known issue. This means some reports do not get created. I
> do not think there is anything we can do except make a not of which Maven
> versions we know work. Maven 3.2.5 works fine for example.
>
> With Maven 3.3.3:
>
> [WARN] An issue has occurred with maven-checkstyle-plugin:2.15:checkstyle,
> skipping LinkageError
>
> org.slf4j.spi.LocationAwareLogger.log(Lorg/slf4j/Marker;Ljava/lang/String;ILjava/lang/String;Ljava/lang/Throwable;)V,
> please report an issue to Maven dev team.
> java.lang.NoSuchMethodError:
>
> org.slf4j.spi.LocationAwareLogger.log(Lorg/slf4j/Marker;Ljava/lang/String;ILjava/lang/String;Ljava/lang/Throwable;)V
>         at
>
> org.apache.commons.logging.impl.SLF4JLocationAwareLog.trace(SLF4JLocationAwareLog.java:99)
>         at
>
> org.apache.commons.beanutils.BeanUtilsBean.copyProperty(BeanUtilsBean.java:443)
>         at
>
> com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:149)
>         at
>
> org.apache.maven.plugin.checkstyle.exec.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:219)
>         at
>
> org.apache.maven.plugin.checkstyle.AbstractCheckstyleReport.executeReport(AbstractCheckstyleReport.java:473)
>         at
>
> org.apache.maven.plugin.checkstyle.CheckstyleReport.executeReport(CheckstyleReport.java:155)
>         at
>
> org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:255)
>         at
>
> org.apache.maven.plugins.site.render.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:224)
>         at
>
> org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.renderModule(DefaultSiteRenderer.java:311)
>         at
>
> org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render(DefaultSiteRenderer.java:129)
>         at
>
> org.apache.maven.plugins.site.render.SiteMojo.renderLocale(SiteMojo.java:182)
>         at
> org.apache.maven.plugins.site.render.SiteMojo.execute(SiteMojo.java:141)
>         at
>
> org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
>         at
>
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
>         at
>
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
>         at
>
> org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
>         at
>
> org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
>         at
>
> org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
>         at
>
> org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
>         at
>
> org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
>         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
>         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
>         at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
>         at org.apache.maven.cli.MavenCli.execute(MavenCli.java:862)
>         at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:286)
>         at org.apache.maven.cli.MavenCli.main(MavenCli.java:197)
>         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
>         at
>
> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
>         at
>
> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
>         at java.lang.reflect.Method.invoke(Method.java:606)
>         at
>
> org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
>         at
> org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
>         at
>
> org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
>         at
> org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
>
> Gary
>
> On Sun, May 3, 2015 at 10:21 AM, Gary Gregory <garydgregory@gmail.com>
> wrote:
>
> > The new class DefaultParser does not use generics to define the options
> > List, that is suspicious. Looking closer, the list can hold a mix of
> > OptionGroup and String instances. Really? Looking at Options I see the
> list
> > defined as List<Object>. This avoids compiler warnings but is nasty. This
> > is probably what we have inherited from this very old code base. We
> should
> > at least perpetuate this to DefaultParser's List as a List<Object>.
> >
> > I switched a couple of years ago to using annotation based CLI processing
> > with JCommander. I'd like to come back to Commons for CLI, but not I do
> not
> > see that happening until a very different CLI2 emerges.
> >
> > This is not the thread for discussing a CLI2 of course... ;-)
> >
> > Gary
> >
> > On Sun, May 3, 2015 at 8:18 AM, Benedikt Ritter <britter@apache.org>
> > wrote:
> >
> >> Hi,
> >>
> >> We have fixed quite a few bugs and added some significant enhancements
> >> since CLI 1.2 was released and the Groovy Project is asking for a new
> >> release, so I would like to release CLI 1.3. The most notable change is
> >> the
> >> introduction of a new API for creating Option instances.
> >>
> >> CLI 1.3 RC1 is available for review here:
> >>   https://dist.apache.org/repos/dist/dev/commons/cli/ (svn revision
> 8797)
> >>
> >> Maven artifacts are here:
> >>
> >>
> https://repository.apache.org/content/repositories/orgapachecommons-1090/
> >>
> >> Details of changes since 1.2 are in the release notes:
> >>   https://dist.apache.org/repos/dist/dev/commons/cli/RELEASE-NOTES.txt
> >>   http://people.apache.org/~britter/cli-1.3-RC1/changes-report.html
> >>
> >> I have tested this with JDK 6, 7 and 8 using maven 3.
> >>
> >> The tag is here:
> >>   http://svn.apache.org/repos/asf/commons/proper/cli/tags/cli-1.3-RC1/
> >> (svn
> >> revision 1677410)
> >>
> >> Site:
> >>   http://people.apache.org/~britter/cli-1.3-RC1/
> >>   (note some *relative* links are broken and the 1.2 directories are not
> >> yet created - these will be OK once the site is deployed)
> >>
> >> Clirr Report (compared to 1.2):
> >>   http://people.apache.org/~britter/cli-1.3-RC1/clirr-report.html
> >>
> >> RAT Report:
> >>   http://people.apache.org/~britter/cli-1.3-RC1/rat-report.html
> >>
> >> KEYS:
> >>   https://www.apache.org/dist/commons/KEYS
> >>
> >> Please review the release candidate and vote. This vote will close no
> >> sooner that 72 hours from now, i.e. after 06-May 2015, 17:30 CEST.
> >>
> >> [ ] +1 Release these artifacts
> >> [ ] +0 OK, but...
> >> [ ] -0 OK, but really should fix...
> >> [ ] -1 I oppose this release because...
> >>
> >> Thanks!
> >> Benedikt
> >>
> >>
> >> --
> >> http://people.apache.org/~britter/
> >> http://www.systemoutprintln.de/
> >> http://twitter.com/BenediktRitter
> >> http://github.com/britter
> >>
> >
> >
> >
> > --
> > E-Mail: garydgregory@gmail.com | ggregory@apache.org
> > Java Persistence with Hibernate, Second Edition
> > <http://www.manning.com/bauer3/>
> > JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> > Spring Batch in Action <http://www.manning.com/templier/>
> > Blog: http://garygregory.wordpress.com
> > Home: http://garygregory.com/
> > Tweet! http://twitter.com/GaryGregory
> >
>
>
>
> --
> E-Mail: garydgregory@gmail.com | ggregory@apache.org
> Java Persistence with Hibernate, Second Edition
> <http://www.manning.com/bauer3/>
> JUnit in Action, Second Edition <http://www.manning.com/tahchiev/>
> Spring Batch in Action <http://www.manning.com/templier/>
> Blog: http://garygregory.wordpress.com
> Home: http://garygregory.com/
> Tweet! http://twitter.com/GaryGregory
>



-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Re: [CLI] Release 1.3
‎Sunday, ‎May ‎03, ‎2015, ‏‎11:06:59 PM | Benedikt Ritter <britter@apache.org>Go to full article
Hello Jacopo,

2015-05-03 18:20 GMT+02:00 Jacopo Cappellato <jacopo.cappellato@gmail.com>:

> On May 3, 2015, at 12:54 PM, Benedikt Ritter <britter@apache.org> wrote:
>
> > Sounds good to me. Go for it!
>
> I have attached a patch for one (but will resolve two) of the issues in
> the list:
>
> https://issues.apache.org/jira/browse/CLI-179
>
> I am not sure if it is the right direction but this is what I could do
> today, so I am sharing it; if someone could provide some feedback I would
> really appreciate it.
>

Thank you, I'll have a look.

Following the advice on the Groovy ML, I've looked through the open issues
and they all looked like they could be postponed to 1.4. So I moved them to
1.4 an started a release vote for 1.3 [1].

I would appreciate feedback for the RC from the Groovy project.

Thank you!

Benedikt

[1] http://markmail.org/message/bhp2c2l7mmk7dksq


>
> Regards,
>
> Jacopo
>
>
> ---------------------------------------------------------------------
> To unsubscribe, e-mail: dev-unsubscribe@commons.apache.org
> For additional commands, e-mail: dev-help@commons.apache.org
>
>


-- 
http://people.apache.org/~britter/
http://www.systemoutprintln.de/
http://twitter.com/BenediktRitter
http://github.com/britter




Show all items

Displaying40 / 40
 
All40New40
Sort by:
List OrderDateTitleAuthor(c)AdrianOrozcoJimenezAcostaGamez(c)[foreverInfinitely]



Filter by category:
CheckedMark feed as readView feed properties...
